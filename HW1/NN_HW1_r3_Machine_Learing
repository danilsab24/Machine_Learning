{"cells":[{"cell_type":"markdown","metadata":{"id":"EfEtOaq8m0PN"},"source":["# Import of Libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"ePd3RFX9ms2a","executionInfo":{"status":"ok","timestamp":1733527956099,"user_tz":-60,"elapsed":21965,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["import pandas as pd\n","import sys, time\n","import csv\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.multioutput import MultiOutputRegressor      # necessary because we have multiple output\n","from sklearn.linear_model import LinearRegression         # 1 model -> Linear Regression\n","from sklearn.tree import DecisionTreeRegressor            # 2 model -> Decision Tree\n","from sklearn.neighbors import KNeighborsRegressor         # 3 model -> KNN\n","from sklearn.svm import SVR                               # 4 model -> SVM\n","from sklearn.ensemble import RandomForestRegressor        # 5 model -> Random Forest (a set of decision tree)\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import mean_squared_error, r2_score, root_mean_squared_error\n","from sklearn.model_selection import ParameterGrid\n","import warnings\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from tqdm import tqdm\n","import os"]},{"cell_type":"markdown","metadata":{"id":"ugr4y9zhEIsr"},"source":["# 100 K"]},{"cell_type":"markdown","metadata":{"id":"D6j7ORSGn4yW"},"source":["## Dataset\n","The dataset is a file .csv composed by these attributes joint angles: j0, j1, cos(j0), cos(j1), sin(j0), sin(j1), fingertip position: ft_x, ft_y ft_qw, ft_qz. The file is created by following the professor code present in this [repository](https://github.com/iocchi/MLexercises.git) and saving the generated file on google drive.\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20777,"status":"ok","timestamp":1733527976873,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"zEQf2TkjnssL","outputId":"2c21a5aa-456c-4163-ebe0-95165db00e79"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#connect to google drive for install the file\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"bAb7ZKQcDYWy"},"source":["### Exploring the dataset"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"RPjpqqMHn-Ep","executionInfo":{"status":"ok","timestamp":1733508753854,"user_tz":-60,"elapsed":2603,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/LOG_FILE_FULL_R3.csv\",sep=';')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":231,"status":"ok","timestamp":1733154497761,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"l995QpJQdsHp","outputId":"f31e2460-96a8-4463-b9c8-23333974a5d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 100000 entries, 0 to 99999\n","Data columns (total 13 columns):\n"," #   Column   Non-Null Count   Dtype  \n","---  ------   --------------   -----  \n"," 0   j0       100000 non-null  float64\n"," 1   j1       100000 non-null  float64\n"," 2   j2       100000 non-null  float64\n"," 3   cos(j0)  100000 non-null  float64\n"," 4   cos(j1)  100000 non-null  float64\n"," 5   cos(j2)  100000 non-null  float64\n"," 6   sin(j0)  100000 non-null  float64\n"," 7   sin(j1)  100000 non-null  float64\n"," 8   sin(j2)  100000 non-null  float64\n"," 9   ft_x     100000 non-null  float64\n"," 10  ft_y     100000 non-null  float64\n"," 11  ft_qw    100000 non-null  float64\n"," 12  ft_qz    100000 non-null  float64\n","dtypes: float64(13)\n","memory usage: 9.9 MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":212,"status":"ok","timestamp":1733154502473,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"fnCLwj1Mg63c","outputId":"84264601-9b72-4f48-a7b7-edb13ff79df1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      j0     j1     j2  cos(j0)  cos(j1)  cos(j2)  sin(j0)  sin(j1)  sin(j2)  \\\n","0  0.004  0.021 -0.006    1.000    1.000    1.000    0.004    0.021   -0.006   \n","1  0.006  0.029 -0.008    1.000    1.000    1.000    0.006    0.029   -0.008   \n","2 -0.014  0.048 -0.037    1.000    0.999    0.999   -0.014    0.048   -0.037   \n","3 -0.075  0.088 -0.086    0.997    0.996    0.996   -0.074    0.088   -0.086   \n","4 -0.122  0.173 -0.149    0.993    0.985    0.989   -0.122    0.172   -0.149   \n","\n","    ft_x   ft_y  ft_qw  ft_qz  \n","0  0.310  0.005  1.000  0.010  \n","1  0.310  0.007  1.000  0.013  \n","2  0.310  0.002  1.000 -0.002  \n","3  0.309 -0.014  0.999 -0.036  \n","4  0.309 -0.018  0.999 -0.050  "],"text/html":["\n","  <div id=\"df-1d025898-7785-4180-9ce5-5a8d43a4de84\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>j0</th>\n","      <th>j1</th>\n","      <th>j2</th>\n","      <th>cos(j0)</th>\n","      <th>cos(j1)</th>\n","      <th>cos(j2)</th>\n","      <th>sin(j0)</th>\n","      <th>sin(j1)</th>\n","      <th>sin(j2)</th>\n","      <th>ft_x</th>\n","      <th>ft_y</th>\n","      <th>ft_qw</th>\n","      <th>ft_qz</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.004</td>\n","      <td>0.021</td>\n","      <td>-0.006</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>0.004</td>\n","      <td>0.021</td>\n","      <td>-0.006</td>\n","      <td>0.310</td>\n","      <td>0.005</td>\n","      <td>1.000</td>\n","      <td>0.010</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.006</td>\n","      <td>0.029</td>\n","      <td>-0.008</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>1.000</td>\n","      <td>0.006</td>\n","      <td>0.029</td>\n","      <td>-0.008</td>\n","      <td>0.310</td>\n","      <td>0.007</td>\n","      <td>1.000</td>\n","      <td>0.013</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.014</td>\n","      <td>0.048</td>\n","      <td>-0.037</td>\n","      <td>1.000</td>\n","      <td>0.999</td>\n","      <td>0.999</td>\n","      <td>-0.014</td>\n","      <td>0.048</td>\n","      <td>-0.037</td>\n","      <td>0.310</td>\n","      <td>0.002</td>\n","      <td>1.000</td>\n","      <td>-0.002</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.075</td>\n","      <td>0.088</td>\n","      <td>-0.086</td>\n","      <td>0.997</td>\n","      <td>0.996</td>\n","      <td>0.996</td>\n","      <td>-0.074</td>\n","      <td>0.088</td>\n","      <td>-0.086</td>\n","      <td>0.309</td>\n","      <td>-0.014</td>\n","      <td>0.999</td>\n","      <td>-0.036</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.122</td>\n","      <td>0.173</td>\n","      <td>-0.149</td>\n","      <td>0.993</td>\n","      <td>0.985</td>\n","      <td>0.989</td>\n","      <td>-0.122</td>\n","      <td>0.172</td>\n","      <td>-0.149</td>\n","      <td>0.309</td>\n","      <td>-0.018</td>\n","      <td>0.999</td>\n","      <td>-0.050</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d025898-7785-4180-9ce5-5a8d43a4de84')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1d025898-7785-4180-9ce5-5a8d43a4de84 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1d025898-7785-4180-9ce5-5a8d43a4de84');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-583c6e7e-c5db-47b6-9a87-402c64411a76\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-583c6e7e-c5db-47b6-9a87-402c64411a76')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-583c6e7e-c5db-47b6-9a87-402c64411a76 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"j0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1832838414344216,\n        \"min\": -3.406,\n        \"max\": 3.381,\n        \"num_unique_values\": 6664,\n        \"samples\": [\n          0.348,\n          -0.686,\n          -0.408\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2814768561189747,\n        \"min\": -2.026,\n        \"max\": 2.01,\n        \"num_unique_values\": 3964,\n        \"samples\": [\n          1.75,\n          1.445,\n          1.099\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2765573800792,\n        \"min\": -2.045,\n        \"max\": 2.051,\n        \"num_unique_values\": 3960,\n        \"samples\": [\n          -1.068,\n          0.475,\n          -0.736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7317575460448966,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          0.15,\n          -0.619,\n          -0.311\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4508596923954411,\n        \"min\": -0.439,\n        \"max\": 1.0,\n        \"num_unique_values\": 1417,\n        \"samples\": [\n          -0.034,\n          0.981,\n          0.412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4523067443383013,\n        \"min\": -0.462,\n        \"max\": 1.0,\n        \"num_unique_values\": 1413,\n        \"samples\": [\n          0.082,\n          0.761,\n          -0.097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.631466602420359,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          0.474,\n          -0.729,\n          -0.303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8267899199356051,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.461,\n          0.884,\n          0.319\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8239053511559792,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.163,\n          0.821,\n          0.442\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15597979848292703,\n        \"min\": -0.31,\n        \"max\": 0.31,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          -0.154,\n          0.019,\n          0.219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15184473539916093,\n        \"min\": -0.31,\n        \"max\": 0.309,\n        \"num_unique_values\": 620,\n        \"samples\": [\n          -0.141,\n          0.075,\n          -0.095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6226368958341633,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.911,\n          0.097,\n          0.563\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qz\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7205122242933463,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          0.22,\n          -0.192,\n          0.716\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":217,"status":"ok","timestamp":1733154500326,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9MEahoK9d7o5","outputId":"2d7fcfdc-26e5-47c5-c415-c687225b44d0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  j0             j1             j2        cos(j0)  \\\n","count  100000.000000  100000.000000  100000.000000  100000.000000   \n","mean        0.018398      -0.020824      -0.018663      -0.256286   \n","std         2.183284       1.281477       1.276557       0.731758   \n","min        -3.406000      -2.026000      -2.045000      -1.000000   \n","25%        -2.098000      -1.285000      -1.261000      -0.966000   \n","50%         0.070000      -0.028000      -0.038000      -0.512000   \n","75%         2.119000       1.226000       1.225000       0.454250   \n","max         3.381000       2.010000       2.051000       1.000000   \n","\n","             cos(j1)        cos(j2)        sin(j0)        sin(j1)  \\\n","count  100000.000000  100000.000000  100000.000000  100000.000000   \n","mean        0.336175       0.341250       0.011176      -0.012146   \n","std         0.450860       0.452307       0.631467       0.826790   \n","min        -0.439000      -0.462000      -1.000000      -1.000000   \n","25%        -0.112000      -0.111000      -0.526000      -0.951000   \n","50%         0.310000       0.321000       0.003000      -0.028000   \n","75%         0.785000       0.794000       0.569000       0.938000   \n","max         1.000000       1.000000       1.000000       1.000000   \n","\n","             sin(j2)           ft_x           ft_y          ft_qw  \\\n","count  100000.000000  100000.000000  100000.000000  100000.000000   \n","mean       -0.012851      -0.038067       0.001524       0.305248   \n","std         0.823905       0.155980       0.151845       0.622637   \n","min        -1.000000      -0.310000      -0.310000      -1.000000   \n","25%        -0.947000      -0.177000      -0.129000      -0.147000   \n","50%        -0.038000      -0.052000       0.004000       0.471000   \n","75%         0.939000       0.084000       0.131000       0.872000   \n","max         1.000000       0.310000       0.309000       1.000000   \n","\n","               ft_qz  \n","count  100000.000000  \n","mean       -0.004922  \n","std         0.720512  \n","min        -1.000000  \n","25%        -0.739000  \n","50%        -0.009000  \n","75%         0.730000  \n","max         1.000000  "],"text/html":["\n","  <div id=\"df-e8dea555-5294-44c6-8410-554da7bed740\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>j0</th>\n","      <th>j1</th>\n","      <th>j2</th>\n","      <th>cos(j0)</th>\n","      <th>cos(j1)</th>\n","      <th>cos(j2)</th>\n","      <th>sin(j0)</th>\n","      <th>sin(j1)</th>\n","      <th>sin(j2)</th>\n","      <th>ft_x</th>\n","      <th>ft_y</th>\n","      <th>ft_qw</th>\n","      <th>ft_qz</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.018398</td>\n","      <td>-0.020824</td>\n","      <td>-0.018663</td>\n","      <td>-0.256286</td>\n","      <td>0.336175</td>\n","      <td>0.341250</td>\n","      <td>0.011176</td>\n","      <td>-0.012146</td>\n","      <td>-0.012851</td>\n","      <td>-0.038067</td>\n","      <td>0.001524</td>\n","      <td>0.305248</td>\n","      <td>-0.004922</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.183284</td>\n","      <td>1.281477</td>\n","      <td>1.276557</td>\n","      <td>0.731758</td>\n","      <td>0.450860</td>\n","      <td>0.452307</td>\n","      <td>0.631467</td>\n","      <td>0.826790</td>\n","      <td>0.823905</td>\n","      <td>0.155980</td>\n","      <td>0.151845</td>\n","      <td>0.622637</td>\n","      <td>0.720512</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-3.406000</td>\n","      <td>-2.026000</td>\n","      <td>-2.045000</td>\n","      <td>-1.000000</td>\n","      <td>-0.439000</td>\n","      <td>-0.462000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>-0.310000</td>\n","      <td>-0.310000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-2.098000</td>\n","      <td>-1.285000</td>\n","      <td>-1.261000</td>\n","      <td>-0.966000</td>\n","      <td>-0.112000</td>\n","      <td>-0.111000</td>\n","      <td>-0.526000</td>\n","      <td>-0.951000</td>\n","      <td>-0.947000</td>\n","      <td>-0.177000</td>\n","      <td>-0.129000</td>\n","      <td>-0.147000</td>\n","      <td>-0.739000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.070000</td>\n","      <td>-0.028000</td>\n","      <td>-0.038000</td>\n","      <td>-0.512000</td>\n","      <td>0.310000</td>\n","      <td>0.321000</td>\n","      <td>0.003000</td>\n","      <td>-0.028000</td>\n","      <td>-0.038000</td>\n","      <td>-0.052000</td>\n","      <td>0.004000</td>\n","      <td>0.471000</td>\n","      <td>-0.009000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.119000</td>\n","      <td>1.226000</td>\n","      <td>1.225000</td>\n","      <td>0.454250</td>\n","      <td>0.785000</td>\n","      <td>0.794000</td>\n","      <td>0.569000</td>\n","      <td>0.938000</td>\n","      <td>0.939000</td>\n","      <td>0.084000</td>\n","      <td>0.131000</td>\n","      <td>0.872000</td>\n","      <td>0.730000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.381000</td>\n","      <td>2.010000</td>\n","      <td>2.051000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.310000</td>\n","      <td>0.309000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8dea555-5294-44c6-8410-554da7bed740')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e8dea555-5294-44c6-8410-554da7bed740 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e8dea555-5294-44c6-8410-554da7bed740');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-32f52dea-56fa-4cd1-804b-0a11ab7c96de\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32f52dea-56fa-4cd1-804b-0a11ab7c96de')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-32f52dea-56fa-4cd1-804b-0a11ab7c96de button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"j0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.22459675847,\n        \"min\": -3.406,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.018397849999999976,\n          0.07,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.28061481321,\n        \"min\": -2.026,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.02082447,\n          -0.028,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.27898664049,\n        \"min\": -2.045,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.01866252,\n          -0.038,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.36675956166,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.25628581000000006,\n          -0.512,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.22132726367,\n        \"min\": -0.439,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.33617455000000007,\n          0.31,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.22109892846,\n        \"min\": -0.462,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.3412500399999999,\n          0.321,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.30428354872,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.011175950000000002,\n          0.003,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.29999327327,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.01214618,\n          -0.028,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j2)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.300427080874,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.012850880000000002,\n          -0.038,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.34042798458,\n        \"min\": -0.31,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.03806747,\n          -0.052,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.33106101022,\n        \"min\": -0.31,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0015236599999999994,\n          0.004,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.23179266589,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.30524826000000005,\n          0.471,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qz\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.30383281386,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.004921690000000001,\n          -0.009,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":228,"status":"ok","timestamp":1733154514448,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"FtE5HtnwFWpE","outputId":"42b28ae9-ba06-4311-bc74-dd42d04839f2"},"outputs":[{"output_type":"stream","name":"stdout","text":["No missing values in the dataset.\n"]}],"source":["# Check for null values in each column\n","null_values = df.isnull().sum()\n","\n","null_columns = null_values[null_values > 0]\n","\n","if not null_columns.empty:\n","    print(\"Columns with missing values:\")\n","    print(null_columns)\n","else:\n","    print(\"No missing values in the dataset.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":4503,"status":"ok","timestamp":1733163742552,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"iAzca-UOcx6u","outputId":"b7761009-cdc9-4583-f1fc-8daaee612f39"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# compute heatmap\n","df_filtered = df[['j0', 'j1', 'j2', 'ft_x', 'ft_y']]\n","plt.scatter(df_filtered['ft_x'], df_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1733154520520,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"NirXwRVqe53h","outputId":"114fd9c2-e5c1-4cab-8dfc-f4c01a73997f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# compute the heatmap\n","heatmap, xedges, yedges = np.histogram2d(df_filtered['ft_x'], df_filtered['ft_y'], bins=50)\n","\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"YfdIvckKG-s2"},"source":["### Creation of Dataset for Training Validation and Test\n","At the begin what will do is split the dataset in traing validation and test after i will use one file for traing/validation and another for test in order to see how model perform with data (position od finger tips) never seen before\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1733508753854,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"SOkHECCaHGka","outputId":"c933f052-f965-4fed-bb27-6e2bc696c3c9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training set size: 60000\n","Validation set size: 20000\n","Test set size: 20000\n"]}],"source":["# Select few columns\n","df_filtered = df[['j0', 'j1', 'j2', 'ft_x', 'ft_y']]\n","\n","# Define features (X) and target (Y)\n","X = df_filtered[['j0', 'j1', 'j2']]\n","y = df_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"markdown","metadata":{"id":"_OlcYwEEGszD"},"source":["## Model\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"kUx9UifOD3O2","executionInfo":{"status":"ok","timestamp":1733508785427,"user_tz":-60,"elapsed":370,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["def evaluate_model(model, X_test, y_test):\n","    predictions = model.predict(X_test)\n","    rmse = mean_squared_error(y_test, predictions, squared=False)\n","    r2 = r2_score(y_test, predictions)\n","    return rmse, r2"]},{"cell_type":"markdown","metadata":{"id":"goWwFqCVGzBX"},"source":["### 1 Model Linear Regression"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1733397747251,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"yVxBX7_rFjsW","outputId":"8057b83a-fd5f-40c9-ca7a-144b888c2549"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MultiOutputRegressor(estimator=LinearRegression())"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MultiOutputRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.multioutput.MultiOutputRegressor.html\">?<span>Documentation for MultiOutputRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: LinearRegression</label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":7}],"source":["# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":302,"status":"ok","timestamp":1733397747543,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"72QtH4DKMcpm","outputId":"563917b2-efbb-4842-cc9a-9fb5905680c1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.14639400936666813, R2: 0.09122749699854316\n"]}],"source":["# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n"]},{"cell_type":"markdown","metadata":{"id":"c-mW0a2aQ89O"},"source":["The model has low errors on average (small MSE) but does not generalize well (low R2) to explain the variance in the data.\n","This combination indicate that model is underfitting so that mean Linear Regressin is not complex enough to capture these patterns."]},{"cell_type":"markdown","metadata":{"id":"sn2t9M0dSANL"},"source":["### 2 Model Decision Tree Regressor"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":9118,"status":"ok","timestamp":1733397756659,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"786J697rSAdg","outputId":"6928649c-8af5-4ffc-d4d6-ac95b4db5796"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={'max_depth': [10, 20, 25],\n","                         'splitter': ['best', 'random']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [10, 20, 25],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [10, 20, 25],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: DecisionTreeRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":9}],"source":["# test\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [10, 20, 25]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1733397756660,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"Kxhkv9DISAsx","outputId":"293ebeb1-a3ed-4406-fe0d-f8bd9e89c26b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Best Params: {'max_depth': 20, 'splitter': 'best'}\n","Decision Tree RMSE: 0.01333633256630919, R2: 0.9924612888153511\n"]}],"source":["# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree Best Params: {dt_grid.best_params_}\")\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"EDMGvW4BEXyA"},"source":["### 3 Model SVR"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":24481,"status":"ok","timestamp":1733397781136,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"8u0SchgXEj8Y","outputId":"56e076eb-1f51-467b-b51c-4d80121bfb72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={'estimator__C': [0.1, 1, 10],\n","                         'estimator__epsilon': [0.01, 0.1, 1],\n","                         'estimator__kernel': ['linear', 'rbf'],\n","                         'estimator__max_iter': [80]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-3 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-3 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-3 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-3 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-3 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-3 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-3 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-3 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-3 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-3 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-3 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-3 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-3 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-3 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-3 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-3 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-3 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [80]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [80]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=SVR(C=1, epsilon=0.01, max_iter=80))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: SVR</label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=1, epsilon=0.01, max_iter=80)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SVR<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVR.html\">?<span>Documentation for SVR</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=1, epsilon=0.01, max_iter=80)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":11}],"source":["# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [80]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":323,"status":"ok","timestamp":1733397781451,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"j7XUdg5lEwtr","outputId":"ec8977d3-2a20-486e-94eb-b9e546a70e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVR Best Params: {'estimator__C': 1, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 80}\n","SVR RMSE: 0.033500505482040546, R2: 0.9519058586231823\n"]}],"source":["# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"U9XmGyHjE89J"},"source":["### 4 Model Random Forest Regressor\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"BuTBtDBmFDOU","executionInfo":{"status":"ok","timestamp":1733398215615,"user_tz":-60,"elapsed":434171,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"79ccdce9-a962-4a2b-a1cd-935fb0f38463"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={'estimator__max_depth': [10, 15],\n","                         'estimator__n_estimators': [100, 150]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-4 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-4 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-4 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-4 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-4 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-4 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-4 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-4 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-4 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-4 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-4 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-4 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-4 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-4 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-4 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-4 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-4 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [10, 15],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [10, 15],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=RandomForestRegressor(max_depth=15,\n","                                                     n_estimators=150,\n","                                                     random_state=42))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=15, n_estimators=150, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=15, n_estimators=150, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":13}],"source":["# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [10, 15]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6NkLg2mAFHQh","executionInfo":{"status":"ok","timestamp":1733398217056,"user_tz":-60,"elapsed":1445,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"96d39140-e565-416c-f65d-e7f23123e8d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Best Params: {'estimator__max_depth': 15, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.009632575424747932, R2: 0.9960659005103172\n"]}],"source":["#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"eMhN83CfFR-E"},"source":["### 5 Model KNN regressor"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":13008,"status":"ok","timestamp":1733398230060,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"84VsiTOmFQ2J","outputId":"c7a9c5b1-966e-4b64-ea9d-ec178f9d9ca9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={'estimator__n_neighbors': [3, 5, 10],\n","                         'estimator__p': [1, 2],\n","                         'estimator__weights': ['uniform', 'distance']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-5 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-5 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-5 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-5 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-5 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-5 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-5 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-5 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-5 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-5 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-5 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-5 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-5 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-5 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-5 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-5 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-5 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=KNeighborsRegressor(n_neighbors=10,\n","                                                   weights=&#x27;distance&#x27;))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: KNeighborsRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;KNeighborsRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsRegressor.html\">?<span>Documentation for KNeighborsRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":15}],"source":["# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":506,"status":"ok","timestamp":1733398230561,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"l2waOHdeFdVi","outputId":"e82a294e-4570-4922-d695-289c182f428c"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Best Params: {'estimator__n_neighbors': 10, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.005179849369799225, R2: 0.998860128475169\n"]}],"source":["#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"D4vGKG7jY4Uu"},"source":["### 6 Model NN Neural Network\n","This will be the actual model that i will use for train. More in detail\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"1E4AAqhGa06p","executionInfo":{"status":"ok","timestamp":1733508754255,"user_tz":-60,"elapsed":2,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"cNsrP8jmJ2G0","executionInfo":{"status":"ok","timestamp":1733508755185,"user_tz":-60,"elapsed":2,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 3  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)  # No activation for the output layer\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7KGysCDgNqhV"},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001],\n","    'hidden_sizes': [[8, 16, 32, 16, 8], [16, 32, 64, 32, 16], [32, 64, 80, 64, 32]],\n","    'optimizer': ['Adam', 'SGD']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 100\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":209523,"status":"ok","timestamp":1733176656107,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"UBVlTliyOJiS","outputId":"c55cf93c-ca6b-484e-adc2-8b921e2c074a"},"outputs":[{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   3%|▎         | 3/100 [00:00<00:07, 12.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0515, Validation Loss: 0.0425\n","Epoch [2/100], Training Loss: 0.0425, Validation Loss: 0.0356\n","Epoch [3/100], Training Loss: 0.0356, Validation Loss: 0.0299\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   5%|▌         | 5/100 [00:00<00:06, 13.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0299, Validation Loss: 0.0256\n","Epoch [5/100], Training Loss: 0.0255, Validation Loss: 0.0234\n","Epoch [6/100], Training Loss: 0.0233, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   9%|▉         | 9/100 [00:00<00:06, 13.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0238, Validation Loss: 0.0254\n","Epoch [8/100], Training Loss: 0.0254, Validation Loss: 0.0257\n","Epoch [9/100], Training Loss: 0.0256, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0246, Validation Loss: 0.0232\n","Epoch [11/100], Training Loss: 0.0231, Validation Loss: 0.0219\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  13%|█▎        | 13/100 [00:01<00:07, 10.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0219, Validation Loss: 0.0212\n","Epoch [13/100], Training Loss: 0.0211, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0206, Validation Loss: 0.0203\n","Epoch [15/100], Training Loss: 0.0202, Validation Loss: 0.0198\n","Epoch [16/100], Training Loss: 0.0197, Validation Loss: 0.0193\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  19%|█▉        | 19/100 [00:01<00:06, 12.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0192, Validation Loss: 0.0186\n","Epoch [18/100], Training Loss: 0.0185, Validation Loss: 0.0179\n","Epoch [19/100], Training Loss: 0.0178, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  21%|██        | 21/100 [00:01<00:06, 12.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0171, Validation Loss: 0.0164\n","Epoch [21/100], Training Loss: 0.0163, Validation Loss: 0.0158\n","Epoch [22/100], Training Loss: 0.0156, Validation Loss: 0.0153\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  25%|██▌       | 25/100 [00:02<00:06, 11.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0151, Validation Loss: 0.0149\n","Epoch [24/100], Training Loss: 0.0148, Validation Loss: 0.0146\n","Epoch [25/100], Training Loss: 0.0145, Validation Loss: 0.0142\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  27%|██▋       | 27/100 [00:02<00:05, 12.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0141, Validation Loss: 0.0136\n","Epoch [27/100], Training Loss: 0.0135, Validation Loss: 0.0131\n","Epoch [28/100], Training Loss: 0.0129, Validation Loss: 0.0126\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  31%|███       | 31/100 [00:02<00:05, 13.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0124, Validation Loss: 0.0122\n","Epoch [30/100], Training Loss: 0.0120, Validation Loss: 0.0118\n","Epoch [31/100], Training Loss: 0.0116, Validation Loss: 0.0114\n","Epoch [32/100], Training Loss: 0.0112, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  35%|███▌      | 35/100 [00:02<00:04, 15.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0108, Validation Loss: 0.0105\n","Epoch [34/100], Training Loss: 0.0104, Validation Loss: 0.0102\n","Epoch [35/100], Training Loss: 0.0101, Validation Loss: 0.0099\n","Epoch [36/100], Training Loss: 0.0098, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  39%|███▉      | 39/100 [00:03<00:03, 16.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0094, Validation Loss: 0.0091\n","Epoch [38/100], Training Loss: 0.0090, Validation Loss: 0.0087\n","Epoch [39/100], Training Loss: 0.0086, Validation Loss: 0.0084\n","Epoch [40/100], Training Loss: 0.0083, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  43%|████▎     | 43/100 [00:03<00:03, 16.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [42/100], Training Loss: 0.0075, Validation Loss: 0.0072\n","Epoch [43/100], Training Loss: 0.0071, Validation Loss: 0.0067\n","Epoch [44/100], Training Loss: 0.0066, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  47%|████▋     | 47/100 [00:03<00:03, 16.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0062, Validation Loss: 0.0058\n","Epoch [46/100], Training Loss: 0.0057, Validation Loss: 0.0053\n","Epoch [47/100], Training Loss: 0.0052, Validation Loss: 0.0049\n","Epoch [48/100], Training Loss: 0.0048, Validation Loss: 0.0045\n","Epoch [49/100], Training Loss: 0.0045, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  52%|█████▏    | 52/100 [00:03<00:02, 17.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0041, Validation Loss: 0.0037\n","Epoch [51/100], Training Loss: 0.0037, Validation Loss: 0.0034\n","Epoch [52/100], Training Loss: 0.0034, Validation Loss: 0.0031\n","Epoch [53/100], Training Loss: 0.0031, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 56/100 [00:03<00:02, 17.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0029, Validation Loss: 0.0028\n","Epoch [55/100], Training Loss: 0.0027, Validation Loss: 0.0026\n","Epoch [56/100], Training Loss: 0.0026, Validation Loss: 0.0024\n","Epoch [57/100], Training Loss: 0.0024, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  60%|██████    | 60/100 [00:04<00:02, 17.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0023, Validation Loss: 0.0022\n","Epoch [59/100], Training Loss: 0.0021, Validation Loss: 0.0021\n","Epoch [60/100], Training Loss: 0.0020, Validation Loss: 0.0020\n","Epoch [61/100], Training Loss: 0.0020, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 64/100 [00:04<00:02, 17.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [63/100], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [64/100], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [65/100], Training Loss: 0.0018, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  68%|██████▊   | 68/100 [00:04<00:01, 18.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0018, Validation Loss: 0.0019\n","Epoch [67/100], Training Loss: 0.0019, Validation Loss: 0.0020\n","Epoch [68/100], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [69/100], Training Loss: 0.0019, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 72/100 [00:04<00:01, 18.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0017, Validation Loss: 0.0017\n","Epoch [71/100], Training Loss: 0.0016, Validation Loss: 0.0017\n","Epoch [72/100], Training Loss: 0.0017, Validation Loss: 0.0017\n","Epoch [73/100], Training Loss: 0.0017, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  76%|███████▌  | 76/100 [00:05<00:01, 16.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0015, Validation Loss: 0.0016\n","Epoch [75/100], Training Loss: 0.0016, Validation Loss: 0.0016\n","Epoch [76/100], Training Loss: 0.0016, Validation Loss: 0.0015\n","Epoch [77/100], Training Loss: 0.0015, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 80/100 [00:05<00:01, 16.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0015, Validation Loss: 0.0015\n","Epoch [79/100], Training Loss: 0.0015, Validation Loss: 0.0015\n","Epoch [80/100], Training Loss: 0.0014, Validation Loss: 0.0014\n","Epoch [81/100], Training Loss: 0.0014, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0014, Validation Loss: 0.0014\n","Epoch [83/100], Training Loss: 0.0014, Validation Loss: 0.0014\n","Epoch [84/100], Training Loss: 0.0014, Validation Loss: 0.0014\n","Epoch [85/100], Training Loss: 0.0014, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0013, Validation Loss: 0.0014\n","Epoch [87/100], Training Loss: 0.0013, Validation Loss: 0.0014\n","Epoch [88/100], Training Loss: 0.0013, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  91%|█████████ | 91/100 [00:06<00:00, 15.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0013, Validation Loss: 0.0013\n","Epoch [90/100], Training Loss: 0.0013, Validation Loss: 0.0013\n","Epoch [91/100], Training Loss: 0.0013, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  95%|█████████▌| 95/100 [00:06<00:00, 16.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0013, Validation Loss: 0.0013\n","Epoch [93/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [94/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [95/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  99%|█████████▉| 99/100 [00:06<00:00, 16.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [97/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [98/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [99/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 100/100 [00:06<00:00, 15.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   2%|▏         | 2/100 [00:00<00:04, 19.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0428, Validation Loss: 0.0423\n","Epoch [2/100], Training Loss: 0.0423, Validation Loss: 0.0418\n","Epoch [3/100], Training Loss: 0.0418, Validation Loss: 0.0413\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:05, 18.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0413, Validation Loss: 0.0408\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:05, 17.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0408, Validation Loss: 0.0404\n","Epoch [6/100], Training Loss: 0.0403, Validation Loss: 0.0399\n","Epoch [7/100], Training Loss: 0.0399, Validation Loss: 0.0395\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:05, 17.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0394, Validation Loss: 0.0390\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  10%|█         | 10/100 [00:00<00:05, 15.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0390, Validation Loss: 0.0386\n","Epoch [10/100], Training Loss: 0.0386, Validation Loss: 0.0382\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0382, Validation Loss: 0.0378\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  14%|█▍        | 14/100 [00:00<00:05, 15.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0378, Validation Loss: 0.0374\n","Epoch [13/100], Training Loss: 0.0374, Validation Loss: 0.0371\n","Epoch [14/100], Training Loss: 0.0370, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  18%|█▊        | 18/100 [00:01<00:05, 15.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0367, Validation Loss: 0.0363\n","Epoch [16/100], Training Loss: 0.0363, Validation Loss: 0.0360\n","Epoch [17/100], Training Loss: 0.0360, Validation Loss: 0.0357\n","Epoch [18/100], Training Loss: 0.0356, Validation Loss: 0.0353\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 20/100 [00:01<00:05, 15.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0353, Validation Loss: 0.0350\n","Epoch [20/100], Training Loss: 0.0350, Validation Loss: 0.0347\n","Epoch [21/100], Training Loss: 0.0347, Validation Loss: 0.0344\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 24/100 [00:01<00:05, 13.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0344, Validation Loss: 0.0341\n","Epoch [23/100], Training Loss: 0.0341, Validation Loss: 0.0338\n","Epoch [24/100], Training Loss: 0.0338, Validation Loss: 0.0335\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 24/100 [00:01<00:05, 13.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0335, Validation Loss: 0.0333\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  26%|██▌       | 26/100 [00:01<00:07,  9.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0333, Validation Loss: 0.0330\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  26%|██▌       | 26/100 [00:02<00:07,  9.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0330, Validation Loss: 0.0328\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  29%|██▉       | 29/100 [00:02<00:11,  6.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0327, Validation Loss: 0.0325\n","Epoch [29/100], Training Loss: 0.0325, Validation Loss: 0.0323\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 32/100 [00:03<00:08,  8.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0323, Validation Loss: 0.0320\n","Epoch [31/100], Training Loss: 0.0320, Validation Loss: 0.0318\n","Epoch [32/100], Training Loss: 0.0318, Validation Loss: 0.0316\n","Epoch [33/100], Training Loss: 0.0316, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  34%|███▍      | 34/100 [00:03<00:06,  9.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0314, Validation Loss: 0.0312\n","Epoch [35/100], Training Loss: 0.0311, Validation Loss: 0.0310\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 36/100 [00:03<00:06,  9.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0309, Validation Loss: 0.0308\n","Epoch [37/100], Training Loss: 0.0307, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  38%|███▊      | 38/100 [00:03<00:09,  6.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0305, Validation Loss: 0.0304\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 40/100 [00:04<00:09,  6.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0304, Validation Loss: 0.0302\n","Epoch [40/100], Training Loss: 0.0302, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  42%|████▏     | 42/100 [00:04<00:07,  7.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0300, Validation Loss: 0.0298\n","Epoch [42/100], Training Loss: 0.0298, Validation Loss: 0.0297\n","Epoch [43/100], Training Loss: 0.0297, Validation Loss: 0.0295\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  46%|████▌     | 46/100 [00:04<00:05, 10.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0295, Validation Loss: 0.0294\n","Epoch [45/100], Training Loss: 0.0293, Validation Loss: 0.0292\n","Epoch [46/100], Training Loss: 0.0292, Validation Loss: 0.0291\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 48/100 [00:04<00:04, 11.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0290, Validation Loss: 0.0289\n","Epoch [48/100], Training Loss: 0.0289, Validation Loss: 0.0288\n","Epoch [49/100], Training Loss: 0.0287, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  52%|█████▏    | 52/100 [00:05<00:03, 12.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0286, Validation Loss: 0.0285\n","Epoch [51/100], Training Loss: 0.0285, Validation Loss: 0.0284\n","Epoch [52/100], Training Loss: 0.0283, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  54%|█████▍    | 54/100 [00:05<00:03, 13.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0282, Validation Loss: 0.0281\n","Epoch [54/100], Training Loss: 0.0281, Validation Loss: 0.0280\n","Epoch [55/100], Training Loss: 0.0280, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 58/100 [00:05<00:03, 12.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0279, Validation Loss: 0.0278\n","Epoch [57/100], Training Loss: 0.0277, Validation Loss: 0.0276\n","Epoch [58/100], Training Loss: 0.0276, Validation Loss: 0.0275\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 60/100 [00:05<00:03, 13.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0275, Validation Loss: 0.0274\n","Epoch [60/100], Training Loss: 0.0274, Validation Loss: 0.0273\n","Epoch [61/100], Training Loss: 0.0273, Validation Loss: 0.0272\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 64/100 [00:06<00:02, 13.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0272, Validation Loss: 0.0271\n","Epoch [63/100], Training Loss: 0.0271, Validation Loss: 0.0270\n","Epoch [64/100], Training Loss: 0.0270, Validation Loss: 0.0270\n","Epoch [65/100], Training Loss: 0.0269, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  68%|██████▊   | 68/100 [00:06<00:02, 14.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0268, Validation Loss: 0.0268\n","Epoch [67/100], Training Loss: 0.0268, Validation Loss: 0.0267\n","Epoch [68/100], Training Loss: 0.0267, Validation Loss: 0.0266\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  70%|███████   | 70/100 [00:06<00:02, 14.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0266, Validation Loss: 0.0265\n","Epoch [70/100], Training Loss: 0.0265, Validation Loss: 0.0265\n","Epoch [71/100], Training Loss: 0.0264, Validation Loss: 0.0264\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 74/100 [00:06<00:01, 14.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0264, Validation Loss: 0.0263\n","Epoch [73/100], Training Loss: 0.0263, Validation Loss: 0.0262\n","Epoch [74/100], Training Loss: 0.0262, Validation Loss: 0.0262\n","Epoch [75/100], Training Loss: 0.0262, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  78%|███████▊  | 78/100 [00:06<00:01, 15.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0261, Validation Loss: 0.0260\n","Epoch [77/100], Training Loss: 0.0260, Validation Loss: 0.0260\n","Epoch [78/100], Training Loss: 0.0260, Validation Loss: 0.0259\n","Epoch [79/100], Training Loss: 0.0259, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 82/100 [00:07<00:01, 15.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0258, Validation Loss: 0.0258\n","Epoch [81/100], Training Loss: 0.0258, Validation Loss: 0.0257\n","Epoch [82/100], Training Loss: 0.0257, Validation Loss: 0.0257\n","Epoch [83/100], Training Loss: 0.0257, Validation Loss: 0.0256\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  86%|████████▌ | 86/100 [00:07<00:00, 14.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0256, Validation Loss: 0.0256\n","Epoch [85/100], Training Loss: 0.0256, Validation Loss: 0.0255\n","Epoch [86/100], Training Loss: 0.0255, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  88%|████████▊ | 88/100 [00:07<00:00, 14.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0255, Validation Loss: 0.0254\n","Epoch [88/100], Training Loss: 0.0254, Validation Loss: 0.0254\n","Epoch [89/100], Training Loss: 0.0254, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 92/100 [00:07<00:00, 13.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0253, Validation Loss: 0.0253\n","Epoch [91/100], Training Loss: 0.0253, Validation Loss: 0.0253\n","Epoch [92/100], Training Loss: 0.0252, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  96%|█████████▌| 96/100 [00:08<00:00, 14.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0252, Validation Loss: 0.0252\n","Epoch [94/100], Training Loss: 0.0252, Validation Loss: 0.0251\n","Epoch [95/100], Training Loss: 0.0251, Validation Loss: 0.0251\n","Epoch [96/100], Training Loss: 0.0251, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 100/100 [00:08<00:00, 11.90it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0250, Validation Loss: 0.0250\n","Epoch [98/100], Training Loss: 0.0250, Validation Loss: 0.0250\n","Epoch [99/100], Training Loss: 0.0250, Validation Loss: 0.0250\n","Epoch [100/100], Training Loss: 0.0249, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:05, 16.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0440, Validation Loss: 0.0427\n","Epoch [2/100], Training Loss: 0.0427, Validation Loss: 0.0415\n","Epoch [3/100], Training Loss: 0.0415, Validation Loss: 0.0403\n","Epoch [4/100], Training Loss: 0.0403, Validation Loss: 0.0392\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:05, 17.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0392, Validation Loss: 0.0382\n","Epoch [6/100], Training Loss: 0.0382, Validation Loss: 0.0372\n","Epoch [7/100], Training Loss: 0.0372, Validation Loss: 0.0363\n","Epoch [8/100], Training Loss: 0.0363, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 12/100 [00:00<00:04, 18.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0355, Validation Loss: 0.0346\n","Epoch [10/100], Training Loss: 0.0346, Validation Loss: 0.0339\n","Epoch [11/100], Training Loss: 0.0339, Validation Loss: 0.0331\n","Epoch [12/100], Training Loss: 0.0332, Validation Loss: 0.0325\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 16/100 [00:00<00:04, 17.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0325, Validation Loss: 0.0319\n","Epoch [14/100], Training Loss: 0.0319, Validation Loss: 0.0313\n","Epoch [15/100], Training Loss: 0.0313, Validation Loss: 0.0307\n","Epoch [16/100], Training Loss: 0.0307, Validation Loss: 0.0302\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0302, Validation Loss: 0.0297\n","Epoch [18/100], Training Loss: 0.0297, Validation Loss: 0.0292\n","Epoch [19/100], Training Loss: 0.0292, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  22%|██▏       | 22/100 [00:01<00:04, 15.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0288, Validation Loss: 0.0283\n","Epoch [21/100], Training Loss: 0.0283, Validation Loss: 0.0279\n","Epoch [22/100], Training Loss: 0.0279, Validation Loss: 0.0275\n","Epoch [23/100], Training Loss: 0.0275, Validation Loss: 0.0271\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  26%|██▌       | 26/100 [00:01<00:04, 14.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0271, Validation Loss: 0.0267\n","Epoch [25/100], Training Loss: 0.0267, Validation Loss: 0.0263\n","Epoch [26/100], Training Loss: 0.0264, Validation Loss: 0.0260\n","Epoch [27/100], Training Loss: 0.0260, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  30%|███       | 30/100 [00:01<00:04, 14.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0257, Validation Loss: 0.0254\n","Epoch [29/100], Training Loss: 0.0254, Validation Loss: 0.0252\n","Epoch [30/100], Training Loss: 0.0252, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 34/100 [00:02<00:04, 14.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0249, Validation Loss: 0.0247\n","Epoch [32/100], Training Loss: 0.0247, Validation Loss: 0.0245\n","Epoch [33/100], Training Loss: 0.0245, Validation Loss: 0.0243\n","Epoch [34/100], Training Loss: 0.0243, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  38%|███▊      | 38/100 [00:02<00:03, 15.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0241, Validation Loss: 0.0239\n","Epoch [36/100], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [37/100], Training Loss: 0.0238, Validation Loss: 0.0236\n","Epoch [38/100], Training Loss: 0.0236, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  42%|████▏     | 42/100 [00:02<00:03, 16.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0235, Validation Loss: 0.0234\n","Epoch [40/100], Training Loss: 0.0233, Validation Loss: 0.0232\n","Epoch [41/100], Training Loss: 0.0232, Validation Loss: 0.0231\n","Epoch [42/100], Training Loss: 0.0231, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  46%|████▌     | 46/100 [00:02<00:03, 17.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0230, Validation Loss: 0.0229\n","Epoch [44/100], Training Loss: 0.0229, Validation Loss: 0.0229\n","Epoch [45/100], Training Loss: 0.0228, Validation Loss: 0.0228\n","Epoch [46/100], Training Loss: 0.0228, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  50%|█████     | 50/100 [00:03<00:03, 16.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0227, Validation Loss: 0.0226\n","Epoch [48/100], Training Loss: 0.0226, Validation Loss: 0.0226\n","Epoch [49/100], Training Loss: 0.0226, Validation Loss: 0.0225\n","Epoch [50/100], Training Loss: 0.0225, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  54%|█████▍    | 54/100 [00:03<00:02, 16.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0224, Validation Loss: 0.0224\n","Epoch [52/100], Training Loss: 0.0224, Validation Loss: 0.0223\n","Epoch [53/100], Training Loss: 0.0223, Validation Loss: 0.0222\n","Epoch [54/100], Training Loss: 0.0222, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  58%|█████▊    | 58/100 [00:03<00:02, 16.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0222, Validation Loss: 0.0221\n","Epoch [56/100], Training Loss: 0.0221, Validation Loss: 0.0220\n","Epoch [57/100], Training Loss: 0.0220, Validation Loss: 0.0219\n","Epoch [58/100], Training Loss: 0.0219, Validation Loss: 0.0219\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  62%|██████▏   | 62/100 [00:03<00:02, 17.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0218, Validation Loss: 0.0218\n","Epoch [60/100], Training Loss: 0.0217, Validation Loss: 0.0217\n","Epoch [61/100], Training Loss: 0.0217, Validation Loss: 0.0216\n","Epoch [62/100], Training Loss: 0.0216, Validation Loss: 0.0215\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  66%|██████▌   | 66/100 [00:04<00:02, 16.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0215, Validation Loss: 0.0214\n","Epoch [64/100], Training Loss: 0.0214, Validation Loss: 0.0213\n","Epoch [65/100], Training Loss: 0.0213, Validation Loss: 0.0212\n","Epoch [66/100], Training Loss: 0.0212, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 70/100 [00:04<00:01, 16.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0211, Validation Loss: 0.0210\n","Epoch [68/100], Training Loss: 0.0210, Validation Loss: 0.0209\n","Epoch [69/100], Training Loss: 0.0208, Validation Loss: 0.0207\n","Epoch [70/100], Training Loss: 0.0207, Validation Loss: 0.0206\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 74/100 [00:04<00:01, 16.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0206, Validation Loss: 0.0205\n","Epoch [72/100], Training Loss: 0.0205, Validation Loss: 0.0204\n","Epoch [73/100], Training Loss: 0.0204, Validation Loss: 0.0203\n","Epoch [74/100], Training Loss: 0.0203, Validation Loss: 0.0202\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  78%|███████▊  | 78/100 [00:04<00:01, 17.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0201, Validation Loss: 0.0200\n","Epoch [76/100], Training Loss: 0.0200, Validation Loss: 0.0199\n","Epoch [77/100], Training Loss: 0.0199, Validation Loss: 0.0198\n","Epoch [78/100], Training Loss: 0.0198, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 80/100 [00:05<00:01, 15.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0196, Validation Loss: 0.0195\n","Epoch [80/100], Training Loss: 0.0195, Validation Loss: 0.0194\n","Epoch [81/100], Training Loss: 0.0194, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 84/100 [00:05<00:01, 14.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0192, Validation Loss: 0.0191\n","Epoch [83/100], Training Loss: 0.0191, Validation Loss: 0.0189\n","Epoch [84/100], Training Loss: 0.0189, Validation Loss: 0.0188\n","Epoch [85/100], Training Loss: 0.0188, Validation Loss: 0.0186\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0186, Validation Loss: 0.0185\n","Epoch [87/100], Training Loss: 0.0185, Validation Loss: 0.0183\n","Epoch [88/100], Training Loss: 0.0183, Validation Loss: 0.0182\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  90%|█████████ | 90/100 [00:05<00:00, 15.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0181, Validation Loss: 0.0180\n","Epoch [90/100], Training Loss: 0.0180, Validation Loss: 0.0178\n","Epoch [91/100], Training Loss: 0.0178, Validation Loss: 0.0177\n","Epoch [92/100], Training Loss: 0.0177, Validation Loss: 0.0175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  95%|█████████▌| 95/100 [00:05<00:00, 16.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0175, Validation Loss: 0.0173\n","Epoch [94/100], Training Loss: 0.0173, Validation Loss: 0.0171\n","Epoch [95/100], Training Loss: 0.0171, Validation Loss: 0.0169\n","Epoch [96/100], Training Loss: 0.0169, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 100/100 [00:06<00:00, 16.16it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0168, Validation Loss: 0.0166\n","Epoch [98/100], Training Loss: 0.0166, Validation Loss: 0.0164\n","Epoch [99/100], Training Loss: 0.0164, Validation Loss: 0.0162\n","Epoch [100/100], Training Loss: 0.0162, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:05, 17.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.1004, Validation Loss: 0.1003\n","Epoch [2/100], Training Loss: 0.1002, Validation Loss: 0.1001\n","Epoch [3/100], Training Loss: 0.1000, Validation Loss: 0.0999\n","Epoch [4/100], Training Loss: 0.0998, Validation Loss: 0.0997\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 8/100 [00:00<00:05, 17.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0996, Validation Loss: 0.0995\n","Epoch [6/100], Training Loss: 0.0995, Validation Loss: 0.0994\n","Epoch [7/100], Training Loss: 0.0993, Validation Loss: 0.0992\n","Epoch [8/100], Training Loss: 0.0991, Validation Loss: 0.0990\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 12/100 [00:00<00:04, 17.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0989, Validation Loss: 0.0988\n","Epoch [10/100], Training Loss: 0.0987, Validation Loss: 0.0986\n","Epoch [11/100], Training Loss: 0.0985, Validation Loss: 0.0984\n","Epoch [12/100], Training Loss: 0.0984, Validation Loss: 0.0983\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  14%|█▍        | 14/100 [00:00<00:05, 16.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0982, Validation Loss: 0.0981\n","Epoch [14/100], Training Loss: 0.0980, Validation Loss: 0.0979\n","Epoch [15/100], Training Loss: 0.0978, Validation Loss: 0.0977\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0976, Validation Loss: 0.0975\n","Epoch [17/100], Training Loss: 0.0974, Validation Loss: 0.0973\n","Epoch [18/100], Training Loss: 0.0973, Validation Loss: 0.0972\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  22%|██▏       | 22/100 [00:01<00:04, 16.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0971, Validation Loss: 0.0970\n","Epoch [20/100], Training Loss: 0.0969, Validation Loss: 0.0968\n","Epoch [21/100], Training Loss: 0.0967, Validation Loss: 0.0966\n","Epoch [22/100], Training Loss: 0.0965, Validation Loss: 0.0964\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  26%|██▌       | 26/100 [00:01<00:04, 16.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0964, Validation Loss: 0.0963\n","Epoch [24/100], Training Loss: 0.0962, Validation Loss: 0.0961\n","Epoch [25/100], Training Loss: 0.0960, Validation Loss: 0.0959\n","Epoch [26/100], Training Loss: 0.0958, Validation Loss: 0.0957\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  30%|███       | 30/100 [00:01<00:04, 16.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0957, Validation Loss: 0.0956\n","Epoch [28/100], Training Loss: 0.0955, Validation Loss: 0.0954\n","Epoch [29/100], Training Loss: 0.0953, Validation Loss: 0.0952\n","Epoch [30/100], Training Loss: 0.0951, Validation Loss: 0.0950\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  34%|███▍      | 34/100 [00:02<00:03, 16.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0949, Validation Loss: 0.0949\n","Epoch [32/100], Training Loss: 0.0948, Validation Loss: 0.0947\n","Epoch [33/100], Training Loss: 0.0946, Validation Loss: 0.0945\n","Epoch [34/100], Training Loss: 0.0944, Validation Loss: 0.0943\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  38%|███▊      | 38/100 [00:02<00:03, 16.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0943, Validation Loss: 0.0942\n","Epoch [36/100], Training Loss: 0.0941, Validation Loss: 0.0940\n","Epoch [37/100], Training Loss: 0.0939, Validation Loss: 0.0938\n","Epoch [38/100], Training Loss: 0.0937, Validation Loss: 0.0936\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 40/100 [00:02<00:03, 16.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0936, Validation Loss: 0.0935\n","Epoch [40/100], Training Loss: 0.0934, Validation Loss: 0.0933\n","Epoch [41/100], Training Loss: 0.0932, Validation Loss: 0.0931\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 44/100 [00:02<00:03, 15.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0931, Validation Loss: 0.0930\n","Epoch [43/100], Training Loss: 0.0929, Validation Loss: 0.0928\n","Epoch [44/100], Training Loss: 0.0927, Validation Loss: 0.0926\n","Epoch [45/100], Training Loss: 0.0925, Validation Loss: 0.0925\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 48/100 [00:02<00:03, 15.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0924, Validation Loss: 0.0923\n","Epoch [47/100], Training Loss: 0.0922, Validation Loss: 0.0921\n","Epoch [48/100], Training Loss: 0.0920, Validation Loss: 0.0920\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0919, Validation Loss: 0.0918\n","Epoch [50/100], Training Loss: 0.0917, Validation Loss: 0.0916\n","Epoch [51/100], Training Loss: 0.0915, Validation Loss: 0.0915\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  54%|█████▍    | 54/100 [00:03<00:03, 15.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0914, Validation Loss: 0.0913\n","Epoch [53/100], Training Loss: 0.0912, Validation Loss: 0.0911\n","Epoch [54/100], Training Loss: 0.0910, Validation Loss: 0.0910\n","Epoch [55/100], Training Loss: 0.0909, Validation Loss: 0.0908\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 58/100 [00:03<00:02, 15.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0907, Validation Loss: 0.0906\n","Epoch [57/100], Training Loss: 0.0906, Validation Loss: 0.0905\n","Epoch [58/100], Training Loss: 0.0904, Validation Loss: 0.0903\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 60/100 [00:03<00:02, 14.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0902, Validation Loss: 0.0901\n","Epoch [60/100], Training Loss: 0.0901, Validation Loss: 0.0900\n","Epoch [61/100], Training Loss: 0.0899, Validation Loss: 0.0898\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  62%|██████▏   | 62/100 [00:04<00:02, 13.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0897, Validation Loss: 0.0897\n","Epoch [63/100], Training Loss: 0.0896, Validation Loss: 0.0895\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 66/100 [00:04<00:03, 11.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0894, Validation Loss: 0.0893\n","Epoch [65/100], Training Loss: 0.0893, Validation Loss: 0.0892\n","Epoch [66/100], Training Loss: 0.0891, Validation Loss: 0.0890\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0889, Validation Loss: 0.0889\n","Epoch [68/100], Training Loss: 0.0888, Validation Loss: 0.0887\n","Epoch [69/100], Training Loss: 0.0886, Validation Loss: 0.0885\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  72%|███████▏  | 72/100 [00:04<00:02, 12.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0885, Validation Loss: 0.0884\n","Epoch [71/100], Training Loss: 0.0883, Validation Loss: 0.0882\n","Epoch [72/100], Training Loss: 0.0881, Validation Loss: 0.0881\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 74/100 [00:05<00:02, 12.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0880, Validation Loss: 0.0879\n","Epoch [74/100], Training Loss: 0.0878, Validation Loss: 0.0877\n","Epoch [75/100], Training Loss: 0.0877, Validation Loss: 0.0876\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  78%|███████▊  | 78/100 [00:05<00:01, 13.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0875, Validation Loss: 0.0874\n","Epoch [77/100], Training Loss: 0.0874, Validation Loss: 0.0873\n","Epoch [78/100], Training Loss: 0.0872, Validation Loss: 0.0871\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 82/100 [00:05<00:01, 14.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0870, Validation Loss: 0.0870\n","Epoch [80/100], Training Loss: 0.0869, Validation Loss: 0.0868\n","Epoch [81/100], Training Loss: 0.0867, Validation Loss: 0.0867\n","Epoch [82/100], Training Loss: 0.0866, Validation Loss: 0.0865\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 84/100 [00:05<00:01, 12.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0864, Validation Loss: 0.0864\n","Epoch [84/100], Training Loss: 0.0863, Validation Loss: 0.0862\n","Epoch [85/100], Training Loss: 0.0861, Validation Loss: 0.0861\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  88%|████████▊ | 88/100 [00:05<00:00, 13.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0860, Validation Loss: 0.0859\n","Epoch [87/100], Training Loss: 0.0858, Validation Loss: 0.0857\n","Epoch [88/100], Training Loss: 0.0857, Validation Loss: 0.0856\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 92/100 [00:06<00:00, 13.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0855, Validation Loss: 0.0854\n","Epoch [90/100], Training Loss: 0.0854, Validation Loss: 0.0853\n","Epoch [91/100], Training Loss: 0.0852, Validation Loss: 0.0851\n","Epoch [92/100], Training Loss: 0.0851, Validation Loss: 0.0850\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  96%|█████████▌| 96/100 [00:06<00:00, 15.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0849, Validation Loss: 0.0848\n","Epoch [94/100], Training Loss: 0.0848, Validation Loss: 0.0847\n","Epoch [95/100], Training Loss: 0.0846, Validation Loss: 0.0845\n","Epoch [96/100], Training Loss: 0.0845, Validation Loss: 0.0844\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  98%|█████████▊| 98/100 [00:06<00:00, 14.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0843, Validation Loss: 0.0843\n","Epoch [98/100], Training Loss: 0.0842, Validation Loss: 0.0841\n","Epoch [99/100], Training Loss: 0.0840, Validation Loss: 0.0840\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 100/100 [00:06<00:00, 14.65it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0839, Validation Loss: 0.0838\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0541, Validation Loss: 0.0348\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   2%|▏         | 2/100 [00:00<00:17,  5.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0348, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   3%|▎         | 3/100 [00:00<00:15,  6.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0239, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:14,  6.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0246, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   5%|▌         | 5/100 [00:00<00:13,  6.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0253, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 6/100 [00:00<00:14,  6.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0224, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   7%|▋         | 7/100 [00:01<00:13,  6.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0211, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 8/100 [00:01<00:13,  6.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0211, Validation Loss: 0.0212\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   9%|▉         | 9/100 [00:01<00:13,  6.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0212, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 10/100 [00:01<00:13,  6.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0211, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  11%|█         | 11/100 [00:01<00:13,  6.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0207, Validation Loss: 0.0202\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 12/100 [00:01<00:13,  6.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0202, Validation Loss: 0.0197\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  13%|█▎        | 13/100 [00:01<00:13,  6.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0197, Validation Loss: 0.0191\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 14/100 [00:02<00:13,  6.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0191, Validation Loss: 0.0187\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  15%|█▌        | 15/100 [00:02<00:12,  6.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0187, Validation Loss: 0.0182\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 16/100 [00:02<00:12,  6.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0183, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  17%|█▋        | 17/100 [00:02<00:11,  7.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0178, Validation Loss: 0.0173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 18/100 [00:02<00:11,  7.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0173, Validation Loss: 0.0167\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  19%|█▉        | 19/100 [00:02<00:11,  7.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0167, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 20/100 [00:02<00:11,  6.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0161, Validation Loss: 0.0156\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  21%|██        | 21/100 [00:03<00:12,  6.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0156, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  22%|██▏       | 22/100 [00:03<00:12,  6.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0149, Validation Loss: 0.0142\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  23%|██▎       | 23/100 [00:03<00:11,  6.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0142, Validation Loss: 0.0135\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 24/100 [00:03<00:11,  6.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0134, Validation Loss: 0.0127\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  25%|██▌       | 25/100 [00:03<00:10,  6.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0126, Validation Loss: 0.0118\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  26%|██▌       | 26/100 [00:03<00:11,  6.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0117, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  27%|██▋       | 27/100 [00:04<00:11,  6.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0108, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 28/100 [00:04<00:10,  6.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0102, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  29%|██▉       | 29/100 [00:04<00:09,  7.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0093, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 30/100 [00:04<00:09,  7.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0084, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  31%|███       | 31/100 [00:04<00:08,  7.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0077, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 32/100 [00:04<00:08,  8.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0074, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  33%|███▎      | 33/100 [00:04<00:07,  8.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0069, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 34/100 [00:04<00:07,  8.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0063, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 34/100 [00:05<00:07,  8.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0061, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  35%|███▌      | 35/100 [00:05<00:09,  6.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0059, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0054, Validation Loss: 0.0052\n","Epoch [38/100], Training Loss: 0.0051, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 40/100 [00:05<00:07,  7.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0047, Validation Loss: 0.0041\n","Epoch [40/100], Training Loss: 0.0041, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 42/100 [00:06<00:07,  8.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0038, Validation Loss: 0.0035\n","Epoch [42/100], Training Loss: 0.0035, Validation Loss: 0.0034\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 44/100 [00:06<00:06,  8.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0033, Validation Loss: 0.0032\n","Epoch [44/100], Training Loss: 0.0032, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  46%|████▌     | 46/100 [00:06<00:06,  8.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0029, Validation Loss: 0.0028\n","Epoch [46/100], Training Loss: 0.0028, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 48/100 [00:06<00:05,  8.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0026, Validation Loss: 0.0025\n","Epoch [48/100], Training Loss: 0.0024, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  50%|█████     | 50/100 [00:06<00:05,  8.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0023, Validation Loss: 0.0022\n","Epoch [50/100], Training Loss: 0.0022, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 52/100 [00:07<00:06,  7.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0021, Validation Loss: 0.0020\n","Epoch [52/100], Training Loss: 0.0020, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 54/100 [00:07<00:07,  5.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0019, Validation Loss: 0.0018\n","Epoch [54/100], Training Loss: 0.0018, Validation Loss: 0.0018\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 56/100 [00:08<00:08,  5.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0017, Validation Loss: 0.0017\n","Epoch [56/100], Training Loss: 0.0017, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 58/100 [00:08<00:07,  5.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0016, Validation Loss: 0.0016\n","Epoch [58/100], Training Loss: 0.0016, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  59%|█████▉    | 59/100 [00:08<00:07,  5.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0015, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 60/100 [00:08<00:09,  4.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0014, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  61%|██████    | 61/100 [00:09<00:09,  4.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0014, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0013, Validation Loss: 0.0012\n","Epoch [63/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  65%|██████▌   | 65/100 [00:10<00:07,  4.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [65/100], Training Loss: 0.0011, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  67%|██████▋   | 67/100 [00:10<00:06,  5.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0011, Validation Loss: 0.0011\n","Epoch [67/100], Training Loss: 0.0011, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0011, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 70/100 [00:10<00:05,  5.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0010, Validation Loss: 0.0010\n","Epoch [70/100], Training Loss: 0.0010, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 72/100 [00:11<00:04,  6.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0010, Validation Loss: 0.0011\n","Epoch [72/100], Training Loss: 0.0010, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  74%|███████▍  | 74/100 [00:11<00:03,  7.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0011, Validation Loss: 0.0010\n","Epoch [74/100], Training Loss: 0.0010, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 76/100 [00:11<00:02,  8.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0009, Validation Loss: 0.0009\n","Epoch [76/100], Training Loss: 0.0009, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 78/100 [00:11<00:02,  8.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0009, Validation Loss: 0.0008\n","Epoch [78/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 80/100 [00:12<00:02,  8.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0008, Validation Loss: 0.0008\n","Epoch [80/100], Training Loss: 0.0008, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 82/100 [00:12<00:01,  9.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [82/100], Training Loss: 0.0007, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 84/100 [00:12<00:01,  9.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [84/100], Training Loss: 0.0007, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 86/100 [00:12<00:01,  9.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0006, Validation Loss: 0.0007\n","Epoch [86/100], Training Loss: 0.0007, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 88/100 [00:13<00:01,  8.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [88/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  90%|█████████ | 90/100 [00:13<00:01,  8.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [90/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 92/100 [00:13<00:00,  9.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [92/100], Training Loss: 0.0006, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  94%|█████████▍| 94/100 [00:13<00:00,  9.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [94/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 96/100 [00:13<00:00,  8.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [96/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 98/100 [00:14<00:00,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [98/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 100/100 [00:14<00:00,  6.92it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [100/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   2%|▏         | 2/100 [00:00<00:14,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0432, Validation Loss: 0.0428\n","Epoch [2/100], Training Loss: 0.0427, Validation Loss: 0.0423\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:14,  6.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0423, Validation Loss: 0.0419\n","Epoch [4/100], Training Loss: 0.0419, Validation Loss: 0.0415\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:14,  6.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0415, Validation Loss: 0.0411\n","Epoch [6/100], Training Loss: 0.0411, Validation Loss: 0.0407\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 8/100 [00:01<00:13,  7.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0407, Validation Loss: 0.0403\n","Epoch [8/100], Training Loss: 0.0403, Validation Loss: 0.0400\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  10%|█         | 10/100 [00:01<00:13,  6.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0399, Validation Loss: 0.0396\n","Epoch [10/100], Training Loss: 0.0395, Validation Loss: 0.0392\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 12/100 [00:01<00:12,  7.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0392, Validation Loss: 0.0389\n","Epoch [12/100], Training Loss: 0.0388, Validation Loss: 0.0385\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 14/100 [00:01<00:11,  7.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0385, Validation Loss: 0.0382\n","Epoch [14/100], Training Loss: 0.0382, Validation Loss: 0.0379\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 16/100 [00:02<00:10,  7.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0378, Validation Loss: 0.0376\n","Epoch [16/100], Training Loss: 0.0375, Validation Loss: 0.0372\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 18/100 [00:02<00:12,  6.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0372, Validation Loss: 0.0369\n","Epoch [18/100], Training Loss: 0.0369, Validation Loss: 0.0366\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 20/100 [00:02<00:12,  6.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0366, Validation Loss: 0.0363\n","Epoch [20/100], Training Loss: 0.0363, Validation Loss: 0.0361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  22%|██▏       | 22/100 [00:03<00:11,  6.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0360, Validation Loss: 0.0358\n","Epoch [22/100], Training Loss: 0.0357, Validation Loss: 0.0355\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 24/100 [00:03<00:11,  6.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0355, Validation Loss: 0.0352\n","Epoch [24/100], Training Loss: 0.0352, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 26/100 [00:03<00:11,  6.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0349, Validation Loss: 0.0347\n","Epoch [26/100], Training Loss: 0.0347, Validation Loss: 0.0345\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 28/100 [00:04<00:10,  6.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0344, Validation Loss: 0.0342\n","Epoch [28/100], Training Loss: 0.0342, Validation Loss: 0.0340\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 30/100 [00:04<00:10,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0339, Validation Loss: 0.0338\n","Epoch [30/100], Training Loss: 0.0337, Validation Loss: 0.0335\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 32/100 [00:04<00:10,  6.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0335, Validation Loss: 0.0333\n","Epoch [32/100], Training Loss: 0.0333, Validation Loss: 0.0331\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 34/100 [00:04<00:09,  6.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0331, Validation Loss: 0.0329\n","Epoch [34/100], Training Loss: 0.0328, Validation Loss: 0.0327\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 36/100 [00:05<00:09,  6.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0326, Validation Loss: 0.0325\n","Epoch [36/100], Training Loss: 0.0324, Validation Loss: 0.0323\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 38/100 [00:05<00:08,  7.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0322, Validation Loss: 0.0321\n","Epoch [38/100], Training Loss: 0.0320, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 40/100 [00:05<00:08,  7.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0318, Validation Loss: 0.0317\n","Epoch [40/100], Training Loss: 0.0317, Validation Loss: 0.0315\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 42/100 [00:06<00:08,  7.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0315, Validation Loss: 0.0313\n","Epoch [42/100], Training Loss: 0.0313, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 44/100 [00:06<00:07,  7.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0311, Validation Loss: 0.0310\n","Epoch [44/100], Training Loss: 0.0310, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 46/100 [00:06<00:06,  7.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0308, Validation Loss: 0.0307\n","Epoch [46/100], Training Loss: 0.0306, Validation Loss: 0.0305\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 48/100 [00:06<00:06,  8.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0305, Validation Loss: 0.0304\n","Epoch [48/100], Training Loss: 0.0303, Validation Loss: 0.0302\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 50/100 [00:07<00:05,  8.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0302, Validation Loss: 0.0301\n","Epoch [50/100], Training Loss: 0.0300, Validation Loss: 0.0299\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 52/100 [00:07<00:05,  8.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0299, Validation Loss: 0.0298\n","Epoch [52/100], Training Loss: 0.0298, Validation Loss: 0.0296\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 54/100 [00:07<00:05,  8.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0296, Validation Loss: 0.0295\n","Epoch [54/100], Training Loss: 0.0295, Validation Loss: 0.0294\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 56/100 [00:07<00:05,  8.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0294, Validation Loss: 0.0293\n","Epoch [56/100], Training Loss: 0.0292, Validation Loss: 0.0291\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 58/100 [00:07<00:04,  8.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0291, Validation Loss: 0.0290\n","Epoch [58/100], Training Loss: 0.0290, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 60/100 [00:08<00:05,  7.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0289, Validation Loss: 0.0288\n","Epoch [60/100], Training Loss: 0.0287, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 62/100 [00:08<00:04,  8.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0286, Validation Loss: 0.0285\n","Epoch [62/100], Training Loss: 0.0285, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 64/100 [00:08<00:04,  8.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0284, Validation Loss: 0.0283\n","Epoch [64/100], Training Loss: 0.0283, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  66%|██████▌   | 66/100 [00:08<00:03,  8.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0282, Validation Loss: 0.0281\n","Epoch [66/100], Training Loss: 0.0281, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 68/100 [00:09<00:03,  8.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0280, Validation Loss: 0.0279\n","Epoch [68/100], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 70/100 [00:09<00:03,  8.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0278, Validation Loss: 0.0277\n","Epoch [70/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 72/100 [00:09<00:03,  8.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0276, Validation Loss: 0.0276\n","Epoch [72/100], Training Loss: 0.0275, Validation Loss: 0.0275\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 74/100 [00:09<00:02,  8.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0274, Validation Loss: 0.0274\n","Epoch [74/100], Training Loss: 0.0274, Validation Loss: 0.0273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  76%|███████▌  | 76/100 [00:10<00:02,  8.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0273, Validation Loss: 0.0272\n","Epoch [76/100], Training Loss: 0.0272, Validation Loss: 0.0272\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  78%|███████▊  | 78/100 [00:10<00:02,  8.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0271, Validation Loss: 0.0271\n","Epoch [78/100], Training Loss: 0.0270, Validation Loss: 0.0270\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 80/100 [00:10<00:02,  8.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0270, Validation Loss: 0.0269\n","Epoch [80/100], Training Loss: 0.0269, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 82/100 [00:10<00:02,  8.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0268, Validation Loss: 0.0268\n","Epoch [82/100], Training Loss: 0.0268, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  84%|████████▍ | 84/100 [00:10<00:01,  8.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0267, Validation Loss: 0.0266\n","Epoch [84/100], Training Loss: 0.0266, Validation Loss: 0.0266\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 86/100 [00:11<00:01,  8.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0266, Validation Loss: 0.0265\n","Epoch [86/100], Training Loss: 0.0265, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 88/100 [00:11<00:01,  8.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0264, Validation Loss: 0.0264\n","Epoch [88/100], Training Loss: 0.0264, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 90/100 [00:11<00:01,  8.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0263, Validation Loss: 0.0263\n","Epoch [90/100], Training Loss: 0.0262, Validation Loss: 0.0262\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 92/100 [00:11<00:00,  8.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0262, Validation Loss: 0.0262\n","Epoch [92/100], Training Loss: 0.0261, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 94/100 [00:12<00:00,  8.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0261, Validation Loss: 0.0261\n","Epoch [94/100], Training Loss: 0.0260, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  96%|█████████▌| 96/100 [00:12<00:00,  8.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0260, Validation Loss: 0.0260\n","Epoch [96/100], Training Loss: 0.0259, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  98%|█████████▊| 98/100 [00:12<00:00,  8.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0259, Validation Loss: 0.0259\n","Epoch [98/100], Training Loss: 0.0258, Validation Loss: 0.0258\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 100/100 [00:12<00:00,  7.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0258, Validation Loss: 0.0258\n","Epoch [100/100], Training Loss: 0.0257, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   2%|▏         | 2/100 [00:00<00:11,  8.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0249, Validation Loss: 0.0245\n","Epoch [2/100], Training Loss: 0.0245, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:11,  8.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0241, Validation Loss: 0.0239\n","Epoch [4/100], Training Loss: 0.0238, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 6/100 [00:00<00:11,  8.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0236, Validation Loss: 0.0234\n","Epoch [6/100], Training Loss: 0.0233, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:10,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0231, Validation Loss: 0.0230\n","Epoch [8/100], Training Loss: 0.0229, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 10/100 [00:01<00:10,  8.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0228, Validation Loss: 0.0226\n","Epoch [10/100], Training Loss: 0.0226, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 12/100 [00:01<00:10,  8.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0224, Validation Loss: 0.0222\n","Epoch [12/100], Training Loss: 0.0222, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 14/100 [00:01<00:10,  8.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0220, Validation Loss: 0.0218\n","Epoch [14/100], Training Loss: 0.0218, Validation Loss: 0.0216\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 16/100 [00:01<00:09,  8.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0216, Validation Loss: 0.0214\n","Epoch [16/100], Training Loss: 0.0213, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 18/100 [00:02<00:09,  8.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0211, Validation Loss: 0.0209\n","Epoch [18/100], Training Loss: 0.0209, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 20/100 [00:02<00:09,  8.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0206, Validation Loss: 0.0204\n","Epoch [20/100], Training Loss: 0.0204, Validation Loss: 0.0201\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  22%|██▏       | 22/100 [00:02<00:09,  8.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0201, Validation Loss: 0.0199\n","Epoch [22/100], Training Loss: 0.0198, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 24/100 [00:02<00:08,  8.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0195, Validation Loss: 0.0193\n","Epoch [24/100], Training Loss: 0.0192, Validation Loss: 0.0190\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  26%|██▌       | 26/100 [00:03<00:08,  8.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0189, Validation Loss: 0.0187\n","Epoch [26/100], Training Loss: 0.0186, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 28/100 [00:03<00:08,  8.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0183, Validation Loss: 0.0180\n","Epoch [28/100], Training Loss: 0.0180, Validation Loss: 0.0177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 30/100 [00:03<00:08,  7.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0176, Validation Loss: 0.0173\n","Epoch [30/100], Training Loss: 0.0173, Validation Loss: 0.0170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  31%|███       | 31/100 [00:03<00:09,  6.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0169, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 32/100 [00:04<00:14,  4.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0166, Validation Loss: 0.0162\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  33%|███▎      | 33/100 [00:04<00:15,  4.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0162, Validation Loss: 0.0159\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 34/100 [00:04<00:18,  3.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0158, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  35%|███▌      | 35/100 [00:05<00:18,  3.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0155, Validation Loss: 0.0151\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 36/100 [00:05<00:17,  3.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0151, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  37%|███▋      | 37/100 [00:05<00:17,  3.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0147, Validation Loss: 0.0144\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  38%|███▊      | 38/100 [00:05<00:17,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0144, Validation Loss: 0.0140\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  39%|███▉      | 39/100 [00:06<00:16,  3.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0140, Validation Loss: 0.0136\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  41%|████      | 41/100 [00:06<00:14,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0136, Validation Loss: 0.0133\n","Epoch [41/100], Training Loss: 0.0132, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 42/100 [00:06<00:14,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0128, Validation Loss: 0.0125\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  43%|████▎     | 43/100 [00:07<00:16,  3.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0125, Validation Loss: 0.0122\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  45%|████▌     | 45/100 [00:07<00:16,  3.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0121, Validation Loss: 0.0118\n","Epoch [45/100], Training Loss: 0.0117, Validation Loss: 0.0115\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  46%|████▌     | 46/100 [00:08<00:15,  3.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0114, Validation Loss: 0.0111\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  47%|████▋     | 47/100 [00:08<00:14,  3.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0110, Validation Loss: 0.0108\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 48/100 [00:08<00:14,  3.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0107, Validation Loss: 0.0105\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  49%|████▉     | 49/100 [00:08<00:13,  3.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0104, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  50%|█████     | 50/100 [00:09<00:13,  3.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0101, Validation Loss: 0.0098\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  51%|█████     | 51/100 [00:09<00:13,  3.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0098, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 52/100 [00:09<00:13,  3.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0094, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  53%|█████▎    | 53/100 [00:10<00:13,  3.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0091, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 54/100 [00:10<00:12,  3.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0088, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 56/100 [00:10<00:09,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0085, Validation Loss: 0.0083\n","Epoch [56/100], Training Loss: 0.0082, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 58/100 [00:11<00:08,  5.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0079, Validation Loss: 0.0077\n","Epoch [58/100], Training Loss: 0.0076, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 60/100 [00:11<00:06,  6.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [60/100], Training Loss: 0.0070, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  62%|██████▏   | 62/100 [00:11<00:06,  5.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0067, Validation Loss: 0.0065\n","Epoch [62/100], Training Loss: 0.0064, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 64/100 [00:12<00:06,  5.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0061, Validation Loss: 0.0060\n","Epoch [64/100], Training Loss: 0.0059, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  66%|██████▌   | 66/100 [00:12<00:05,  5.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0056, Validation Loss: 0.0055\n","Epoch [66/100], Training Loss: 0.0054, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 68/100 [00:12<00:05,  5.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [68/100], Training Loss: 0.0050, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 70/100 [00:12<00:04,  6.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0048, Validation Loss: 0.0047\n","Epoch [70/100], Training Loss: 0.0046, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 72/100 [00:13<00:03,  7.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0044, Validation Loss: 0.0044\n","Epoch [72/100], Training Loss: 0.0043, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  74%|███████▍  | 74/100 [00:13<00:03,  8.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0041, Validation Loss: 0.0041\n","Epoch [74/100], Training Loss: 0.0040, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 76/100 [00:13<00:02,  8.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0038, Validation Loss: 0.0038\n","Epoch [76/100], Training Loss: 0.0037, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 78/100 [00:13<00:02,  8.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0036, Validation Loss: 0.0035\n","Epoch [78/100], Training Loss: 0.0034, Validation Loss: 0.0034\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 80/100 [00:14<00:02,  8.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0033, Validation Loss: 0.0033\n","Epoch [80/100], Training Loss: 0.0032, Validation Loss: 0.0032\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 82/100 [00:14<00:02,  8.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0031, Validation Loss: 0.0031\n","Epoch [82/100], Training Loss: 0.0030, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 84/100 [00:14<00:01,  8.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0029, Validation Loss: 0.0029\n","Epoch [84/100], Training Loss: 0.0028, Validation Loss: 0.0028\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 86/100 [00:14<00:01,  8.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0027, Validation Loss: 0.0027\n","Epoch [86/100], Training Loss: 0.0026, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 88/100 [00:15<00:01,  7.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0025, Validation Loss: 0.0025\n","Epoch [88/100], Training Loss: 0.0024, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  90%|█████████ | 90/100 [00:15<00:01,  6.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0024, Validation Loss: 0.0023\n","Epoch [90/100], Training Loss: 0.0023, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 92/100 [00:15<00:01,  5.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0022, Validation Loss: 0.0022\n","Epoch [92/100], Training Loss: 0.0022, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  94%|█████████▍| 94/100 [00:16<00:00,  6.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0021, Validation Loss: 0.0021\n","Epoch [94/100], Training Loss: 0.0020, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  95%|█████████▌| 95/100 [00:16<00:00,  5.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0020, Validation Loss: 0.0020\n","Epoch [96/100], Training Loss: 0.0019, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 98/100 [00:16<00:00,  6.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0019, Validation Loss: 0.0018\n","Epoch [98/100], Training Loss: 0.0018, Validation Loss: 0.0018\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 100/100 [00:17<00:00,  5.80it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0018, Validation Loss: 0.0017\n","Epoch [100/100], Training Loss: 0.0017, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   2%|▏         | 2/100 [00:00<00:18,  5.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0700, Validation Loss: 0.0700\n","Epoch [2/100], Training Loss: 0.0699, Validation Loss: 0.0699\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:17,  5.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0698, Validation Loss: 0.0698\n","Epoch [4/100], Training Loss: 0.0697, Validation Loss: 0.0697\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 6/100 [00:01<00:15,  6.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0696, Validation Loss: 0.0696\n","Epoch [6/100], Training Loss: 0.0695, Validation Loss: 0.0694\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 8/100 [00:01<00:15,  5.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0694, Validation Loss: 0.0693\n","Epoch [8/100], Training Loss: 0.0693, Validation Loss: 0.0692\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  10%|█         | 10/100 [00:01<00:14,  6.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0692, Validation Loss: 0.0691\n","Epoch [10/100], Training Loss: 0.0691, Validation Loss: 0.0690\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 12/100 [00:02<00:13,  6.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0689, Validation Loss: 0.0689\n","Epoch [12/100], Training Loss: 0.0688, Validation Loss: 0.0688\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  13%|█▎        | 13/100 [00:02<00:13,  6.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0687, Validation Loss: 0.0687\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 14/100 [00:02<00:17,  5.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0686, Validation Loss: 0.0686\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  15%|█▌        | 15/100 [00:02<00:20,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0685, Validation Loss: 0.0685\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 16/100 [00:03<00:23,  3.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0684, Validation Loss: 0.0684\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 18/100 [00:03<00:20,  3.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0683, Validation Loss: 0.0683\n","Epoch [18/100], Training Loss: 0.0682, Validation Loss: 0.0681\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  19%|█▉        | 19/100 [00:03<00:19,  4.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0681, Validation Loss: 0.0680\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 20/100 [00:04<00:18,  4.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0680, Validation Loss: 0.0679\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0679, Validation Loss: 0.0678\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  22%|██▏       | 22/100 [00:04<00:18,  4.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0678, Validation Loss: 0.0677\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 24/100 [00:04<00:15,  4.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0677, Validation Loss: 0.0676\n","Epoch [24/100], Training Loss: 0.0676, Validation Loss: 0.0675\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 26/100 [00:05<00:13,  5.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0675, Validation Loss: 0.0674\n","Epoch [26/100], Training Loss: 0.0674, Validation Loss: 0.0673\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 28/100 [00:05<00:12,  5.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0672, Validation Loss: 0.0672\n","Epoch [28/100], Training Loss: 0.0671, Validation Loss: 0.0671\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 30/100 [00:05<00:10,  6.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0670, Validation Loss: 0.0670\n","Epoch [30/100], Training Loss: 0.0669, Validation Loss: 0.0669\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 32/100 [00:06<00:09,  7.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0668, Validation Loss: 0.0668\n","Epoch [32/100], Training Loss: 0.0667, Validation Loss: 0.0667\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 34/100 [00:06<00:09,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0666, Validation Loss: 0.0666\n","Epoch [34/100], Training Loss: 0.0665, Validation Loss: 0.0665\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 36/100 [00:06<00:09,  7.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0664, Validation Loss: 0.0664\n","Epoch [36/100], Training Loss: 0.0663, Validation Loss: 0.0663\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 38/100 [00:06<00:08,  7.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0662, Validation Loss: 0.0662\n","Epoch [38/100], Training Loss: 0.0661, Validation Loss: 0.0661\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 40/100 [00:07<00:07,  7.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0660, Validation Loss: 0.0660\n","Epoch [40/100], Training Loss: 0.0659, Validation Loss: 0.0659\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 42/100 [00:07<00:08,  6.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0658, Validation Loss: 0.0658\n","Epoch [42/100], Training Loss: 0.0657, Validation Loss: 0.0657\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 44/100 [00:07<00:08,  6.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0656, Validation Loss: 0.0656\n","Epoch [44/100], Training Loss: 0.0655, Validation Loss: 0.0655\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 46/100 [00:08<00:07,  6.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0654, Validation Loss: 0.0654\n","Epoch [46/100], Training Loss: 0.0653, Validation Loss: 0.0653\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 48/100 [00:08<00:07,  6.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0652, Validation Loss: 0.0652\n","Epoch [48/100], Training Loss: 0.0651, Validation Loss: 0.0651\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 50/100 [00:08<00:07,  6.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0650, Validation Loss: 0.0650\n","Epoch [50/100], Training Loss: 0.0649, Validation Loss: 0.0649\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 52/100 [00:09<00:07,  6.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0648, Validation Loss: 0.0648\n","Epoch [52/100], Training Loss: 0.0647, Validation Loss: 0.0647\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 54/100 [00:09<00:07,  6.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0646, Validation Loss: 0.0646\n","Epoch [54/100], Training Loss: 0.0645, Validation Loss: 0.0645\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  55%|█████▌    | 55/100 [00:09<00:07,  5.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0644, Validation Loss: 0.0644\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  57%|█████▋    | 57/100 [00:10<00:08,  5.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0643, Validation Loss: 0.0643\n","Epoch [57/100], Training Loss: 0.0642, Validation Loss: 0.0642\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 58/100 [00:10<00:08,  4.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0641, Validation Loss: 0.0641\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0640, Validation Loss: 0.0640\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 60/100 [00:10<00:09,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0639, Validation Loss: 0.0639\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 62/100 [00:11<00:07,  4.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0639, Validation Loss: 0.0638\n","Epoch [62/100], Training Loss: 0.0638, Validation Loss: 0.0637\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  63%|██████▎   | 63/100 [00:11<00:08,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0637, Validation Loss: 0.0636\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  65%|██████▌   | 65/100 [00:11<00:07,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0636, Validation Loss: 0.0635\n","Epoch [65/100], Training Loss: 0.0635, Validation Loss: 0.0634\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  67%|██████▋   | 67/100 [00:12<00:06,  5.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0634, Validation Loss: 0.0633\n","Epoch [67/100], Training Loss: 0.0633, Validation Loss: 0.0632\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  69%|██████▉   | 69/100 [00:12<00:05,  5.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0632, Validation Loss: 0.0632\n","Epoch [69/100], Training Loss: 0.0631, Validation Loss: 0.0631\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  71%|███████   | 71/100 [00:12<00:04,  6.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0630, Validation Loss: 0.0630\n","Epoch [71/100], Training Loss: 0.0629, Validation Loss: 0.0629\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  73%|███████▎  | 73/100 [00:13<00:04,  5.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0628, Validation Loss: 0.0628\n","Epoch [73/100], Training Loss: 0.0627, Validation Loss: 0.0627\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  75%|███████▌  | 75/100 [00:13<00:04,  5.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0626, Validation Loss: 0.0626\n","Epoch [75/100], Training Loss: 0.0625, Validation Loss: 0.0625\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  77%|███████▋  | 77/100 [00:13<00:03,  5.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0624, Validation Loss: 0.0624\n","Epoch [77/100], Training Loss: 0.0623, Validation Loss: 0.0623\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  79%|███████▉  | 79/100 [00:14<00:03,  6.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0623, Validation Loss: 0.0622\n","Epoch [79/100], Training Loss: 0.0622, Validation Loss: 0.0621\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  81%|████████  | 81/100 [00:14<00:03,  5.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0621, Validation Loss: 0.0620\n","Epoch [81/100], Training Loss: 0.0620, Validation Loss: 0.0619\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 82/100 [00:14<00:03,  4.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0619, Validation Loss: 0.0619\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  83%|████████▎ | 83/100 [00:15<00:03,  4.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0618, Validation Loss: 0.0618\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  85%|████████▌ | 85/100 [00:15<00:03,  4.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0617, Validation Loss: 0.0617\n","Epoch [85/100], Training Loss: 0.0616, Validation Loss: 0.0616\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  87%|████████▋ | 87/100 [00:15<00:02,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0615, Validation Loss: 0.0615\n","Epoch [87/100], Training Loss: 0.0614, Validation Loss: 0.0614\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  89%|████████▉ | 89/100 [00:16<00:02,  4.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0614, Validation Loss: 0.0613\n","Epoch [89/100], Training Loss: 0.0613, Validation Loss: 0.0612\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  91%|█████████ | 91/100 [00:16<00:01,  5.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0612, Validation Loss: 0.0611\n","Epoch [91/100], Training Loss: 0.0611, Validation Loss: 0.0610\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  93%|█████████▎| 93/100 [00:16<00:01,  6.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0610, Validation Loss: 0.0610\n","Epoch [93/100], Training Loss: 0.0609, Validation Loss: 0.0609\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  95%|█████████▌| 95/100 [00:17<00:00,  7.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0608, Validation Loss: 0.0608\n","Epoch [95/100], Training Loss: 0.0607, Validation Loss: 0.0607\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  97%|█████████▋| 97/100 [00:17<00:00,  6.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0606, Validation Loss: 0.0606\n","Epoch [97/100], Training Loss: 0.0606, Validation Loss: 0.0605\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  99%|█████████▉| 99/100 [00:17<00:00,  6.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0605, Validation Loss: 0.0604\n","Epoch [99/100], Training Loss: 0.0604, Validation Loss: 0.0603\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 100/100 [00:18<00:00,  5.55it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0603, Validation Loss: 0.0603\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   1%|          | 1/100 [00:00<00:28,  3.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0260, Validation Loss: 0.0294\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   2%|▏         | 2/100 [00:00<00:28,  3.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0293, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   3%|▎         | 3/100 [00:00<00:27,  3.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0219, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   4%|▍         | 4/100 [00:01<00:27,  3.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0225, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   5%|▌         | 5/100 [00:01<00:27,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0224, Validation Loss: 0.0212\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   6%|▌         | 6/100 [00:01<00:27,  3.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0212, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   7%|▋         | 7/100 [00:02<00:27,  3.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0193, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   8%|▊         | 8/100 [00:02<00:27,  3.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0174, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   9%|▉         | 9/100 [00:02<00:27,  3.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0163, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  10%|█         | 10/100 [00:03<00:35,  2.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0146, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  11%|█         | 11/100 [00:04<00:45,  1.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0133, Validation Loss: 0.0114\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  12%|█▏        | 12/100 [00:05<00:57,  1.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0113, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  13%|█▎        | 13/100 [00:06<01:14,  1.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0101, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  14%|█▍        | 14/100 [00:07<01:16,  1.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0088, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  15%|█▌        | 15/100 [00:08<01:12,  1.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0069, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  16%|█▌        | 16/100 [00:08<01:05,  1.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0065, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  17%|█▋        | 17/100 [00:09<01:06,  1.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0061, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  18%|█▊        | 18/100 [00:10<01:00,  1.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0063, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  19%|█▉        | 19/100 [00:10<00:59,  1.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0060, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  20%|██        | 20/100 [00:11<00:54,  1.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0048, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  21%|██        | 21/100 [00:11<00:49,  1.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0045, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  22%|██▏       | 22/100 [00:12<00:43,  1.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0044, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  23%|██▎       | 23/100 [00:12<00:37,  2.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0036, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  24%|██▍       | 24/100 [00:12<00:33,  2.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0038, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  25%|██▌       | 25/100 [00:13<00:31,  2.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0033, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  26%|██▌       | 26/100 [00:13<00:28,  2.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0027, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  27%|██▋       | 27/100 [00:14<00:32,  2.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0030, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  28%|██▊       | 28/100 [00:14<00:30,  2.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0023, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  29%|██▉       | 29/100 [00:14<00:25,  2.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0025, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  30%|███       | 30/100 [00:15<00:24,  2.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0022, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  31%|███       | 31/100 [00:15<00:27,  2.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0019, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  32%|███▏      | 32/100 [00:15<00:25,  2.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0020, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  33%|███▎      | 33/100 [00:16<00:23,  2.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0015, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  34%|███▍      | 34/100 [00:16<00:23,  2.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0015, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  35%|███▌      | 35/100 [00:17<00:24,  2.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0014, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  36%|███▌      | 36/100 [00:17<00:24,  2.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0012, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  37%|███▋      | 37/100 [00:17<00:22,  2.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0013, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  38%|███▊      | 38/100 [00:18<00:21,  2.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0009, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  39%|███▉      | 39/100 [00:18<00:21,  2.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0010, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  40%|████      | 40/100 [00:18<00:20,  2.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  41%|████      | 41/100 [00:19<00:19,  3.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  42%|████▏     | 42/100 [00:19<00:18,  3.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  43%|████▎     | 43/100 [00:19<00:19,  2.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  44%|████▍     | 44/100 [00:20<00:20,  2.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0007, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  45%|████▌     | 45/100 [00:20<00:22,  2.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  46%|████▌     | 46/100 [00:21<00:25,  2.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0006, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  47%|████▋     | 47/100 [00:21<00:27,  1.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  48%|████▊     | 48/100 [00:22<00:31,  1.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0005, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  49%|████▉     | 49/100 [00:23<00:28,  1.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0004, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  50%|█████     | 50/100 [00:23<00:27,  1.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0005, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  51%|█████     | 51/100 [00:24<00:28,  1.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 52/100 [00:25<00:29,  1.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  53%|█████▎    | 53/100 [00:25<00:30,  1.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  54%|█████▍    | 54/100 [00:26<00:28,  1.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  55%|█████▌    | 55/100 [00:26<00:25,  1.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  56%|█████▌    | 56/100 [00:27<00:23,  1.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  57%|█████▋    | 57/100 [00:27<00:21,  1.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0004, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  58%|█████▊    | 58/100 [00:28<00:20,  2.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0003, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  59%|█████▉    | 59/100 [00:28<00:20,  1.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0002, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  60%|██████    | 60/100 [00:29<00:19,  2.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  61%|██████    | 61/100 [00:29<00:17,  2.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  62%|██████▏   | 62/100 [00:29<00:18,  2.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0003, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  63%|██████▎   | 63/100 [00:30<00:20,  1.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  64%|██████▍   | 64/100 [00:31<00:18,  1.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  65%|██████▌   | 65/100 [00:31<00:16,  2.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  66%|██████▌   | 66/100 [00:31<00:14,  2.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  67%|██████▋   | 67/100 [00:32<00:12,  2.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  68%|██████▊   | 68/100 [00:32<00:13,  2.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  69%|██████▉   | 69/100 [00:32<00:11,  2.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0002, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  70%|███████   | 70/100 [00:33<00:10,  2.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  71%|███████   | 71/100 [00:33<00:08,  3.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0002, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  72%|███████▏  | 72/100 [00:33<00:08,  3.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  73%|███████▎  | 73/100 [00:33<00:07,  3.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  74%|███████▍  | 74/100 [00:34<00:06,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  75%|███████▌  | 75/100 [00:34<00:06,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  76%|███████▌  | 76/100 [00:34<00:05,  4.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [77/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  78%|███████▊  | 78/100 [00:34<00:05,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  79%|███████▉  | 79/100 [00:35<00:04,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  80%|████████  | 80/100 [00:35<00:04,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  81%|████████  | 81/100 [00:35<00:04,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  82%|████████▏ | 82/100 [00:35<00:04,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  83%|████████▎ | 83/100 [00:36<00:03,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  84%|████████▍ | 84/100 [00:36<00:03,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  85%|████████▌ | 85/100 [00:36<00:03,  4.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  86%|████████▌ | 86/100 [00:36<00:03,  4.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  87%|████████▋ | 87/100 [00:37<00:03,  3.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  88%|████████▊ | 88/100 [00:37<00:03,  3.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  89%|████████▉ | 89/100 [00:37<00:03,  3.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  90%|█████████ | 90/100 [00:38<00:03,  3.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  91%|█████████ | 91/100 [00:38<00:03,  2.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  92%|█████████▏| 92/100 [00:39<00:04,  1.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  93%|█████████▎| 93/100 [00:40<00:04,  1.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0002, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 94/100 [00:40<00:03,  1.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  95%|█████████▌| 95/100 [00:41<00:02,  1.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0003, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  96%|█████████▌| 96/100 [00:41<00:02,  1.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0002, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  97%|█████████▋| 97/100 [00:42<00:01,  1.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  98%|█████████▊| 98/100 [00:42<00:01,  1.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  99%|█████████▉| 99/100 [00:43<00:00,  1.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 100/100 [00:43<00:00,  2.29it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0002, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   1%|          | 1/100 [00:00<00:30,  3.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0302, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   2%|▏         | 2/100 [00:00<00:32,  3.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0300, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   3%|▎         | 3/100 [00:00<00:29,  3.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0298, Validation Loss: 0.0296\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   4%|▍         | 4/100 [00:01<00:29,  3.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0296, Validation Loss: 0.0294\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   5%|▌         | 5/100 [00:01<00:29,  3.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0294, Validation Loss: 0.0292\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   6%|▌         | 6/100 [00:01<00:29,  3.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0292, Validation Loss: 0.0290\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   7%|▋         | 7/100 [00:02<00:27,  3.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0290, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   8%|▊         | 8/100 [00:02<00:24,  3.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0289, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   9%|▉         | 9/100 [00:02<00:23,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0287, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  10%|█         | 10/100 [00:02<00:22,  4.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0285, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  11%|█         | 11/100 [00:03<00:20,  4.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0284, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  12%|█▏        | 12/100 [00:03<00:20,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0282, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:03<00:19,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0281, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  14%|█▍        | 14/100 [00:03<00:19,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  15%|█▌        | 15/100 [00:03<00:18,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0278, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  16%|█▌        | 16/100 [00:04<00:18,  4.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0277, Validation Loss: 0.0275\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  17%|█▋        | 17/100 [00:04<00:18,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0275, Validation Loss: 0.0274\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  18%|█▊        | 18/100 [00:04<00:18,  4.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0274, Validation Loss: 0.0273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  19%|█▉        | 19/100 [00:04<00:18,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0273, Validation Loss: 0.0271\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  20%|██        | 20/100 [00:04<00:17,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0272, Validation Loss: 0.0270\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  21%|██        | 21/100 [00:05<00:17,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0270, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  22%|██▏       | 22/100 [00:05<00:16,  4.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0269, Validation Loss: 0.0268\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  23%|██▎       | 23/100 [00:05<00:17,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0268, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0267, Validation Loss: 0.0266\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  25%|██▌       | 25/100 [00:06<00:16,  4.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0266, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  26%|██▌       | 26/100 [00:06<00:16,  4.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0265, Validation Loss: 0.0264\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  27%|██▋       | 27/100 [00:06<00:15,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0264, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  28%|██▊       | 28/100 [00:06<00:16,  4.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0263, Validation Loss: 0.0262\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  29%|██▉       | 29/100 [00:06<00:16,  4.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0262, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  30%|███       | 30/100 [00:07<00:15,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0261, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  31%|███       | 31/100 [00:07<00:15,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0260, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  32%|███▏      | 32/100 [00:07<00:15,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0260, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  33%|███▎      | 33/100 [00:07<00:15,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0259, Validation Loss: 0.0258\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  34%|███▍      | 34/100 [00:08<00:14,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0258, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  35%|███▌      | 35/100 [00:08<00:14,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0257, Validation Loss: 0.0256\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  36%|███▌      | 36/100 [00:08<00:14,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0256, Validation Loss: 0.0256\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  37%|███▋      | 37/100 [00:08<00:14,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0256, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 38/100 [00:09<00:13,  4.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0255, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  39%|███▉      | 39/100 [00:09<00:13,  4.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0254, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  40%|████      | 40/100 [00:09<00:13,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0254, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  41%|████      | 41/100 [00:09<00:13,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0253, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  42%|████▏     | 42/100 [00:09<00:13,  4.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0252, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  43%|████▎     | 43/100 [00:10<00:14,  3.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0252, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 44/100 [00:10<00:15,  3.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0251, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  45%|████▌     | 45/100 [00:10<00:15,  3.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0251, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  46%|████▌     | 46/100 [00:11<00:15,  3.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0250, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  47%|████▋     | 47/100 [00:11<00:14,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0249, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  48%|████▊     | 48/100 [00:11<00:15,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0249, Validation Loss: 0.0248\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  49%|████▉     | 49/100 [00:12<00:14,  3.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0248, Validation Loss: 0.0248\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  50%|█████     | 50/100 [00:12<00:14,  3.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0248, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  51%|█████     | 51/100 [00:12<00:13,  3.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0247, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  52%|█████▏    | 52/100 [00:12<00:14,  3.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0247, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  53%|█████▎    | 53/100 [00:13<00:13,  3.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0246, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  54%|█████▍    | 54/100 [00:13<00:13,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0246, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  55%|█████▌    | 55/100 [00:13<00:13,  3.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0246, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  56%|█████▌    | 56/100 [00:14<00:13,  3.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0245, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  57%|█████▋    | 57/100 [00:14<00:12,  3.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0245, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  58%|█████▊    | 58/100 [00:14<00:12,  3.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0244, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  59%|█████▉    | 59/100 [00:14<00:11,  3.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0244, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  60%|██████    | 60/100 [00:15<00:11,  3.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0244, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  61%|██████    | 61/100 [00:15<00:11,  3.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0243, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  62%|██████▏   | 62/100 [00:15<00:10,  3.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0243, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  63%|██████▎   | 63/100 [00:16<00:10,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0242, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  64%|██████▍   | 64/100 [00:16<00:10,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0242, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  65%|██████▌   | 65/100 [00:16<00:09,  3.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0242, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  66%|██████▌   | 66/100 [00:16<00:08,  3.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0242, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  67%|██████▋   | 67/100 [00:17<00:08,  4.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0241, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  68%|██████▊   | 68/100 [00:17<00:07,  4.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0241, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  69%|██████▉   | 69/100 [00:17<00:07,  4.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0241, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  70%|███████   | 70/100 [00:17<00:06,  4.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0240, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  71%|███████   | 71/100 [00:17<00:06,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0240, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  72%|███████▏  | 72/100 [00:18<00:06,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0240, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  73%|███████▎  | 73/100 [00:18<00:05,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0240, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  74%|███████▍  | 74/100 [00:18<00:05,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0239, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  75%|███████▌  | 75/100 [00:18<00:05,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0239, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  76%|███████▌  | 76/100 [00:19<00:05,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0239, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  77%|███████▋  | 77/100 [00:19<00:05,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0239, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  78%|███████▊  | 78/100 [00:19<00:04,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0238, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  79%|███████▉  | 79/100 [00:19<00:04,  4.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0238, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  80%|████████  | 80/100 [00:19<00:04,  4.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0238, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  81%|████████  | 81/100 [00:20<00:04,  4.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0238, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  82%|████████▏ | 82/100 [00:20<00:03,  4.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  83%|████████▎ | 83/100 [00:20<00:03,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  84%|████████▍ | 84/100 [00:20<00:03,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  85%|████████▌ | 85/100 [00:21<00:03,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 86/100 [00:21<00:03,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  87%|████████▋ | 87/100 [00:21<00:02,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  89%|████████▉ | 89/100 [00:21<00:02,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  90%|█████████ | 90/100 [00:22<00:02,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  91%|█████████ | 91/100 [00:22<00:01,  4.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  92%|█████████▏| 92/100 [00:22<00:01,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  93%|█████████▎| 93/100 [00:22<00:01,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  94%|█████████▍| 94/100 [00:23<00:01,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  95%|█████████▌| 95/100 [00:23<00:01,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  96%|█████████▌| 96/100 [00:23<00:00,  4.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  97%|█████████▋| 97/100 [00:23<00:00,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  98%|█████████▊| 98/100 [00:23<00:00,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  99%|█████████▉| 99/100 [00:24<00:00,  4.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 100/100 [00:24<00:00,  4.10it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0235, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   1%|          | 1/100 [00:00<00:24,  4.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0321, Validation Loss: 0.0305\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   2%|▏         | 2/100 [00:00<00:22,  4.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0304, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   3%|▎         | 3/100 [00:00<00:21,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0288, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:21,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0275, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   5%|▌         | 5/100 [00:01<00:20,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0262, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   6%|▌         | 6/100 [00:01<00:21,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0252, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   7%|▋         | 7/100 [00:01<00:20,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0243, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   8%|▊         | 8/100 [00:01<00:20,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0235, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   9%|▉         | 9/100 [00:02<00:19,  4.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0228, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  10%|█         | 10/100 [00:02<00:20,  4.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0221, Validation Loss: 0.0216\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  11%|█         | 11/100 [00:02<00:22,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0215, Validation Loss: 0.0210\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  12%|█▏        | 12/100 [00:02<00:23,  3.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0210, Validation Loss: 0.0205\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  13%|█▎        | 13/100 [00:03<00:23,  3.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0205, Validation Loss: 0.0200\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  14%|█▍        | 14/100 [00:03<00:23,  3.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0200, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  15%|█▌        | 15/100 [00:03<00:23,  3.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0196, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  16%|█▌        | 16/100 [00:04<00:23,  3.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0192, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  17%|█▋        | 17/100 [00:04<00:23,  3.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0188, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  18%|█▊        | 18/100 [00:04<00:23,  3.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0183, Validation Loss: 0.0179\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  19%|█▉        | 19/100 [00:04<00:23,  3.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0179, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  20%|██        | 20/100 [00:05<00:23,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0174, Validation Loss: 0.0169\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  21%|██        | 21/100 [00:05<00:22,  3.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0169, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  22%|██▏       | 22/100 [00:05<00:22,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0163, Validation Loss: 0.0157\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  23%|██▎       | 23/100 [00:06<00:22,  3.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0157, Validation Loss: 0.0151\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  24%|██▍       | 24/100 [00:06<00:21,  3.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0151, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  25%|██▌       | 25/100 [00:06<00:22,  3.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0145, Validation Loss: 0.0139\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  26%|██▌       | 26/100 [00:06<00:21,  3.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0138, Validation Loss: 0.0132\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  27%|██▋       | 27/100 [00:07<00:21,  3.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0132, Validation Loss: 0.0126\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  28%|██▊       | 28/100 [00:07<00:21,  3.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0126, Validation Loss: 0.0120\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  29%|██▉       | 29/100 [00:07<00:20,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0119, Validation Loss: 0.0114\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  30%|███       | 30/100 [00:08<00:20,  3.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0114, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  31%|███       | 31/100 [00:08<00:19,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0108, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  32%|███▏      | 32/100 [00:08<00:19,  3.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0103, Validation Loss: 0.0099\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  33%|███▎      | 33/100 [00:08<00:19,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0099, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  34%|███▍      | 34/100 [00:09<00:18,  3.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0094, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  35%|███▌      | 35/100 [00:09<00:17,  3.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0089, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  36%|███▌      | 36/100 [00:09<00:16,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0084, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  37%|███▋      | 37/100 [00:09<00:15,  4.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0080, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  38%|███▊      | 38/100 [00:10<00:14,  4.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0075, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  39%|███▉      | 39/100 [00:10<00:14,  4.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0071, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  40%|████      | 40/100 [00:10<00:14,  4.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0066, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  41%|████      | 41/100 [00:10<00:13,  4.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0061, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  42%|████▏     | 42/100 [00:11<00:13,  4.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0057, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  43%|████▎     | 43/100 [00:11<00:13,  4.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0053, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  44%|████▍     | 44/100 [00:11<00:12,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0049, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  45%|████▌     | 45/100 [00:11<00:12,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0045, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  46%|████▌     | 46/100 [00:11<00:12,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0042, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  47%|████▋     | 47/100 [00:12<00:12,  4.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0039, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  48%|████▊     | 48/100 [00:12<00:11,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0036, Validation Loss: 0.0034\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  49%|████▉     | 49/100 [00:12<00:11,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0033, Validation Loss: 0.0032\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  50%|█████     | 50/100 [00:12<00:11,  4.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0031, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  51%|█████     | 51/100 [00:13<00:11,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0029, Validation Loss: 0.0028\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 52/100 [00:13<00:11,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0027, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  53%|█████▎    | 53/100 [00:13<00:10,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0026, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  54%|█████▍    | 54/100 [00:13<00:10,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0024, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  55%|█████▌    | 55/100 [00:14<00:10,  4.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0023, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  56%|█████▌    | 56/100 [00:14<00:10,  4.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0021, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  57%|█████▋    | 57/100 [00:14<00:10,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0020, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  58%|█████▊    | 58/100 [00:14<00:09,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0018, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  59%|█████▉    | 59/100 [00:14<00:09,  4.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0017, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  60%|██████    | 60/100 [00:15<00:09,  4.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0016, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  61%|██████    | 61/100 [00:15<00:09,  4.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0014, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  62%|██████▏   | 62/100 [00:15<00:09,  4.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0013, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  63%|██████▎   | 63/100 [00:15<00:08,  4.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  64%|██████▍   | 64/100 [00:16<00:08,  4.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0012, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  65%|██████▌   | 65/100 [00:16<00:08,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0011, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  66%|██████▌   | 66/100 [00:16<00:08,  4.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0010, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  67%|██████▋   | 67/100 [00:16<00:07,  4.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0010, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  68%|██████▊   | 68/100 [00:17<00:07,  4.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0009, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  69%|██████▉   | 69/100 [00:17<00:07,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0009, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  70%|███████   | 70/100 [00:17<00:07,  4.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  71%|███████   | 71/100 [00:17<00:06,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  72%|███████▏  | 72/100 [00:18<00:06,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0008, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  73%|███████▎  | 73/100 [00:18<00:06,  4.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  74%|███████▍  | 74/100 [00:18<00:06,  4.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  75%|███████▌  | 75/100 [00:18<00:05,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  76%|███████▌  | 76/100 [00:18<00:05,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  77%|███████▋  | 77/100 [00:19<00:05,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  78%|███████▊  | 78/100 [00:19<00:05,  3.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  79%|███████▉  | 79/100 [00:19<00:05,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0006, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  80%|████████  | 80/100 [00:20<00:05,  3.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  81%|████████  | 81/100 [00:20<00:05,  3.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  82%|████████▏ | 82/100 [00:20<00:05,  3.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  83%|████████▎ | 83/100 [00:20<00:04,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  84%|████████▍ | 84/100 [00:21<00:04,  3.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  85%|████████▌ | 85/100 [00:21<00:04,  3.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  86%|████████▌ | 86/100 [00:21<00:04,  3.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  87%|████████▋ | 87/100 [00:22<00:03,  3.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  88%|████████▊ | 88/100 [00:22<00:03,  3.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  89%|████████▉ | 89/100 [00:22<00:03,  3.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  90%|█████████ | 90/100 [00:23<00:02,  3.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  91%|█████████ | 91/100 [00:23<00:02,  3.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  92%|█████████▏| 92/100 [00:23<00:02,  3.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  93%|█████████▎| 93/100 [00:24<00:02,  3.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 94/100 [00:24<00:01,  3.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  95%|█████████▌| 95/100 [00:24<00:01,  3.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  96%|█████████▌| 96/100 [00:24<00:01,  3.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  97%|█████████▋| 97/100 [00:25<00:00,  3.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  98%|█████████▊| 98/100 [00:25<00:00,  3.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  99%|█████████▉| 99/100 [00:25<00:00,  3.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 100/100 [00:26<00:00,  3.84it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   1%|          | 1/100 [00:00<00:23,  4.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0289, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   2%|▏         | 2/100 [00:00<00:21,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0289, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   3%|▎         | 3/100 [00:00<00:21,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0289, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:21,  4.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0289, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   5%|▌         | 5/100 [00:01<00:21,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0289, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   6%|▌         | 6/100 [00:01<00:21,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0289, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   7%|▋         | 7/100 [00:01<00:20,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0289, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   8%|▊         | 8/100 [00:01<00:20,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0288, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   9%|▉         | 9/100 [00:02<00:20,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0288, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  10%|█         | 10/100 [00:02<00:21,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0288, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  11%|█         | 11/100 [00:02<00:20,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0288, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  12%|█▏        | 12/100 [00:02<00:20,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0288, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:02<00:19,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0288, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  14%|█▍        | 14/100 [00:03<00:19,  4.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0288, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  15%|█▌        | 15/100 [00:03<00:19,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0287, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  16%|█▌        | 16/100 [00:03<00:18,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0287, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  17%|█▋        | 17/100 [00:03<00:18,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0287, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  18%|█▊        | 18/100 [00:04<00:18,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0287, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  19%|█▉        | 19/100 [00:04<00:18,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0287, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  20%|██        | 20/100 [00:04<00:17,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0287, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  21%|██        | 21/100 [00:04<00:17,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0287, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  22%|██▏       | 22/100 [00:04<00:17,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0286, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  23%|██▎       | 23/100 [00:05<00:17,  4.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0286, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  24%|██▍       | 24/100 [00:05<00:17,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0286, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  25%|██▌       | 25/100 [00:05<00:16,  4.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0286, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  26%|██▌       | 26/100 [00:05<00:16,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0286, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  27%|██▋       | 27/100 [00:06<00:16,  4.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0286, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  28%|██▊       | 28/100 [00:06<00:16,  4.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0286, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  29%|██▉       | 29/100 [00:06<00:16,  4.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0285, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  30%|███       | 30/100 [00:06<00:15,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0285, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  31%|███       | 31/100 [00:06<00:15,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0285, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  32%|███▏      | 32/100 [00:07<00:15,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0285, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  33%|███▎      | 33/100 [00:07<00:14,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0285, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  34%|███▍      | 34/100 [00:07<00:14,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0285, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  35%|███▌      | 35/100 [00:07<00:14,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0285, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  36%|███▌      | 36/100 [00:08<00:14,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0284, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  37%|███▋      | 37/100 [00:08<00:14,  4.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0284, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 38/100 [00:08<00:14,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0284, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  39%|███▉      | 39/100 [00:08<00:13,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0284, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  40%|████      | 40/100 [00:09<00:13,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0284, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  41%|████      | 41/100 [00:09<00:13,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0284, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  42%|████▏     | 42/100 [00:09<00:13,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0284, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  43%|████▎     | 43/100 [00:09<00:13,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0284, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 44/100 [00:09<00:12,  4.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0283, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  45%|████▌     | 45/100 [00:10<00:13,  4.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0283, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  46%|████▌     | 46/100 [00:10<00:14,  3.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0283, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  47%|████▋     | 47/100 [00:10<00:14,  3.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0283, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  48%|████▊     | 48/100 [00:11<00:14,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0283, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  49%|████▉     | 49/100 [00:11<00:14,  3.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0283, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  50%|█████     | 50/100 [00:11<00:14,  3.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0283, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  51%|█████     | 51/100 [00:11<00:14,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0283, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  52%|█████▏    | 52/100 [00:12<00:14,  3.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0282, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  53%|█████▎    | 53/100 [00:12<00:14,  3.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0282, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  54%|█████▍    | 54/100 [00:12<00:13,  3.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0282, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  55%|█████▌    | 55/100 [00:13<00:13,  3.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0282, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  56%|█████▌    | 56/100 [00:13<00:12,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0282, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  57%|█████▋    | 57/100 [00:13<00:12,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0282, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  58%|█████▊    | 58/100 [00:14<00:12,  3.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0282, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  59%|█████▉    | 59/100 [00:14<00:12,  3.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  60%|██████    | 60/100 [00:14<00:11,  3.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  61%|██████    | 61/100 [00:14<00:11,  3.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  62%|██████▏   | 62/100 [00:15<00:11,  3.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  63%|██████▎   | 63/100 [00:15<00:10,  3.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  64%|██████▍   | 64/100 [00:15<00:10,  3.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0281, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  65%|██████▌   | 65/100 [00:16<00:10,  3.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0281, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  66%|██████▌   | 66/100 [00:16<00:09,  3.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0281, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  67%|██████▋   | 67/100 [00:16<00:09,  3.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  68%|██████▊   | 68/100 [00:16<00:09,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  69%|██████▉   | 69/100 [00:17<00:09,  3.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  70%|███████   | 70/100 [00:17<00:08,  3.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  71%|███████   | 71/100 [00:17<00:07,  3.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [71/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  72%|███████▏  | 72/100 [00:17<00:06,  4.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0280, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  73%|███████▎  | 73/100 [00:18<00:06,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0280, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  74%|███████▍  | 74/100 [00:18<00:06,  4.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0280, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  75%|███████▌  | 75/100 [00:18<00:05,  4.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0280, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  76%|███████▌  | 76/100 [00:18<00:05,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0279, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  77%|███████▋  | 77/100 [00:19<00:05,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0279, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  78%|███████▊  | 78/100 [00:19<00:05,  4.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0279, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  79%|███████▉  | 79/100 [00:19<00:04,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0279, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  80%|████████  | 80/100 [00:19<00:04,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0279, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  81%|████████  | 81/100 [00:19<00:04,  4.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  82%|████████▏ | 82/100 [00:20<00:04,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  83%|████████▎ | 83/100 [00:20<00:03,  4.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  84%|████████▍ | 84/100 [00:20<00:03,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [84/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  85%|████████▌ | 85/100 [00:20<00:03,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 86/100 [00:21<00:03,  4.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  87%|████████▋ | 87/100 [00:21<00:03,  4.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  88%|████████▊ | 88/100 [00:21<00:02,  4.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  89%|████████▉ | 89/100 [00:21<00:02,  4.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0278, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  90%|█████████ | 90/100 [00:21<00:02,  4.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0278, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  91%|█████████ | 91/100 [00:22<00:02,  4.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0278, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  92%|█████████▏| 92/100 [00:22<00:01,  4.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0278, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  93%|█████████▎| 93/100 [00:22<00:01,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  94%|█████████▍| 94/100 [00:22<00:01,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  95%|█████████▌| 95/100 [00:23<00:01,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  96%|█████████▌| 96/100 [00:23<00:00,  4.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  97%|█████████▋| 97/100 [00:23<00:00,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  98%|█████████▊| 98/100 [00:23<00:00,  4.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0277, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  99%|█████████▉| 99/100 [00:23<00:00,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0277, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 100/100 [00:24<00:00,  4.13it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0277, Validation Loss: 0.0276\n","Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [32, 64, 80, 64, 32]\n","Optimizer: Adam\n","Best Validation Loss: 4.604269997798838e-05\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"model_state_dict_r3_GRIDSEARCH.pt\"))\n","\n","# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":373,"status":"ok","timestamp":1733176656477,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9hhXRqalRSs5","outputId":"c25ba393-e806-4851-c8b6-bc298c162eef"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot Training and Validation Loss for the Best Model\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1585,"status":"ok","timestamp":1733508761438,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"F9YBdi4wRZd_","outputId":"d5df1731-2d24-4492-ffae-12259ef84d0b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.017380637884032414\n","Test R^2 Score: 0.987079381942749\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/model_state_dict_r3_GRIDSEARCH\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"lZ5hgHt5nOEN"},"source":["## Comparison Jacobian\n","calculation of the Jacobian matrix and comparison of learned J with analytical J"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"qh0061Obnt0A","executionInfo":{"status":"ok","timestamp":1733398230561,"user_tz":-60,"elapsed":17,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["def FK(model, theta):\n","    t = theta.view(1, 3)\n","    out = model(t)\n","    out = out.view(-1)\n","    return out"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"QmyCdmJknRJq","executionInfo":{"status":"ok","timestamp":1733398230562,"user_tz":-60,"elapsed":16,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(t):\n","        return FK(model, t)\n","\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, theta)\n","    return jacobian"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"xohPzmdf4DSQ","executionInfo":{"status":"ok","timestamp":1733398230564,"user_tz":-60,"elapsed":17,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"jejLWOeY3am_","executionInfo":{"status":"ok","timestamp":1733398230564,"user_tz":-60,"elapsed":16,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Analytical Jacobian\n","def analytical_jacobian(joint_angles, L1, L2, L3):\n","    j0, j1, j2 = joint_angles\n","    j0, j1, j2 = j0.item(), j1.item(), j2.item()\n","\n","    theta1 = j0\n","    theta2 = j0 + j1\n","    theta3 = j0 + j1 + j2\n","\n","    dx_dj0 = -L1 * np.sin(theta1) - L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj0 = L1 * np.cos(theta1) + L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj1 = -L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj1 = L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj2 = -L3 * np.sin(theta3)\n","    dy_dj2 = L3 * np.cos(theta3)\n","\n","    J_analytical = np.array([\n","        [dx_dj0, dx_dj1, dx_dj2],\n","        [dy_dj0, dy_dj1, dy_dj2]\n","    ])\n","    return J_analytical\n"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1144,"status":"ok","timestamp":1733398260067,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"n4hhY2lry2TV","outputId":"ba0435c4-6be9-437f-82e6-ff7ffeeeae03"},"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[0.001 -0.002 -0.001]\n"," [0.026 -0.024 -0.005]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.211 0.208 0.109]\n"," [-0.074 -0.024 -0.005]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000 0.000]\n"," [0.000 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.210 0.210 0.110]\n"," [-0.100 0.000 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.168 -0.145 -0.084]\n"," [0.122 0.038 0.012]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.042 0.065 0.026]\n"," [0.022 0.038 0.012]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.420 -1.368 -0.157]\n"," [0.000 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.210 -1.158 -0.047]\n"," [-0.100 0.000 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.057 -0.056 -0.084]\n"," [0.033 0.003 0.008]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.153 0.154 0.026]\n"," [-0.067 0.003 0.008]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.295 -0.190 -0.110]\n"," [0.209 0.062 0.024]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.085 0.020 0.000]\n"," [0.109 0.062 0.024]]\n","------------------------------------------------------------------------------------------\n"]}],"source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/model_state_dict_r3_GRIDSEARCH\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2), 0], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"sgKnV33BGgqr"},"source":["### Check with metrics"]},{"cell_type":"markdown","metadata":{"id":"eMwcUHIcC2YM"},"source":["what I have done in this case is take all possible value of angles of joint in order and for each of them i compute the Jacobian by using the trained model and by analytic method in order and after that I used"]},{"cell_type":"code","source":["joint_angles = torch.tensor(X_test[['j0', 'j1', 'j2']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)\n"],"metadata":{"id":"W_vVwbY5myrx","executionInfo":{"status":"ok","timestamp":1733398580983,"user_tz":-60,"elapsed":253,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"SIKcygmlHAht","executionInfo":{"status":"ok","timestamp":1733398582474,"user_tz":-60,"elapsed":865,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"5055bcf8-f08c-489e-d64d-dc0da4aa0fad"},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"lL2wkdR1kBst","executionInfo":{"status":"ok","timestamp":1733398585488,"user_tz":-60,"elapsed":918,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"0176d2b9-3add-4e01-fef8-3862b5f25114"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"GO1ZMfOiHFu5","executionInfo":{"status":"ok","timestamp":1733399468368,"user_tz":-60,"elapsed":1781,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"f1b109ba-d6cc-4b71-f325-5fff47a67677"},"execution_count":59,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"rpEB5Y0wmhFW","executionInfo":{"status":"ok","timestamp":1733398593172,"user_tz":-60,"elapsed":1143,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"33c07f63-7a99-484d-b8dd-add6c73468b6"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"exw8a2BNI-rE"},"source":["## Check of Inverse Kinematics\n","Compute the Inverse Kinematics using two algorithms Levenberg-Marquadt and Newton-Raphson.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zm5GsPraR638"},"outputs":[],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/model_state_dict_r3_GRIDSEARCH\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PvbH7hc2RZ2w"},"outputs":[],"source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DNsh_CNLSIR_"},"outputs":[],"source":["def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u4tyLY2sSWzX"},"outputs":[],"source":["def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":492,"status":"ok","timestamp":1733177246955,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"msQ8KOKbSBkz","outputId":"d17d6c80-94d4-406a-b7d6-2167c5fade3a"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0.1530, 0.1300])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.07427210360765457\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.3890,  1.3168,  0.7139])\n","Levenberg-Marquardt Error: 9.146420779870823e-05\n"," \n","--------------------------------------\n","Comparison target: tensor([0.1530, 0.1300]) Value computed by Newton-Raphson Method:  tensor([0.2214, 0.1590])\n","Comparison target: tensor([0.1530, 0.1300]) Value computed by Levenberg Marquardt:  tensor([0.1530, 0.1301])\n"]}],"source":["initial_joints = torch.tensor([0.0, np.pi/4, 0.0], requires_grad=True)\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error  # `error` ora è garantito essere `torch.float32`\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","\n","# Esegui il confronto per ogni modello\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.0, np.pi/4, 0.0]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CqAbe5l8d_aC","executionInfo":{"status":"ok","timestamp":1733164719406,"user_tz":-60,"elapsed":894,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"dc8c00f8-67ab-4dbf-be7b-2bb836ba95bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([ 0.1520, -0.1430])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.30567953933757397\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-1.3472,  0.5603,  1.1232])\n","Levenberg-Marquardt Error: 9.094029400418568e-05\n","--------------------------------------\n","Comparison target: tensor([ 0.1520, -0.1430]) Value computed by Newton-Raphson Method:  tensor([0.2604, 0.1428], dtype=torch.float64)\n","Comparison target: tensor([ 0.1520, -0.1430]) Value computed by Levenberg-Marquardt Method:  tensor([ 0.1521, -0.1430], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","metadata":{"id":"rVWMY76FYXMu"},"source":["# 10K\n"]},{"cell_type":"markdown","metadata":{"id":"gs6EGZDuF0QO"},"source":["## Dataset"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":541,"status":"ok","timestamp":1733508768087,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"w1a69_qJctLD","outputId":"c73af965-aba0-4d81-a9f3-89f140192e3a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset Shape before: (100000, 5)\n","Dataset Shape after: (10000, 5)\n","Training set size: 6000\n","Validation set size: 2000\n","Test set size: 2000\n"]}],"source":["# Create a Reduced Dataset\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/LOG_FILE_FULL_R3.csv\",sep=';')\n","df_filtered = df[['j0', 'j1', 'j2', 'ft_x', 'ft_y']]\n","\n","# Calculate the number of rows to keep (10% of the original dataset)\n","n_keep = int(len(df_filtered) * 0.1)\n","\n","# Randomly sample 10% of the rows\n","df_reduced_filtered = df_filtered.sample(n=n_keep, random_state=42)\n","\n","# Reset the index\n","df_reduced_filtered.reset_index(drop=True, inplace=True)\n","\n","print(f\"Dataset Shape before: {df_filtered.shape}\")\n","print(f\"Dataset Shape after: {df_reduced_filtered.shape}\")\n","\n","# Define features (X) and target (Y)\n","X = df_reduced_filtered[['j0', 'j1', 'j2']]\n","y = df_reduced_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":778,"status":"ok","timestamp":1733176714947,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"ef_VAoM-ebrb","outputId":"8147a96e-259b-4a81-db8a-e3ae2c56e895"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.scatter(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')  # Mantieni proporzioni reali per x e y\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":589,"status":"ok","timestamp":1733176718438,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"rRiEvGztezeT","outputId":"ed58b0b2-14d2-4224-d7b9-f18ff0e5161a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["heatmap, xedges, yedges = np.histogram2d(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], bins=50)\n","\n","# Visualizzazione della heatmap\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"]},{"cell_type":"markdown","source":["## Model train and test"],"metadata":{"id":"9fgxU6gTcv4G"}},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":54169,"status":"ok","timestamp":1733508844018,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"5RepXybof8ga","outputId":"4754750b-b6c4-4097-f2f1-dfc1994ee6aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.14711381412258107, R2: 0.09747343652316298\n"," \n","--------------------------------------------------------------\n"," \n","Decision Tree RMSE: 0.027941013334055728, R2: 0.9674127735815541\n"," \n","--------------------------------------------------------------\n"," \n","SVR Best Params: {'estimator__C': 1, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 100}\n","SVR RMSE: 0.02831438155704396, R2: 0.9665701444985534\n"," \n","--------------------------------------------------------------\n"," \n","Random Forest Best Params: {'estimator__max_depth': 15, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.015696870185360076, R2: 0.9896886538350281\n"," \n","--------------------------------------------------------------\n"," \n","KNN Best Params: {'estimator__n_neighbors': 10, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.011812546786850193, R2: 0.9941422041205474\n"," \n","--------------------------------------------------------------\n"," \n"]}],"source":["#-------------------------Linear Regression-------------------------\n","\n","# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)\n","\n","# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# ----------------------Decision tree regressor-------------------------\n","\n","# train\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [10, 20, 25]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)\n","\n","# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# -----------------------------SVR-----------------------------\n","\n","# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [100]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)\n","\n","\n","# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#---------------------------Random Forest--------------------------\n","\n","# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [10, 15]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)\n","\n","\n","#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#------------------------------------KNN---------------------------------------\n","\n","# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)\n","\n","#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"bCONCwZUEOuY","executionInfo":{"status":"ok","timestamp":1733508844019,"user_tz":-60,"elapsed":3,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"U2IXcG1YATH9","executionInfo":{"status":"ok","timestamp":1733508844019,"user_tz":-60,"elapsed":3,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 3  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)  # No activation for the output layer\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M_Z-bWUMBSYU"},"outputs":[],"source":["#'hidden_sizes': [[16, 32, 16], [16, 32, 64, 32, 16], [32, 64, 128, 64, 32]],\n","param_grid = {\n","    'learning_rate': [0.01, 0.001],\n","    'hidden_sizes': [[8, 16, 32, 16, 8], [16, 32, 64, 32, 16], [32, 64, 80, 64, 32]],\n","    'optimizer': ['Adam', 'SGD']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 50\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25329,"status":"ok","timestamp":1733177012435,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"xrIgaO-TBY6o","outputId":"c92f9793-d1a6-464c-97d1-71da1d00b71a"},"outputs":[{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:03, 11.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0959, Validation Loss: 0.0746\n","Epoch [2/50], Training Loss: 0.0756, Validation Loss: 0.0634\n","Epoch [3/50], Training Loss: 0.0643, Validation Loss: 0.0561\n","Epoch [4/50], Training Loss: 0.0569, Validation Loss: 0.0493\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0500, Validation Loss: 0.0442\n","Epoch [6/50], Training Loss: 0.0447, Validation Loss: 0.0414\n","Epoch [7/50], Training Loss: 0.0418, Validation Loss: 0.0398\n","Epoch [8/50], Training Loss: 0.0400, Validation Loss: 0.0374\n","Epoch [9/50], Training Loss: 0.0375, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0342, Validation Loss: 0.0309\n","Epoch [11/50], Training Loss: 0.0308, Validation Loss: 0.0281\n","Epoch [12/50], Training Loss: 0.0279, Validation Loss: 0.0258\n","Epoch [13/50], Training Loss: 0.0257, Validation Loss: 0.0241\n","Epoch [14/50], Training Loss: 0.0240, Validation Loss: 0.0229\n","Epoch [15/50], Training Loss: 0.0227, Validation Loss: 0.0220\n","Epoch [16/50], Training Loss: 0.0218, Validation Loss: 0.0213\n","Epoch [17/50], Training Loss: 0.0212, Validation Loss: 0.0209\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:00<00:00, 38.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0208, Validation Loss: 0.0208\n","Epoch [19/50], Training Loss: 0.0206, Validation Loss: 0.0207\n","Epoch [20/50], Training Loss: 0.0206, Validation Loss: 0.0207\n","Epoch [21/50], Training Loss: 0.0207, Validation Loss: 0.0208\n","Epoch [22/50], Training Loss: 0.0208, Validation Loss: 0.0209\n","Epoch [23/50], Training Loss: 0.0209, Validation Loss: 0.0209\n","Epoch [24/50], Training Loss: 0.0210, Validation Loss: 0.0210\n","Epoch [25/50], Training Loss: 0.0210, Validation Loss: 0.0209\n","Epoch [26/50], Training Loss: 0.0210, Validation Loss: 0.0208\n","Epoch [27/50], Training Loss: 0.0209, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:01<00:00, 38.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0207, Validation Loss: 0.0205\n","Epoch [29/50], Training Loss: 0.0205, Validation Loss: 0.0202\n","Epoch [30/50], Training Loss: 0.0203, Validation Loss: 0.0199\n","Epoch [31/50], Training Loss: 0.0199, Validation Loss: 0.0195\n","Epoch [32/50], Training Loss: 0.0195, Validation Loss: 0.0191\n","Epoch [33/50], Training Loss: 0.0191, Validation Loss: 0.0187\n","Epoch [34/50], Training Loss: 0.0187, Validation Loss: 0.0183\n","Epoch [35/50], Training Loss: 0.0183, Validation Loss: 0.0179\n","Epoch [36/50], Training Loss: 0.0179, Validation Loss: 0.0175\n","Epoch [37/50], Training Loss: 0.0175, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:01<00:00, 44.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0172, Validation Loss: 0.0169\n","Epoch [39/50], Training Loss: 0.0169, Validation Loss: 0.0167\n","Epoch [40/50], Training Loss: 0.0167, Validation Loss: 0.0164\n","Epoch [41/50], Training Loss: 0.0164, Validation Loss: 0.0162\n","Epoch [42/50], Training Loss: 0.0162, Validation Loss: 0.0159\n","Epoch [43/50], Training Loss: 0.0159, Validation Loss: 0.0156\n","Epoch [44/50], Training Loss: 0.0157, Validation Loss: 0.0154\n","Epoch [45/50], Training Loss: 0.0155, Validation Loss: 0.0152\n","Epoch [46/50], Training Loss: 0.0152, Validation Loss: 0.0149\n","Epoch [47/50], Training Loss: 0.0150, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 34.22it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0148, Validation Loss: 0.0145\n","Epoch [49/50], Training Loss: 0.0146, Validation Loss: 0.0143\n","Epoch [50/50], Training Loss: 0.0144, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 55.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1328, Validation Loss: 0.1304\n","Epoch [2/50], Training Loss: 0.1283, Validation Loss: 0.1261\n","Epoch [3/50], Training Loss: 0.1241, Validation Loss: 0.1220\n","Epoch [4/50], Training Loss: 0.1201, Validation Loss: 0.1181\n","Epoch [5/50], Training Loss: 0.1162, Validation Loss: 0.1143\n","Epoch [6/50], Training Loss: 0.1125, Validation Loss: 0.1108\n","Epoch [7/50], Training Loss: 0.1089, Validation Loss: 0.1073\n","Epoch [8/50], Training Loss: 0.1056, Validation Loss: 0.1040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 55.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.1023, Validation Loss: 0.1009\n","Epoch [10/50], Training Loss: 0.0992, Validation Loss: 0.0979\n","Epoch [11/50], Training Loss: 0.0962, Validation Loss: 0.0950\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 48.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0934, Validation Loss: 0.0922\n","Epoch [13/50], Training Loss: 0.0906, Validation Loss: 0.0896\n","Epoch [14/50], Training Loss: 0.0880, Validation Loss: 0.0870\n","Epoch [15/50], Training Loss: 0.0855, Validation Loss: 0.0846\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0831, Validation Loss: 0.0822\n","Epoch [17/50], Training Loss: 0.0807, Validation Loss: 0.0800\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:00, 33.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0785, Validation Loss: 0.0778\n","Epoch [19/50], Training Loss: 0.0764, Validation Loss: 0.0757\n","Epoch [20/50], Training Loss: 0.0744, Validation Loss: 0.0738\n","Epoch [21/50], Training Loss: 0.0724, Validation Loss: 0.0718\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:00, 33.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0705, Validation Loss: 0.0700\n","Epoch [23/50], Training Loss: 0.0687, Validation Loss: 0.0683\n","Epoch [24/50], Training Loss: 0.0670, Validation Loss: 0.0666\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 33.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0653, Validation Loss: 0.0649\n","Epoch [26/50], Training Loss: 0.0637, Validation Loss: 0.0634\n","Epoch [27/50], Training Loss: 0.0622, Validation Loss: 0.0619\n","Epoch [28/50], Training Loss: 0.0607, Validation Loss: 0.0604\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 29/50 [00:00<00:00, 32.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0593, Validation Loss: 0.0591\n","Epoch [30/50], Training Loss: 0.0579, Validation Loss: 0.0577\n","Epoch [31/50], Training Loss: 0.0566, Validation Loss: 0.0565\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 30.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0554, Validation Loss: 0.0552\n","Epoch [33/50], Training Loss: 0.0542, Validation Loss: 0.0541\n","Epoch [34/50], Training Loss: 0.0530, Validation Loss: 0.0529\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 30.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0519, Validation Loss: 0.0519\n","Epoch [36/50], Training Loss: 0.0509, Validation Loss: 0.0508\n","Epoch [37/50], Training Loss: 0.0498, Validation Loss: 0.0498\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:01<00:00, 30.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0488, Validation Loss: 0.0488\n","Epoch [39/50], Training Loss: 0.0479, Validation Loss: 0.0479\n","Epoch [40/50], Training Loss: 0.0470, Validation Loss: 0.0470\n","Epoch [41/50], Training Loss: 0.0461, Validation Loss: 0.0462\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:01<00:00, 30.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0453, Validation Loss: 0.0453\n","Epoch [43/50], Training Loss: 0.0445, Validation Loss: 0.0446\n","Epoch [44/50], Training Loss: 0.0437, Validation Loss: 0.0438\n","Epoch [45/50], Training Loss: 0.0429, Validation Loss: 0.0431\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0422, Validation Loss: 0.0423\n","Epoch [47/50], Training Loss: 0.0415, Validation Loss: 0.0417\n","Epoch [48/50], Training Loss: 0.0409, Validation Loss: 0.0410\n","Epoch [49/50], Training Loss: 0.0402, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 34.10it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0396, Validation Loss: 0.0398\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0669, Validation Loss: 0.0672\n","Epoch [2/50], Training Loss: 0.0662, Validation Loss: 0.0665\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 29.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0655, Validation Loss: 0.0658\n","Epoch [4/50], Training Loss: 0.0648, Validation Loss: 0.0651\n","Epoch [5/50], Training Loss: 0.0641, Validation Loss: 0.0644\n","Epoch [6/50], Training Loss: 0.0634, Validation Loss: 0.0637\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 29.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0627, Validation Loss: 0.0630\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0620, Validation Loss: 0.0623\n","Epoch [9/50], Training Loss: 0.0613, Validation Loss: 0.0616\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 35.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0606, Validation Loss: 0.0609\n","Epoch [11/50], Training Loss: 0.0599, Validation Loss: 0.0602\n","Epoch [12/50], Training Loss: 0.0593, Validation Loss: 0.0595\n","Epoch [13/50], Training Loss: 0.0586, Validation Loss: 0.0588\n","Epoch [14/50], Training Loss: 0.0579, Validation Loss: 0.0581\n","Epoch [15/50], Training Loss: 0.0572, Validation Loss: 0.0574\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 35.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0564, Validation Loss: 0.0566\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 38.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0557, Validation Loss: 0.0558\n","Epoch [18/50], Training Loss: 0.0550, Validation Loss: 0.0550\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:00<00:00, 40.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0542, Validation Loss: 0.0542\n","Epoch [20/50], Training Loss: 0.0534, Validation Loss: 0.0534\n","Epoch [21/50], Training Loss: 0.0525, Validation Loss: 0.0524\n","Epoch [22/50], Training Loss: 0.0516, Validation Loss: 0.0513\n","Epoch [23/50], Training Loss: 0.0505, Validation Loss: 0.0500\n","Epoch [24/50], Training Loss: 0.0492, Validation Loss: 0.0486\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:00<00:00, 40.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0479, Validation Loss: 0.0472\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0464, Validation Loss: 0.0457\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:00<00:00, 39.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0450, Validation Loss: 0.0442\n","Epoch [28/50], Training Loss: 0.0435, Validation Loss: 0.0427\n","Epoch [29/50], Training Loss: 0.0420, Validation Loss: 0.0412\n","Epoch [30/50], Training Loss: 0.0406, Validation Loss: 0.0397\n","Epoch [31/50], Training Loss: 0.0391, Validation Loss: 0.0383\n","Epoch [32/50], Training Loss: 0.0377, Validation Loss: 0.0369\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:00<00:00, 39.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0363, Validation Loss: 0.0355\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0350, Validation Loss: 0.0341\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 40.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0336, Validation Loss: 0.0328\n","Epoch [36/50], Training Loss: 0.0324, Validation Loss: 0.0316\n","Epoch [37/50], Training Loss: 0.0312, Validation Loss: 0.0304\n","Epoch [38/50], Training Loss: 0.0300, Validation Loss: 0.0293\n","Epoch [39/50], Training Loss: 0.0289, Validation Loss: 0.0283\n","Epoch [40/50], Training Loss: 0.0279, Validation Loss: 0.0273\n","Epoch [41/50], Training Loss: 0.0270, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0263, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0256, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 40.35it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0251, Validation Loss: 0.0249\n","Epoch [45/50], Training Loss: 0.0247, Validation Loss: 0.0246\n","Epoch [46/50], Training Loss: 0.0244, Validation Loss: 0.0245\n","Epoch [47/50], Training Loss: 0.0243, Validation Loss: 0.0245\n","Epoch [48/50], Training Loss: 0.0243, Validation Loss: 0.0245\n","Epoch [49/50], Training Loss: 0.0244, Validation Loss: 0.0246\n","Epoch [50/50], Training Loss: 0.0244, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0839, Validation Loss: 0.0823\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0838, Validation Loss: 0.0821\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0837, Validation Loss: 0.0820\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0835, Validation Loss: 0.0819\n","Epoch [5/50], Training Loss: 0.0834, Validation Loss: 0.0817\n","Epoch [6/50], Training Loss: 0.0833, Validation Loss: 0.0816\n","Epoch [7/50], Training Loss: 0.0831, Validation Loss: 0.0815\n","Epoch [8/50], Training Loss: 0.0830, Validation Loss: 0.0813\n","Epoch [9/50], Training Loss: 0.0828, Validation Loss: 0.0812\n","Epoch [10/50], Training Loss: 0.0827, Validation Loss: 0.0811\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0826, Validation Loss: 0.0809\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  22%|██▏       | 11/50 [00:00<00:00, 50.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0824, Validation Loss: 0.0808\n","Epoch [13/50], Training Loss: 0.0823, Validation Loss: 0.0807\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  22%|██▏       | 11/50 [00:00<00:00, 50.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0822, Validation Loss: 0.0805\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  34%|███▍      | 17/50 [00:00<00:00, 50.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0820, Validation Loss: 0.0804\n","Epoch [16/50], Training Loss: 0.0819, Validation Loss: 0.0803\n","Epoch [17/50], Training Loss: 0.0818, Validation Loss: 0.0802\n","Epoch [18/50], Training Loss: 0.0817, Validation Loss: 0.0800\n","Epoch [19/50], Training Loss: 0.0815, Validation Loss: 0.0799\n","Epoch [20/50], Training Loss: 0.0814, Validation Loss: 0.0798\n","Epoch [21/50], Training Loss: 0.0813, Validation Loss: 0.0796\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  34%|███▍      | 17/50 [00:00<00:00, 50.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0811, Validation Loss: 0.0795\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0810, Validation Loss: 0.0794\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0809, Validation Loss: 0.0793\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 29/50 [00:00<00:00, 50.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0807, Validation Loss: 0.0791\n","Epoch [26/50], Training Loss: 0.0806, Validation Loss: 0.0790\n","Epoch [27/50], Training Loss: 0.0805, Validation Loss: 0.0789\n","Epoch [28/50], Training Loss: 0.0804, Validation Loss: 0.0788\n","Epoch [29/50], Training Loss: 0.0802, Validation Loss: 0.0786\n","Epoch [30/50], Training Loss: 0.0801, Validation Loss: 0.0785\n","Epoch [31/50], Training Loss: 0.0800, Validation Loss: 0.0784\n","Epoch [32/50], Training Loss: 0.0798, Validation Loss: 0.0782\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 29/50 [00:00<00:00, 50.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0797, Validation Loss: 0.0781\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  58%|█████▊    | 29/50 [00:00<00:00, 50.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0796, Validation Loss: 0.0780\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 49.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0795, Validation Loss: 0.0779\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 45.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0793, Validation Loss: 0.0777\n","Epoch [37/50], Training Loss: 0.0792, Validation Loss: 0.0776\n","Epoch [38/50], Training Loss: 0.0791, Validation Loss: 0.0775\n","Epoch [39/50], Training Loss: 0.0790, Validation Loss: 0.0774\n","Epoch [40/50], Training Loss: 0.0788, Validation Loss: 0.0773\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 45.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0787, Validation Loss: 0.0771\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 45.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0786, Validation Loss: 0.0770\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 45.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0785, Validation Loss: 0.0769\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 41.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0783, Validation Loss: 0.0768\n","Epoch [45/50], Training Loss: 0.0782, Validation Loss: 0.0766\n","Epoch [46/50], Training Loss: 0.0781, Validation Loss: 0.0765\n","Epoch [47/50], Training Loss: 0.0780, Validation Loss: 0.0764\n","Epoch [48/50], Training Loss: 0.0778, Validation Loss: 0.0763\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 41.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0777, Validation Loss: 0.0762\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 44.89it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0776, Validation Loss: 0.0760\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0789, Validation Loss: 0.0597\n","Epoch [2/50], Training Loss: 0.0610, Validation Loss: 0.0426\n","Epoch [3/50], Training Loss: 0.0435, Validation Loss: 0.0280\n","Epoch [4/50], Training Loss: 0.0286, Validation Loss: 0.0295\n","Epoch [5/50], Training Loss: 0.0297, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0267, Validation Loss: 0.0221\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0218, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 35.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0206, Validation Loss: 0.0211\n","Epoch [9/50], Training Loss: 0.0212, Validation Loss: 0.0209\n","Epoch [10/50], Training Loss: 0.0212, Validation Loss: 0.0199\n","Epoch [11/50], Training Loss: 0.0202, Validation Loss: 0.0186\n","Epoch [12/50], Training Loss: 0.0190, Validation Loss: 0.0177\n","Epoch [13/50], Training Loss: 0.0181, Validation Loss: 0.0175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 35.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0180, Validation Loss: 0.0176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 35.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0180, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0176, Validation Loss: 0.0164\n","Epoch [17/50], Training Loss: 0.0168, Validation Loss: 0.0157\n","Epoch [18/50], Training Loss: 0.0160, Validation Loss: 0.0152\n","Epoch [19/50], Training Loss: 0.0155, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 31.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0150, Validation Loss: 0.0143\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 31.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0145, Validation Loss: 0.0135\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 31.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0138, Validation Loss: 0.0127\n","Epoch [23/50], Training Loss: 0.0130, Validation Loss: 0.0119\n","Epoch [24/50], Training Loss: 0.0122, Validation Loss: 0.0112\n","Epoch [25/50], Training Loss: 0.0114, Validation Loss: 0.0106\n","Epoch [26/50], Training Loss: 0.0107, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 31.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0103, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 31.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0101, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:01<00:00, 32.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0099, Validation Loss: 0.0097\n","Epoch [30/50], Training Loss: 0.0096, Validation Loss: 0.0092\n","Epoch [31/50], Training Loss: 0.0092, Validation Loss: 0.0089\n","Epoch [32/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [33/50], Training Loss: 0.0084, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:01<00:00, 32.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0080, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0075, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 34.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0070, Validation Loss: 0.0065\n","Epoch [37/50], Training Loss: 0.0065, Validation Loss: 0.0061\n","Epoch [38/50], Training Loss: 0.0060, Validation Loss: 0.0057\n","Epoch [39/50], Training Loss: 0.0056, Validation Loss: 0.0052\n","Epoch [40/50], Training Loss: 0.0052, Validation Loss: 0.0048\n","Epoch [41/50], Training Loss: 0.0048, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 34.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0044, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 34.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0042, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:01<00:00, 33.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0038, Validation Loss: 0.0037\n","Epoch [45/50], Training Loss: 0.0036, Validation Loss: 0.0035\n","Epoch [46/50], Training Loss: 0.0033, Validation Loss: 0.0033\n","Epoch [47/50], Training Loss: 0.0032, Validation Loss: 0.0031\n","Epoch [48/50], Training Loss: 0.0030, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:01<00:00, 33.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0028, Validation Loss: 0.0028\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 32.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0027, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:01, 38.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0417, Validation Loss: 0.0419\n","Epoch [2/50], Training Loss: 0.0413, Validation Loss: 0.0415\n","Epoch [3/50], Training Loss: 0.0409, Validation Loss: 0.0411\n","Epoch [4/50], Training Loss: 0.0405, Validation Loss: 0.0407\n","Epoch [5/50], Training Loss: 0.0402, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:01, 38.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0398, Validation Loss: 0.0400\n","Epoch [7/50], Training Loss: 0.0395, Validation Loss: 0.0396\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 37.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0391, Validation Loss: 0.0393\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 37.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0388, Validation Loss: 0.0390\n","Epoch [10/50], Training Loss: 0.0385, Validation Loss: 0.0386\n","Epoch [11/50], Training Loss: 0.0381, Validation Loss: 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 30.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0378, Validation Loss: 0.0380\n","Epoch [13/50], Training Loss: 0.0375, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 30.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0372, Validation Loss: 0.0374\n","Epoch [15/50], Training Loss: 0.0369, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:01, 30.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0366, Validation Loss: 0.0368\n","Epoch [17/50], Training Loss: 0.0364, Validation Loss: 0.0365\n","Epoch [18/50], Training Loss: 0.0361, Validation Loss: 0.0363\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 32.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0358, Validation Loss: 0.0360\n","Epoch [20/50], Training Loss: 0.0356, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 32.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0353, Validation Loss: 0.0355\n","Epoch [22/50], Training Loss: 0.0350, Validation Loss: 0.0352\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0348, Validation Loss: 0.0350\n","Epoch [24/50], Training Loss: 0.0346, Validation Loss: 0.0347\n","Epoch [25/50], Training Loss: 0.0343, Validation Loss: 0.0345\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0341, Validation Loss: 0.0343\n","Epoch [27/50], Training Loss: 0.0339, Validation Loss: 0.0340\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 32.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0336, Validation Loss: 0.0338\n","Epoch [29/50], Training Loss: 0.0334, Validation Loss: 0.0336\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:01<00:00, 32.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0332, Validation Loss: 0.0334\n","Epoch [31/50], Training Loss: 0.0330, Validation Loss: 0.0332\n","Epoch [32/50], Training Loss: 0.0328, Validation Loss: 0.0330\n","Epoch [33/50], Training Loss: 0.0326, Validation Loss: 0.0328\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:01<00:00, 32.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0324, Validation Loss: 0.0326\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 36/50 [00:01<00:00, 31.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0322, Validation Loss: 0.0324\n","Epoch [36/50], Training Loss: 0.0320, Validation Loss: 0.0322\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 36/50 [00:01<00:00, 31.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0319, Validation Loss: 0.0320\n","Epoch [38/50], Training Loss: 0.0317, Validation Loss: 0.0319\n","Epoch [39/50], Training Loss: 0.0315, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0313, Validation Loss: 0.0315\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:01<00:00, 30.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0312, Validation Loss: 0.0313\n","Epoch [42/50], Training Loss: 0.0310, Validation Loss: 0.0312\n","Epoch [43/50], Training Loss: 0.0309, Validation Loss: 0.0310\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 44/50 [00:01<00:00, 30.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0307, Validation Loss: 0.0309\n","Epoch [45/50], Training Loss: 0.0305, Validation Loss: 0.0307\n","Epoch [46/50], Training Loss: 0.0304, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 44/50 [00:01<00:00, 30.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0303, Validation Loss: 0.0304\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0301, Validation Loss: 0.0303\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 30.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0300, Validation Loss: 0.0301\n","Epoch [50/50], Training Loss: 0.0298, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0652, Validation Loss: 0.0616\n","Epoch [2/50], Training Loss: 0.0623, Validation Loss: 0.0589\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 25.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0596, Validation Loss: 0.0564\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 25.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0570, Validation Loss: 0.0541\n","Epoch [5/50], Training Loss: 0.0547, Validation Loss: 0.0521\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:02, 21.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0526, Validation Loss: 0.0502\n","Epoch [7/50], Training Loss: 0.0508, Validation Loss: 0.0486\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:02, 21.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0491, Validation Loss: 0.0471\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 23.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0476, Validation Loss: 0.0456\n","Epoch [10/50], Training Loss: 0.0461, Validation Loss: 0.0442\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 23.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0446, Validation Loss: 0.0427\n","Epoch [12/50], Training Loss: 0.0432, Validation Loss: 0.0413\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 21.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0417, Validation Loss: 0.0398\n","Epoch [14/50], Training Loss: 0.0402, Validation Loss: 0.0384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 15/50 [00:00<00:01, 20.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0387, Validation Loss: 0.0369\n","Epoch [16/50], Training Loss: 0.0372, Validation Loss: 0.0354\n","Epoch [17/50], Training Loss: 0.0357, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:01, 21.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0341, Validation Loss: 0.0324\n","Epoch [19/50], Training Loss: 0.0326, Validation Loss: 0.0310\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 21/50 [00:00<00:01, 20.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0312, Validation Loss: 0.0297\n","Epoch [21/50], Training Loss: 0.0299, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 21/50 [00:01<00:01, 20.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0288, Validation Loss: 0.0278\n","Epoch [23/50], Training Loss: 0.0279, Validation Loss: 0.0271\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0271, Validation Loss: 0.0265\n","Epoch [25/50], Training Loss: 0.0265, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:01, 12.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0261, Validation Loss: 0.0257\n","Epoch [27/50], Training Loss: 0.0257, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  62%|██████▏   | 31/50 [00:01<00:01, 12.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0254, Validation Loss: 0.0252\n","Epoch [29/50], Training Loss: 0.0251, Validation Loss: 0.0249\n","Epoch [30/50], Training Loss: 0.0248, Validation Loss: 0.0246\n","Epoch [31/50], Training Loss: 0.0246, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0242, Validation Loss: 0.0239\n","Epoch [33/50], Training Loss: 0.0238, Validation Loss: 0.0234\n","Epoch [34/50], Training Loss: 0.0234, Validation Loss: 0.0230\n","Epoch [35/50], Training Loss: 0.0230, Validation Loss: 0.0226\n","Epoch [36/50], Training Loss: 0.0226, Validation Loss: 0.0222\n","Epoch [37/50], Training Loss: 0.0223, Validation Loss: 0.0219\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 43/50 [00:02<00:00, 22.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0220, Validation Loss: 0.0216\n","Epoch [39/50], Training Loss: 0.0217, Validation Loss: 0.0214\n","Epoch [40/50], Training Loss: 0.0215, Validation Loss: 0.0213\n","Epoch [41/50], Training Loss: 0.0213, Validation Loss: 0.0211\n","Epoch [42/50], Training Loss: 0.0212, Validation Loss: 0.0210\n","Epoch [43/50], Training Loss: 0.0211, Validation Loss: 0.0209\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 49/50 [00:02<00:00, 24.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0210, Validation Loss: 0.0207\n","Epoch [45/50], Training Loss: 0.0209, Validation Loss: 0.0206\n","Epoch [46/50], Training Loss: 0.0207, Validation Loss: 0.0204\n","Epoch [47/50], Training Loss: 0.0206, Validation Loss: 0.0203\n","Epoch [48/50], Training Loss: 0.0204, Validation Loss: 0.0201\n","Epoch [49/50], Training Loss: 0.0202, Validation Loss: 0.0200\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:02<00:00, 19.18it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0201, Validation Loss: 0.0198\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:01, 25.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0562, Validation Loss: 0.0554\n","Epoch [2/50], Training Loss: 0.0561, Validation Loss: 0.0553\n","Epoch [3/50], Training Loss: 0.0560, Validation Loss: 0.0552\n","Epoch [4/50], Training Loss: 0.0560, Validation Loss: 0.0552\n","Epoch [5/50], Training Loss: 0.0559, Validation Loss: 0.0551\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:01, 31.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0558, Validation Loss: 0.0550\n","Epoch [7/50], Training Loss: 0.0557, Validation Loss: 0.0549\n","Epoch [8/50], Training Loss: 0.0556, Validation Loss: 0.0548\n","Epoch [9/50], Training Loss: 0.0556, Validation Loss: 0.0548\n","Epoch [10/50], Training Loss: 0.0555, Validation Loss: 0.0547\n","Epoch [11/50], Training Loss: 0.0554, Validation Loss: 0.0546\n","Epoch [12/50], Training Loss: 0.0553, Validation Loss: 0.0545\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:01, 30.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0552, Validation Loss: 0.0545\n","Epoch [14/50], Training Loss: 0.0552, Validation Loss: 0.0544\n","Epoch [15/50], Training Loss: 0.0551, Validation Loss: 0.0543\n","Epoch [16/50], Training Loss: 0.0550, Validation Loss: 0.0542\n","Epoch [17/50], Training Loss: 0.0549, Validation Loss: 0.0541\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:00<00:01, 27.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0548, Validation Loss: 0.0541\n","Epoch [19/50], Training Loss: 0.0548, Validation Loss: 0.0540\n","Epoch [20/50], Training Loss: 0.0547, Validation Loss: 0.0539\n","Epoch [21/50], Training Loss: 0.0546, Validation Loss: 0.0538\n","Epoch [22/50], Training Loss: 0.0545, Validation Loss: 0.0538\n","Epoch [23/50], Training Loss: 0.0545, Validation Loss: 0.0537\n","Epoch [24/50], Training Loss: 0.0544, Validation Loss: 0.0536\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 30/50 [00:01<00:00, 30.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0543, Validation Loss: 0.0535\n","Epoch [26/50], Training Loss: 0.0542, Validation Loss: 0.0535\n","Epoch [27/50], Training Loss: 0.0542, Validation Loss: 0.0534\n","Epoch [28/50], Training Loss: 0.0541, Validation Loss: 0.0533\n","Epoch [29/50], Training Loss: 0.0540, Validation Loss: 0.0532\n","Epoch [30/50], Training Loss: 0.0539, Validation Loss: 0.0532\n","Epoch [31/50], Training Loss: 0.0539, Validation Loss: 0.0531\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 32.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0538, Validation Loss: 0.0530\n","Epoch [33/50], Training Loss: 0.0537, Validation Loss: 0.0529\n","Epoch [34/50], Training Loss: 0.0536, Validation Loss: 0.0529\n","Epoch [35/50], Training Loss: 0.0536, Validation Loss: 0.0528\n","Epoch [36/50], Training Loss: 0.0535, Validation Loss: 0.0527\n","Epoch [37/50], Training Loss: 0.0534, Validation Loss: 0.0526\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  84%|████████▍ | 42/50 [00:01<00:00, 29.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0533, Validation Loss: 0.0526\n","Epoch [39/50], Training Loss: 0.0533, Validation Loss: 0.0525\n","Epoch [40/50], Training Loss: 0.0532, Validation Loss: 0.0524\n","Epoch [41/50], Training Loss: 0.0531, Validation Loss: 0.0524\n","Epoch [42/50], Training Loss: 0.0530, Validation Loss: 0.0523\n","Epoch [43/50], Training Loss: 0.0530, Validation Loss: 0.0522\n","Epoch [44/50], Training Loss: 0.0529, Validation Loss: 0.0521\n","Epoch [45/50], Training Loss: 0.0528, Validation Loss: 0.0521\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:01<00:00, 31.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0527, Validation Loss: 0.0520\n","Epoch [47/50], Training Loss: 0.0527, Validation Loss: 0.0519\n","Epoch [48/50], Training Loss: 0.0526, Validation Loss: 0.0518\n","Epoch [49/50], Training Loss: 0.0525, Validation Loss: 0.0518\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 27.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0525, Validation Loss: 0.0517\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   2%|▏         | 1/50 [00:00<00:04,  9.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0287, Validation Loss: 0.0215\n","Epoch [2/50], Training Loss: 0.0216, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:03, 13.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0247, Validation Loss: 0.0209\n","Epoch [4/50], Training Loss: 0.0209, Validation Loss: 0.0200\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:02, 17.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0202, Validation Loss: 0.0182\n","Epoch [6/50], Training Loss: 0.0185, Validation Loss: 0.0168\n","Epoch [7/50], Training Loss: 0.0171, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0158, Validation Loss: 0.0142\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  20%|██        | 10/50 [00:00<00:02, 17.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0146, Validation Loss: 0.0134\n","Epoch [10/50], Training Loss: 0.0138, Validation Loss: 0.0122\n","Epoch [11/50], Training Loss: 0.0127, Validation Loss: 0.0110\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:02, 14.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0115, Validation Loss: 0.0107\n","Epoch [13/50], Training Loss: 0.0111, Validation Loss: 0.0098\n","Epoch [14/50], Training Loss: 0.0102, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  32%|███▏      | 16/50 [00:01<00:02, 14.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0090, Validation Loss: 0.0074\n","Epoch [16/50], Training Loss: 0.0078, Validation Loss: 0.0063\n","Epoch [17/50], Training Loss: 0.0067, Validation Loss: 0.0058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  40%|████      | 20/50 [00:01<00:02, 12.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0061, Validation Loss: 0.0053\n","Epoch [19/50], Training Loss: 0.0054, Validation Loss: 0.0046\n","Epoch [20/50], Training Loss: 0.0046, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  44%|████▍     | 22/50 [00:01<00:02, 12.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0043, Validation Loss: 0.0044\n","Epoch [22/50], Training Loss: 0.0044, Validation Loss: 0.0036\n","Epoch [23/50], Training Loss: 0.0036, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 26/50 [00:02<00:02, 10.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0036, Validation Loss: 0.0032\n","Epoch [25/50], Training Loss: 0.0033, Validation Loss: 0.0027\n","Epoch [26/50], Training Loss: 0.0027, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  56%|█████▌    | 28/50 [00:02<00:01, 11.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0024, Validation Loss: 0.0023\n","Epoch [28/50], Training Loss: 0.0023, Validation Loss: 0.0020\n","Epoch [29/50], Training Loss: 0.0019, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  64%|██████▍   | 32/50 [00:02<00:01, 11.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0019, Validation Loss: 0.0017\n","Epoch [31/50], Training Loss: 0.0018, Validation Loss: 0.0014\n","Epoch [32/50], Training Loss: 0.0015, Validation Loss: 0.0014\n","Epoch [33/50], Training Loss: 0.0015, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  76%|███████▌  | 38/50 [00:02<00:00, 16.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0015, Validation Loss: 0.0012\n","Epoch [35/50], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [36/50], Training Loss: 0.0014, Validation Loss: 0.0016\n","Epoch [37/50], Training Loss: 0.0017, Validation Loss: 0.0021\n","Epoch [38/50], Training Loss: 0.0020, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  80%|████████  | 40/50 [00:03<00:00, 15.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0015, Validation Loss: 0.0008\n","Epoch [40/50], Training Loss: 0.0008, Validation Loss: 0.0012\n","Epoch [41/50], Training Loss: 0.0012, Validation Loss: 0.0008\n","Epoch [42/50], Training Loss: 0.0008, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  90%|█████████ | 45/50 [00:03<00:00, 17.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0009, Validation Loss: 0.0008\n","Epoch [44/50], Training Loss: 0.0008, Validation Loss: 0.0007\n","Epoch [45/50], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [46/50], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [47/50], Training Loss: 0.0007, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 50/50 [00:03<00:00, 14.46it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [49/50], Training Loss: 0.0006, Validation Loss: 0.0005\n","Epoch [50/50], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 23.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0246, Validation Loss: 0.0245\n","Epoch [2/50], Training Loss: 0.0246, Validation Loss: 0.0244\n","Epoch [3/50], Training Loss: 0.0246, Validation Loss: 0.0244\n","Epoch [4/50], Training Loss: 0.0245, Validation Loss: 0.0244\n","Epoch [5/50], Training Loss: 0.0245, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 22.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0245, Validation Loss: 0.0243\n","Epoch [7/50], Training Loss: 0.0244, Validation Loss: 0.0243\n","Epoch [8/50], Training Loss: 0.0244, Validation Loss: 0.0243\n","Epoch [9/50], Training Loss: 0.0244, Validation Loss: 0.0243\n","Epoch [10/50], Training Loss: 0.0244, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 24.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0243, Validation Loss: 0.0242\n","Epoch [12/50], Training Loss: 0.0243, Validation Loss: 0.0242\n","Epoch [13/50], Training Loss: 0.0243, Validation Loss: 0.0242\n","Epoch [14/50], Training Loss: 0.0243, Validation Loss: 0.0241\n","Epoch [15/50], Training Loss: 0.0242, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 23.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0242, Validation Loss: 0.0241\n","Epoch [17/50], Training Loss: 0.0242, Validation Loss: 0.0241\n","Epoch [18/50], Training Loss: 0.0242, Validation Loss: 0.0241\n","Epoch [19/50], Training Loss: 0.0242, Validation Loss: 0.0240\n","Epoch [20/50], Training Loss: 0.0241, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 19.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0241, Validation Loss: 0.0240\n","Epoch [22/50], Training Loss: 0.0241, Validation Loss: 0.0240\n","Epoch [23/50], Training Loss: 0.0241, Validation Loss: 0.0240\n","Epoch [24/50], Training Loss: 0.0241, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:01, 18.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0240, Validation Loss: 0.0239\n","Epoch [26/50], Training Loss: 0.0240, Validation Loss: 0.0239\n","Epoch [27/50], Training Loss: 0.0240, Validation Loss: 0.0239\n","Epoch [28/50], Training Loss: 0.0240, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  64%|██████▍   | 32/50 [00:01<00:01, 17.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0240, Validation Loss: 0.0239\n","Epoch [30/50], Training Loss: 0.0240, Validation Loss: 0.0238\n","Epoch [31/50], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [32/50], Training Loss: 0.0239, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 18.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [34/50], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [35/50], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [36/50], Training Loss: 0.0239, Validation Loss: 0.0238\n","Epoch [37/50], Training Loss: 0.0239, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 43/50 [00:02<00:00, 21.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [39/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [40/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [41/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [42/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [43/50], Training Loss: 0.0238, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  98%|█████████▊| 49/50 [00:02<00:00, 24.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [45/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [46/50], Training Loss: 0.0237, Validation Loss: 0.0236\n","Epoch [47/50], Training Loss: 0.0237, Validation Loss: 0.0236\n","Epoch [48/50], Training Loss: 0.0237, Validation Loss: 0.0236\n","Epoch [49/50], Training Loss: 0.0237, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 21.16it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0237, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:02, 21.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0262, Validation Loss: 0.0245\n","Epoch [2/50], Training Loss: 0.0249, Validation Loss: 0.0235\n","Epoch [3/50], Training Loss: 0.0238, Validation Loss: 0.0225\n","Epoch [4/50], Training Loss: 0.0228, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:02, 21.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0219, Validation Loss: 0.0212\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 22.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0213, Validation Loss: 0.0207\n","Epoch [7/50], Training Loss: 0.0207, Validation Loss: 0.0204\n","Epoch [8/50], Training Loss: 0.0203, Validation Loss: 0.0202\n","Epoch [9/50], Training Loss: 0.0201, Validation Loss: 0.0200\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 22.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0198, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 20.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0195, Validation Loss: 0.0193\n","Epoch [12/50], Training Loss: 0.0191, Validation Loss: 0.0188\n","Epoch [13/50], Training Loss: 0.0186, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 20.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0182, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  30%|███       | 15/50 [00:00<00:01, 19.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0177, Validation Loss: 0.0173\n","Epoch [16/50], Training Loss: 0.0172, Validation Loss: 0.0168\n","Epoch [17/50], Training Loss: 0.0167, Validation Loss: 0.0162\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:01, 19.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0162, Validation Loss: 0.0156\n","Epoch [19/50], Training Loss: 0.0157, Validation Loss: 0.0151\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  42%|████▏     | 21/50 [00:01<00:01, 20.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0151, Validation Loss: 0.0145\n","Epoch [21/50], Training Loss: 0.0145, Validation Loss: 0.0139\n","Epoch [22/50], Training Loss: 0.0140, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  48%|████▊     | 24/50 [00:01<00:01, 20.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0134, Validation Loss: 0.0128\n","Epoch [24/50], Training Loss: 0.0128, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:01, 21.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0122, Validation Loss: 0.0115\n","Epoch [26/50], Training Loss: 0.0115, Validation Loss: 0.0108\n","Epoch [27/50], Training Loss: 0.0109, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:01, 21.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0102, Validation Loss: 0.0096\n","Epoch [29/50], Training Loss: 0.0096, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  60%|██████    | 30/50 [00:01<00:00, 21.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0090, Validation Loss: 0.0084\n","Epoch [31/50], Training Loss: 0.0084, Validation Loss: 0.0079\n","Epoch [32/50], Training Loss: 0.0079, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  66%|██████▌   | 33/50 [00:01<00:00, 21.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0074, Validation Loss: 0.0068\n","Epoch [34/50], Training Loss: 0.0069, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 20.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0064, Validation Loss: 0.0059\n","Epoch [36/50], Training Loss: 0.0060, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 20.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0056, Validation Loss: 0.0052\n","Epoch [38/50], Training Loss: 0.0053, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  78%|███████▊  | 39/50 [00:01<00:00, 18.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0050, Validation Loss: 0.0047\n","Epoch [40/50], Training Loss: 0.0047, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  82%|████████▏ | 41/50 [00:02<00:00, 17.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0045, Validation Loss: 0.0043\n","Epoch [42/50], Training Loss: 0.0044, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  86%|████████▌ | 43/50 [00:02<00:00, 17.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0042, Validation Loss: 0.0040\n","Epoch [44/50], Training Loss: 0.0040, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  90%|█████████ | 45/50 [00:02<00:00, 17.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0038, Validation Loss: 0.0036\n","Epoch [46/50], Training Loss: 0.0036, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 47/50 [00:02<00:00, 18.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0034, Validation Loss: 0.0031\n","Epoch [48/50], Training Loss: 0.0032, Validation Loss: 0.0030\n","Epoch [49/50], Training Loss: 0.0030, Validation Loss: 0.0028\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 50/50 [00:02<00:00, 19.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0028, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 19.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0289, Validation Loss: 0.0282\n","Epoch [2/50], Training Loss: 0.0289, Validation Loss: 0.0282\n","Epoch [3/50], Training Loss: 0.0289, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 19.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0289, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  10%|█         | 5/50 [00:00<00:02, 18.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0289, Validation Loss: 0.0282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:02, 16.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0288, Validation Loss: 0.0282\n","Epoch [7/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:02, 16.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:02, 16.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  22%|██▏       | 11/50 [00:00<00:02, 16.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0288, Validation Loss: 0.0281\n","Epoch [11/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  22%|██▏       | 11/50 [00:00<00:02, 16.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:02, 16.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0287, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:02, 16.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0287, Validation Loss: 0.0281\n","Epoch [15/50], Training Loss: 0.0287, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:02, 16.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0287, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  34%|███▍      | 17/50 [00:01<00:01, 16.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0287, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 19/50 [00:01<00:01, 17.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0287, Validation Loss: 0.0280\n","Epoch [19/50], Training Loss: 0.0287, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 19/50 [00:01<00:01, 17.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0286, Validation Loss: 0.0280\n","Epoch [21/50], Training Loss: 0.0286, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 22/50 [00:01<00:01, 19.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0286, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 22/50 [00:01<00:01, 19.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0286, Validation Loss: 0.0279\n","Epoch [24/50], Training Loss: 0.0286, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  50%|█████     | 25/50 [00:01<00:01, 20.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0286, Validation Loss: 0.0279\n","Epoch [26/50], Training Loss: 0.0286, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:00, 22.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0286, Validation Loss: 0.0279\n","Epoch [28/50], Training Loss: 0.0285, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:00, 22.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0285, Validation Loss: 0.0279\n","Epoch [30/50], Training Loss: 0.0285, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  62%|██████▏   | 31/50 [00:01<00:00, 22.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0285, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  62%|██████▏   | 31/50 [00:01<00:00, 22.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0285, Validation Loss: 0.0278\n","Epoch [33/50], Training Loss: 0.0285, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0285, Validation Loss: 0.0278\n","Epoch [35/50], Training Loss: 0.0284, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 23.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0284, Validation Loss: 0.0278\n","Epoch [37/50], Training Loss: 0.0284, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 23.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0284, Validation Loss: 0.0277\n","Epoch [39/50], Training Loss: 0.0284, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  80%|████████  | 40/50 [00:02<00:00, 22.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0284, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  80%|████████  | 40/50 [00:02<00:00, 22.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0284, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 43/50 [00:02<00:00, 20.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0283, Validation Loss: 0.0277\n","Epoch [43/50], Training Loss: 0.0283, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 43/50 [00:02<00:00, 20.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0283, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  86%|████████▌ | 43/50 [00:02<00:00, 20.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0283, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 18.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0283, Validation Loss: 0.0276\n","Epoch [47/50], Training Loss: 0.0283, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  96%|█████████▌| 48/50 [00:02<00:00, 18.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0283, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  96%|█████████▌| 48/50 [00:02<00:00, 18.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0283, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 19.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0282, Validation Loss: 0.0276\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"10K_model_state_dict_r3\"))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1733177012435,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"f4I7VwIEBhBX","outputId":"9091c87e-c623-4445-97e5-c385e2ddbbff"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [32, 64, 80, 64, 32]\n","Optimizer: Adam\n","Best Validation Loss: 0.00047295750118792057\n"]}],"source":["# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1733177012435,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"sjRnr5oDFL5l","outputId":"dddf0860-8804-4aea-e80c-2cf714337d22"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":938,"status":"ok","timestamp":1733508844954,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"VUTGXlfOBksa","outputId":"0dd873f6-ad9f-4475-9325-a7f58a1c4702"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.021398679879608223\n","Test R^2 Score: 0.980891227722168\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/10K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"66pgr1xEymxk"},"source":["## Check with jacobian\n"]},{"cell_type":"code","source":["def FK(model, theta):\n","    t = theta.view(1, 3)\n","    out = model(t)\n","    out = out.view(-1)\n","    return out\n","\n","def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(t):\n","        return FK(model, t)\n","\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, theta)\n","    return jacobian\n","\n","def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        # Differenze finite centrali\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n","\n","\n","# Analytical Jacobian\n","def analytical_jacobian(joint_angles, L1, L2, L3):\n","    j0, j1, j2 = joint_angles\n","    j0, j1, j2 = j0.item(), j1.item(), j2.item()\n","\n","    theta1 = j0\n","    theta2 = j0 + j1\n","    theta3 = j0 + j1 + j2\n","\n","    dx_dj0 = -L1 * np.sin(theta1) - L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj0 = L1 * np.cos(theta1) + L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj1 = -L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj1 = L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj2 = -L3 * np.sin(theta3)\n","    dy_dj2 = L3 * np.cos(theta3)\n","\n","    J_analytical = np.array([\n","        [dx_dj0, dx_dj1, dx_dj2],\n","        [dy_dj0, dy_dj1, dy_dj2]\n","    ])\n","    return J_analytical\n","\n"],"metadata":{"id":"Jj82O1IGTsLm","executionInfo":{"status":"ok","timestamp":1733399413310,"user_tz":-60,"elapsed":6,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","execution_count":58,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1680,"status":"ok","timestamp":1733399414984,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"MM3w9JYqyrJM","outputId":"f44c5e7f-0f3d-418e-ff05-6e6bd7f12d94"},"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[0.000 -0.002 -0.000]\n"," [0.025 -0.025 -0.005]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.210 0.208 0.110]\n"," [-0.075 -0.025 -0.005]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000 0.000]\n"," [0.000 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.210 0.210 0.110]\n"," [-0.100 0.000 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.192 -0.162 -0.082]\n"," [0.093 0.020 -0.001]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.018 0.048 0.028]\n"," [-0.007 0.020 -0.001]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000 0.000]\n"," [-0.060 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.210 0.210 0.110]\n"," [-0.160 0.000 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.092 -0.047 -0.023]\n"," [0.053 -0.006 -0.016]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.118 0.163 0.087]\n"," [-0.047 -0.006 -0.016]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.258 -0.195 -0.087]\n"," [0.118 0.025 -0.026]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.048 0.015 0.023]\n"," [0.018 0.025 -0.026]]\n","------------------------------------------------------------------------------------------\n"]}],"source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/10K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2), 0], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","\n"]},{"cell_type":"markdown","source":["### Check with metrics"],"metadata":{"id":"hNjSUozoH-Ox"}},{"cell_type":"code","source":["joint_angles = torch.tensor(X_test[['j0', 'j1', 'j2']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)"],"metadata":{"id":"lAXaxA_jpppP","executionInfo":{"status":"ok","timestamp":1733399543526,"user_tz":-60,"elapsed":244,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"8pnJtyoaICiD","executionInfo":{"status":"ok","timestamp":1733399546825,"user_tz":-60,"elapsed":1125,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"09e68945-cf9f-4dad-fb2e-dccc34ea61bc"},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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HvNa7/D5fJSWlvL000+zbt06wuEw7777Lvn5+dy4ccPKW7p0KR6PB5/PR19fH8uXLyc9PZ2BgQECgQB79+6lvLycr7/+mjfffJPKykrKysoAOHDgAIWFhVRXV/PJJ5+M21pERP5ttDMmIiL3XUNDA88++yytra1s2bKFLVu20NvbS3V1NV9++aX1ZdDz5s3jyJEj2Gw2Xn/9dZqamli/fj2vvfbauNRlt9tpa2vjhx9+YOvWrZw9exav15t0N2m07Oxsent7cbvdNDc3U1NTw969ewmHw7zzzjvjUusdK1asIBAIEI1G2bZtG83Nzezfv9868jlaU1MTfr+fn376idraWrZt28bnn39ORUUFS5YsIRqN4nK5eOihh9izZ4913Zw5c/D5fAQCATVjIiJjyGbG4u5lERGR/3OVlZUcOXIkbjdJRERkPGlnTEREREREJAXUjImIiIiIiKSAmjEREREREZEU0D1jIiIiIiIiKaCdMRERERERkRRQMyYiIiIiIpICasZERERERERSQM2YiIiIiIhICqgZExERERERSQE1YyIiIiIiIimgZkxERERERCQF1IyJiIiIiIikwO9ELh5cKooRxAAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"yjZ-Z919pmWX","executionInfo":{"status":"ok","timestamp":1733399566287,"user_tz":-60,"elapsed":618,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"b6fc3333-2a61-4a39-8d43-343af8cf7149"},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA00AAAIRCAYAAACWOFYUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABqn0lEQVR4nO3deXhTZdrH8d9J0qYLtIUuFChrXUCWIqsMakEY2dxFRtER3EcRF8Z9XhEdFRV1mHHcdcAZF1xGnRkVHURgFFAEisiOUJCtQqu0dqFtkuf9ozZtSJuuNA39fq6Li9P7PDnnvvMkae6ekxPLGGMEAAAAAKiSLdgJAAAAAEBzRtMEAAAAAAHQNAEAAABAADRNAAAAABAATRMAAAAABEDTBAAAAAAB0DQBAAAAQAA0TQAAAAAQgCPYCTQ1j8ejffv2qXXr1rIsK9jpAAAAAAgSY4x+/vlndejQQTZb9ceTWlzTtG/fPnXq1CnYaQAAAABoJnbv3q2UlJRq17e4pql169aSyu6YmJiYIGcDAE2stFSaO7ds+YorpLCw4OYDAEAQ5eXlqVOnTt4eoTqWMcY0UU7NQl5enmJjY5Wbm0vTBKDlKSiQWrUqW87Pl6Kjg5sPAABBVNvegAtBAAAAAEAANE0AAAAAEABNEwAAAAAEQNMEAAAAAAG0uKvnAQAAoPbcbrdKS0uDnQZQJw6HQ3a7vdG+l5WmCQAAAH6MMcrKytKhQ4eCnQpQL3a7XUlJSYqNjW1w80TTBAAtidMpffBBxTIAVKO8YUpKSlJUVFSj/cUeONqMMXK5XMrLy9P+/ftVVFSk9u3bN2ibNE0A0JI4HNL48cHOAkAz53a7vQ1TfHx8sNMB6qV169ZyOp3Kzs5WUlKS7HZ7vbfFhSAAAADgo/wzTFFRUUHOBGiY6OhoGWMa/Lk8jjQBQEtSWiq99lrZ8qWXSmFhwc0HQLPGKXkIdVwIAgBQdyUl0hVXlC1fdBFNEwAAtcDpeQAAAAAQAE0TAAAA0AS6du2qKVOmeH9esmSJLMvSkiVLgpYTaoemCQAAAC3GvHnzZFmWLMvSF1984bfeGKNOnTrJsiydddZZQcjw6Dh06JCuvfZaJSYmKjo6WiNGjNCaNWtqfftNmzZpzJgxatWqldq2bavf/va3OnjwoN+47777ThMmTFCbNm0UFRWlU089VYsXL/YbVz4HVf379a9/7R23efNm3XHHHerXr59at26t9u3ba/z48Vq1alX97oh64jNNAAAAaHEiIiL0+uuv69RTT/WJL126VHv27JGzCb7L7vTTT1dRUZHCw8OP6n48Ho/Gjx+vb775RrfffrsSEhL0zDPPaPjw4Vq9erWOP/74gLffs2ePTj/9dMXGxurhhx9Wfn6+Hn/8cX377bdauXKlN//du3dr6NChstvtuv322xUdHa25c+fqzDPP1KJFi3T66ad7t/mPf/zDbz+rVq3Sn//8Z5155pne2EsvvaSXX35ZF154oW644Qbl5ubq+eef1ymnnKKPP/5Yo0aNaqR7qQamGVm6dKk566yzTPv27Y0k895773nXlZSUmDvuuMP07t3bREVFmfbt25vf/va3Zu/evXXaR25urpFkcnNzGzl7AAgB+fnGSGX/8vODnQ2AZqqoqMhs3LjRFBUVBTuVRjd37lwjyVxwwQUmISHBlJaW+qy/5pprzIABA0yXLl3M+PHjG3XfXbp0MZMnT27UbdbGm2++aSSZt99+2xs7cOCAiYuLM5dcckmNt7/++utNZGSk2bVrlze2cOFCI8k8//zz3tgNN9xgHA6H2bx5szdWUFBgOnXqZPr371/jfq666ipjWZbZvXu3N7Zq1Srz888/+4zLzs42iYmJZtiwYTVus6bHcm17g2Z1el5BQYHS0tL09NNP+60rLCzUmjVrdO+992rNmjV69913tWXLFp1zzjlByBQAAACh7JJLLlFOTo4WLlzojZWUlOidd97RpEmTqryNx+PRnDlz1KtXL0VERKhdu3a67rrr9NNPP/mMM8bowQcfVEpKiqKiojRixAht2LDBb3tVfabp888/10UXXaTOnTvL6XSqU6dOuvXWW1VUVORz29LSUm3evFn79++vsdZ33nlH7dq10wUXXOCNJSYmauLEifrXv/6l4uLigLf/5z//qbPOOkudO3f2xkaNGqUTTjhBb731lk/uJ598sk488URvLCoqSuecc47WrFmjbdu2VbuP4uJi/fOf/1R6erpSUlK88QEDBqhVq1Y+Y+Pj43Xaaadp06ZNNdbeWJpV0zR27Fg9+OCDOv/88/3WxcbGauHChZo4caJOPPFEnXLKKfrrX/+q1atX6/vvvw9CtgAQgpxO6a23yv41waknANBcde3aVUOHDtUbb7zhjS1YsEC5ubm6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V1/p3nvv1Xvvvee9NnpkZKRGjx6t+++/v9GPNAEAAABAU2rwl9v27t1b7733njwej/cLqBITE6u8RCAAAAAAhJoGN03lbDabIiIi1KpVKxomAGimSu0Rmn7qSu8yAACoWYO7m1WrVmnMmDGKiopSfHy8li5dKknKzs7WueeeqyVLljR0FwCARuKx7NoWN0jb4gbJY1X9RYAAAMBXg5qm5cuX69RTT9W2bdt02WWXyePxeNclJCQoNzdXzz//fIOTBAAAAIBgaVDTdM8996hnz57auHGjHn74Yb/1I0aM0FdffdWQXQAAGpHDU6Lzt8/W+dtny+EpCXY6AACEhAY1TV9//bWuuOIKOZ1OWZblt75jx47KyspqyC4AAI3I7inVlZvu0JWb7pDdUxrsdAAACAkNaprCwsJ8Tsk70t69e9WqVauG7AIAAAAAgqpBTdMpp5yid955p8p1BQUFmjt3rtLT0xuyCwAAAAAIqgY1Tffff79WrVql8ePHa8GCBZKkb775Ri+99JIGDBiggwcP6t57722URAEAAAAgGBr0PU1DhgzRRx99pOuvv16XX365JOn3v/+9JCk1NVUfffSR+vbt2/AsAQAAACBI6t00GWP0888/61e/+pW2bNmitWvXatu2bfJ4PEpNTdWAAQOqvDgEAAAAAISSejdNJSUlatu2rR5++GHdcccd6tevn/r169eIqQEAAABA8NW7aXI6nUpOTpbT6WzMfAAAR1GpPUJ3n7LYuwwAAGrWoAtBTJkyRX//+99VUsIXJAJAKPBYdq1PGK71CcPlsezBTgcAgJDQoAtB9OnTR++//7569eqlKVOmqGvXroqMjPQbd8EFFzRkNwAAAAAQNA1qmi655BLvcnWXFrcsS263uyG7AQA0ErunVKO/f0GS9Enna+W2hQU5IwAAmr86N0333HOPLr74YvXt21eLFy8+GjkBAI4Sh6dE16+/UZK0KGUKTRMAALVQ56bpkUceUe/evdW3b1+lp6crJydHSUlJWrhwoc4444yjkSMAAAAABE2DLgRRzhjTGJsBAAAAgGanUZomAAAAADhW0TQBAAAAQAD1unrezp07tWbNGklSbm6uJGnbtm2Ki4urcnz//v3rlx0AAAAABFm9mqZ7773X7xLjN9xwg984YwyXHAcAAAAQ0urcNM2dO/do5AEAaAKlNqfuH/SBdxkA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7xiPx2Puvfde065dO+N0Os3IkSP95iRU3ktZxhhzNI9kAQAAAEAo4zNNAAAAABAATRMAAAAABEDTBAAAAAAB0DQBAAAAQAA0TQAAAAAQAE0TAAAAAARA0wQAAAAAAdA0AQAabNy4cbrmmmuadJ8zZ86UZVnKzs5u0v1K0s6dO2VZlubNm9fk+w41d911l4YMGRLsNACgQWiaAKAZmDdvnizLqvbfl19+GewUq7Vs2TL997//1Z133umNLVmypNpaLr744iBmG9rK78MnnnjCb135Y2jVqlVByKx6t9xyi7755hv9+9//DnYqAFBvjmAnAACo8MADD6hbt25+8eOOOy4I2dTO7NmzNXLkyCpzvOmmmzRo0CCfWNeuXZsos6OnS5cuKioqUlhYWFD2P3v2bF1//fWKiooKyv7rIjk5Weeee64ef/xxnXPOOcFOBwDqhaYJAJqRsWPHauDAgXW6jcvlksfjUXh4uN+6goICRUdH1zsfY4wOHz6syMjIKtcfOHBAH374oZ577rkq15922mmaMGFCrfYVqI7mxrIsRUREBGXf/fr109q1a/Xcc89p+vTpR20/DX3sVDZx4kRddNFF2rFjh7p3794o2wSApsTpeQAQQso/S/P4449rzpw5Sk1NldPp1MaNG72f8dm4caMmTZqkNm3a6NRTT5VU1pD88Y9/9I7v2rWr7rnnHhUXF/tsv2vXrjrrrLP0ySefaODAgYqMjNTzzz9fbT4ffvihXC6XRo0a1Wh1SNJnn32m0047TdHR0YqLi9O5556rTZs2Vbmt7OxsTZw4UTExMYqPj9fNN9+sw4cP+4179dVXNWDAAEVGRqpt27a6+OKLtXv3bp8xw4cPV+/evbVx40aNGDFCUVFR6tixox577LEq86/8mabhw4dr+PDhfvudMmWK39G1+fPna8CAAWrdurViYmLUp08f/fnPf67FPScNGzZMZ5xxhh577DEVFRXVOL4292Wgx075Y2LJkiXex0SfPn20ZMkSSdK7776rPn36KCIiQgMGDFBGRoZfDuWPj3/961+1qhEAmhuONAFAM5Kbm+t3YQPLshQfH+8Tmzt3rg4fPqxrr71WTqdTbdu29a676KKLdPzxx+vhhx+WMUaSdPXVV+uVV17RhAkT9Pvf/15fffWVZs2apU2bNum9997z2faWLVt0ySWX6LrrrtM111yjE088sdp8ly9frvj4eHXp0qXK9T///LNfPZVzraqOTz/9VGPHjlX37t01c+ZMFRUV6amnntKwYcO0Zs0avwZk4sSJ6tq1q2bNmqUvv/xSf/nLX/TTTz/p73//u3fMQw89pHvvvVcTJ07U1VdfrYMHD+qpp57S6aefroyMDMXFxXnH/vTTTxozZowuuOACTZw4Ue+8847uvPNO9enTR2PHjq32vqithQsX6pJLLtHIkSP16KOPSpI2bdqkZcuW6eabb67VNmbOnKnTTz9dzz77bMCjTXW9L6t67EjSd999p0mTJum6667TZZddpscff1xnn322nnvuOd1zzz264YYbJEmzZs3SxIkTtWXLFtlsFX+XjY2NVWpqqpYtW6Zbb721tncVADQfBgAQdHPnzjWSqvzndDq94zIzM40kExMTYw4cOOCzjfvuu89IMpdccolPfO3atUaSufrqq33it912m5FkPvvsM2+sS5cuRpL5+OOPa5X3qaeeagYMGOAXX7x4cbX1ZGZmBqyjX79+JikpyeTk5Hhj33zzjbHZbObyyy/3q/ecc87xuf0NN9xgJJlvvvnGGGPMzp07jd1uNw899JDPuG+//dY4HA6feHp6upFk/v73v3tjxcXFJjk52Vx44YXeWHn+c+fO9bltenq6330xefJk06VLF+/PN998s4mJiTEul8tvbE0kmalTpxpjjBkxYoRJTk42hYWFxpiKx9DXX3/tHV/X+/LIx44xFY+J5cuXe2OffPKJkWQiIyPNrl27vPHnn3/eSDKLFy/2286ZZ55pevbsWeeaAaA54PQ8AGhGnn76aS1cuNDn34IFC/zGXXjhhUpMTKxyG7/73e98fv7oo48kye+IxO9//3tJZafYVdatWzeNHj26Vvnm5OSoTZs21a6fMWOGXz3JycnV1rF//36tXbtWU6ZM8Tki1bdvX/3617/21lLZ1KlTfX6eNm2apIq63333XXk8Hk2cOFHZ2dnef8nJyTr++OO1ePFin9u3atVKl112mffn8PBwDR48WDt27KjNXVKjuLg4FRQUaOHChQ3azsyZM5WVlVXt58nqc18e+dgpd9JJJ2no0KHen8svIX7GGWeoc+fOfvGq7qs2bdoE5fLwANAYOD0PAJqRwYMH1+pCEFVdYa+6dbt27ZLNZvO7ul1ycrLi4uK0a9euWm+7KqbSaVxH6tOnT8DPO1WVq6QqTwns2bOnPvnkE78LFBx//PE+41JTU2Wz2bRz505J0rZt22SM8RtX7sgr4KWkpMiyLJ9YmzZttG7dumrrqIsbbrhBb731lsaOHauOHTvqzDPP1MSJEzVmzJg6bef000/XiBEj9Nhjj1XZ7NTnvqxu7is3RlLZ6XaS1KlTpyrjP/30k982jDF+9ysAhAqaJgAIQdVdzS7Qutq+YQ207SPFx8dX+Qa5tuqyr9o6sk6PxyPLsrRgwQLZ7Xa/8a1atfL5uaoxUuDmsHy/VY1xu90+PyclJWnt2rX65JNPtGDBAi1YsEBz587V5ZdfrldeeSXgPo503333afjw4Xr++ed9PpdVX9XNR3X3SV3uq59++kkJCQn1Tw4AgoimCQCOcV26dJHH49G2bdvUs2dPb/yHH37QoUOHqr2IQ2306NFD//znPxsjTUny5rJlyxa/dZs3b1ZCQoLfZbC3bdvmc4Tku+++k8fj8V7kIDU1VcYYdevWTSeccEKj5XqkNm3aVHla2pFH8qSyU/7OPvtsnX322fJ4PLrhhhv0/PPP6957763Td3Klp6dr+PDhevTRRzVjxgyfdfW5L4+mzMxMpaWlNdn+AKAx8ZkmADjGjRs3TpI0Z84cn/iTTz4pSRo/fny9tz106FD99NNPjfZ5n/bt26tfv3565ZVXdOjQIW98/fr1+u9//+utpbKnn37a5+ennnpKkrxXurvgggtkt9t1//33+x0BMcYoJyenUXJPTU3V5s2bdfDgQW/sm2++0bJly3zGHbk/m82mvn37SpLfJeBro/yzTS+88IJPvD735dGSm5ur7du361e/+lWT7RMAGhNHmgCgGVmwYIE2b97sF//Vr35V7y8FTUtL0+TJk/XCCy/o0KFDSk9P18qVK/XKK6/ovPPO04gRI+qd7/jx4+VwOPTpp5/q2muvrfd2Kps9e7bGjh2roUOH6qqrrvJeJjs2NlYzZ870G5+ZmalzzjlHY8aM0YoVK/Tqq69q0qRJ3qMaqampevDBB3X33Xdr586dOu+889S6dWtlZmbqvffe07XXXqvbbrutwXlfeeWVevLJJzV69GhdddVVOnDggJ577jn16tVLeXl53nFXX321fvzxR51xxhlKSUnRrl279NRTT6lfv34+RwJrKz09Xenp6Vq6dKnfurrel0fLp59+KmOMzj333CbbJwA0JpomAGhGjjzFqtzcuXPr3TRJ0ksvvaTu3btr3rx5eu+995ScnKy7775b9913X723KUnt2rXTuHHj9NZbbzVa0zRq1Ch9/PHHuu+++zRjxgyFhYUpPT1djz76aJUXKnjzzTc1Y8YM3XXXXXI4HLrxxhs1e/ZsnzF33XWXTjjhBP3pT3/S/fffL6nsIgZnnnmmzjnnnEbJu2fPnvr73/+uGTNmaPr06TrppJP0j3/8Q6+//rr3i2Al6bLLLtMLL7ygZ555RocOHVJycrJ+85vfaObMmT7fbVQXM2fOrLL5ret9ebS8/fbbOvXUU5Wamtpk+wSAxmSZmj7ZCgBAAJ9//rmGDx+uzZs3V3uFOrRcWVlZ6tatm+bPn8+RJgAhi6YJANBgY8eOVUpKil588cVgp4Jm5q677tJnn32mlStXBjsVAKg3miYAAAAACICr5wEAAABAADRNAAAAABAATRMAAAAABEDTBAAAAAAB0DQBAAAAQAA0TQAAAAAQAE0TAAAAAARA0wQAAAAAAdA0AQAAAEAANE0AAAAAEABNEwAAAAAE8P+qlE2CeHByswAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"uYChzTEEINDJ","executionInfo":{"status":"ok","timestamp":1733399604423,"user_tz":-60,"elapsed":2237,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"e3596d0c-ac8a-47d8-cef4-88ccff57fb7f"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"tPn1dcD1qtAA","executionInfo":{"status":"ok","timestamp":1733399607071,"user_tz":-60,"elapsed":952,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"423743eb-4874-4952-e031-41d8fd9fcb4f"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Inverse Kinematics"],"metadata":{"id":"oXwk-fblWM-O"}},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=70000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n","\n"],"metadata":{"id":"2y5EfHN8Webh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/10K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()\n","\n","initial_joints = torch.tensor([0.0, np.pi/4, 0.0], requires_grad=True)\n","#target_position = torch.tensor([-0.1, -0.1])\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QXAe4UlsWwTu","executionInfo":{"status":"ok","timestamp":1733177502448,"user_tz":-60,"elapsed":117035,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"97a65da8-883f-4d2d-de4d-14bd902f295d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([ 0.2260, -0.0420])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.20108477771282196\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.8148,  0.9021,  0.4751])\n","Levenberg-Marquardt Error: 0.03062209114432335\n"," \n","--------------------------------------\n","Comparison target: tensor([ 0.2260, -0.0420]) Value computed by Newton-Raphson Method:  tensor([0.2214, 0.1590])\n","Comparison target: tensor([ 0.2260, -0.0420]) Value computed by Levenberg Marquardt:  tensor([ 0.2272, -0.0114])\n"]}]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error  # `error` ora è garantito essere `torch.float32`\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.0, np.pi/4, 0.0]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a11nk24cd86l","executionInfo":{"status":"ok","timestamp":1733177360420,"user_tz":-60,"elapsed":314,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"e4522c94-8711-4047-9da6-7a7a9f1b276a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([-0.2240,  0.0710])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.486985594374507\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([1.7951, 1.3034, 0.1783])\n","Levenberg-Marquardt Error: 9.986994231865048e-05\n","--------------------------------------\n","Comparison target: tensor([-0.2240,  0.0710]) Value computed by Newton-Raphson Method:  tensor([0.2601, 0.1240], dtype=torch.float64)\n","Comparison target: tensor([-0.2240,  0.0710]) Value computed by Levenberg-Marquardt Method:  tensor([-0.2239,  0.0710], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","metadata":{"id":"J1jWd2_7XacU"},"source":["# 1K\n","What we have done so fa is train the 5 model, the first time with 100K samples and second time with 10K sample, now we have the challenge to learn Forward Kinematics and Jacobian with only 1K samples that correspond 0.1% of the all orginal dataset"]},{"cell_type":"markdown","metadata":{"id":"vpUOwlMmYDdG"},"source":["## Dataset\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2664,"status":"ok","timestamp":1733527979533,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"nAH6pjJ6YNYJ","outputId":"334deed6-8780-4338-860e-cc5ca2512ab4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset Shape before: (100000, 5)\n","Dataset Shape after: (1000, 5)\n","Training set size: 600\n","Validation set size: 200\n","Test set size: 200\n"]}],"source":["# Create a Reduced Dataset\n","df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/LOG_FILE_FULL_R3.csv\",sep=';')\n","df_filtered = df[['j0', 'j1', 'j2', 'ft_x', 'ft_y']]\n","\n","# Calculate the number of rows to keep (10% of the original dataset)\n","n_keep = int(len(df_filtered) * 0.01)\n","\n","# Randomly sample 10% of the rows\n","df_reduced_filtered = df_filtered.sample(n=n_keep, random_state=42)\n","\n","# Reset the index\n","df_reduced_filtered.reset_index(drop=True, inplace=True)\n","\n","print(f\"Dataset Shape before: {df_filtered.shape}\")\n","print(f\"Dataset Shape after: {df_reduced_filtered.shape}\")\n","\n","# Define features (X) and target (Y)\n","X = df_reduced_filtered[['j0', 'j1', 'j2']]\n","y = df_reduced_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":648,"status":"ok","timestamp":1733177536886,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"7Yi-jH7vbn6Q","outputId":"24584bd0-605b-4283-9322-3da29cccf88c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","plt.scatter(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')  # Mantieni proporzioni reali per x e y\n","plt.show()"]},{"cell_type":"code","source":["heatmap, xedges, yedges = np.histogram2d(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], bins=50)\n","\n","# Visualizzazione della heatmap\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"ifW-PX25cjWa","executionInfo":{"status":"ok","timestamp":1733177788048,"user_tz":-60,"elapsed":1581,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"c1cf7d06-3f9d-42f7-b1ea-44ac5c620c1a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"tG_zuPO6bSbE"},"source":["## Model train and test"]},{"cell_type":"code","execution_count":66,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11577,"status":"ok","timestamp":1733399634995,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"UN9ZrZgebSCJ","outputId":"093b2e64-75d2-42f3-f440-4ae43791e03e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.14568780141901888, R2: 0.08015724840307992\n"," \n","--------------------------------------------------------------\n"," \n","Decision Tree RMSE: 0.05541490212478041, R2: 0.8658773691550652\n"," \n","--------------------------------------------------------------\n"," \n","SVR Best Params: {'estimator__C': 1, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 100}\n","SVR RMSE: 0.024777871187088303, R2: 0.9726252349555102\n"," \n","--------------------------------------------------------------\n"," \n","Random Forest Best Params: {'estimator__max_depth': 15, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.03775213385496083, R2: 0.9381900941723958\n"," \n","--------------------------------------------------------------\n"," \n","KNN Best Params: {'estimator__n_neighbors': 5, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.02616782082571677, R2: 0.9703079121748439\n"," \n","--------------------------------------------------------------\n"," \n"]}],"source":["#-------------------------Linear Regression-------------------------\n","\n","# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)\n","\n","# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# ----------------------Decision tree regressor-------------------------\n","\n","# train\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [10, 20, 25]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)\n","\n","# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# -----------------------------SVR-----------------------------\n","\n","# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [100]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)\n","\n","\n","# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#---------------------------Random Forest--------------------------\n","\n","# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [10, 15]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)\n","\n","\n","#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#------------------------------------KNN---------------------------------------\n","\n","# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)\n","\n","#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"JVa0Brp5hLka","executionInfo":{"status":"ok","timestamp":1733527991767,"user_tz":-60,"elapsed":235,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"f9Ldmo5lhgBO","executionInfo":{"status":"ok","timestamp":1733527992386,"user_tz":-60,"elapsed":254,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 3  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)\n","        return x"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"EX9qYbFYhtCw","executionInfo":{"status":"ok","timestamp":1733527999685,"user_tz":-60,"elapsed":244,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001],\n","    'hidden_sizes': [[8, 16, 32, 16, 8], [16, 32, 64, 32, 16], [32, 64, 80, 64, 32]],\n","    'optimizer': ['Adam', 'SGD']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 100\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40346,"status":"ok","timestamp":1733528042328,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"zxQjJ8H_hyYH","outputId":"8978d787-61dc-4ddd-97c3-167c6fa6f883"},"outputs":[{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.1125, Validation Loss: 0.0951\n","Epoch [2/100], Training Loss: 0.0931, Validation Loss: 0.0788\n","Epoch [3/100], Training Loss: 0.0774, Validation Loss: 0.0638\n","Epoch [4/100], Training Loss: 0.0632, Validation Loss: 0.0480\n","Epoch [5/100], Training Loss: 0.0479, Validation Loss: 0.0327\n","Epoch [6/100], Training Loss: 0.0332, Validation Loss: 0.0226\n","Epoch [7/100], Training Loss: 0.0237, Validation Loss: 0.0252\n","Epoch [8/100], Training Loss: 0.0266, Validation Loss: 0.0325\n","Epoch [9/100], Training Loss: 0.0338, Validation Loss: 0.0308\n","Epoch [10/100], Training Loss: 0.0322, Validation Loss: 0.0254\n","Epoch [11/100], Training Loss: 0.0267, Validation Loss: 0.0214\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  19%|█▉        | 19/100 [00:00<00:01, 48.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0226, Validation Loss: 0.0199\n","Epoch [13/100], Training Loss: 0.0210, Validation Loss: 0.0199\n","Epoch [14/100], Training Loss: 0.0210, Validation Loss: 0.0204\n","Epoch [15/100], Training Loss: 0.0216, Validation Loss: 0.0211\n","Epoch [16/100], Training Loss: 0.0224, Validation Loss: 0.0215\n","Epoch [17/100], Training Loss: 0.0228, Validation Loss: 0.0212\n","Epoch [18/100], Training Loss: 0.0227, Validation Loss: 0.0204\n","Epoch [19/100], Training Loss: 0.0219, Validation Loss: 0.0193\n","Epoch [20/100], Training Loss: 0.0207, Validation Loss: 0.0183\n","Epoch [21/100], Training Loss: 0.0196, Validation Loss: 0.0175\n","Epoch [22/100], Training Loss: 0.0188, Validation Loss: 0.0171\n","Epoch [23/100], Training Loss: 0.0184, Validation Loss: 0.0168\n","Epoch [24/100], Training Loss: 0.0183, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  31%|███       | 31/100 [00:00<00:01, 52.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0182, Validation Loss: 0.0164\n","Epoch [26/100], Training Loss: 0.0181, Validation Loss: 0.0162\n","Epoch [27/100], Training Loss: 0.0181, Validation Loss: 0.0160\n","Epoch [28/100], Training Loss: 0.0181, Validation Loss: 0.0157\n","Epoch [29/100], Training Loss: 0.0178, Validation Loss: 0.0153\n","Epoch [30/100], Training Loss: 0.0173, Validation Loss: 0.0149\n","Epoch [31/100], Training Loss: 0.0168, Validation Loss: 0.0147\n","Epoch [32/100], Training Loss: 0.0164, Validation Loss: 0.0145\n","Epoch [33/100], Training Loss: 0.0162, Validation Loss: 0.0144\n","Epoch [34/100], Training Loss: 0.0159, Validation Loss: 0.0141\n","Epoch [35/100], Training Loss: 0.0157, Validation Loss: 0.0138\n","Epoch [36/100], Training Loss: 0.0155, Validation Loss: 0.0135\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0153, Validation Loss: 0.0133\n","Epoch [38/100], Training Loss: 0.0151, Validation Loss: 0.0132\n","Epoch [39/100], Training Loss: 0.0149, Validation Loss: 0.0130\n","Epoch [40/100], Training Loss: 0.0147, Validation Loss: 0.0130\n","Epoch [41/100], Training Loss: 0.0145, Validation Loss: 0.0129\n","Epoch [42/100], Training Loss: 0.0144, Validation Loss: 0.0128\n","Epoch [43/100], Training Loss: 0.0143, Validation Loss: 0.0125\n","Epoch [44/100], Training Loss: 0.0141, Validation Loss: 0.0123\n","Epoch [45/100], Training Loss: 0.0139, Validation Loss: 0.0121\n","Epoch [46/100], Training Loss: 0.0138, Validation Loss: 0.0120\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  55%|█████▌    | 55/100 [00:01<00:00, 50.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0137, Validation Loss: 0.0121\n","Epoch [48/100], Training Loss: 0.0137, Validation Loss: 0.0121\n","Epoch [49/100], Training Loss: 0.0136, Validation Loss: 0.0121\n","Epoch [50/100], Training Loss: 0.0135, Validation Loss: 0.0120\n","Epoch [51/100], Training Loss: 0.0134, Validation Loss: 0.0118\n","Epoch [52/100], Training Loss: 0.0133, Validation Loss: 0.0117\n","Epoch [53/100], Training Loss: 0.0132, Validation Loss: 0.0117\n","Epoch [54/100], Training Loss: 0.0131, Validation Loss: 0.0117\n","Epoch [55/100], Training Loss: 0.0130, Validation Loss: 0.0117\n","Epoch [56/100], Training Loss: 0.0130, Validation Loss: 0.0116\n","Epoch [57/100], Training Loss: 0.0128, Validation Loss: 0.0115\n","Epoch [58/100], Training Loss: 0.0127, Validation Loss: 0.0113\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  66%|██████▌   | 66/100 [00:01<00:00, 48.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0126, Validation Loss: 0.0112\n","Epoch [60/100], Training Loss: 0.0125, Validation Loss: 0.0111\n","Epoch [61/100], Training Loss: 0.0123, Validation Loss: 0.0111\n","Epoch [62/100], Training Loss: 0.0123, Validation Loss: 0.0110\n","Epoch [63/100], Training Loss: 0.0121, Validation Loss: 0.0108\n","Epoch [64/100], Training Loss: 0.0120, Validation Loss: 0.0106\n","Epoch [65/100], Training Loss: 0.0119, Validation Loss: 0.0105\n","Epoch [66/100], Training Loss: 0.0117, Validation Loss: 0.0105\n","Epoch [67/100], Training Loss: 0.0116, Validation Loss: 0.0104\n","Epoch [68/100], Training Loss: 0.0115, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  76%|███████▌  | 76/100 [00:01<00:00, 44.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0113, Validation Loss: 0.0101\n","Epoch [70/100], Training Loss: 0.0112, Validation Loss: 0.0100\n","Epoch [71/100], Training Loss: 0.0111, Validation Loss: 0.0099\n","Epoch [72/100], Training Loss: 0.0109, Validation Loss: 0.0098\n","Epoch [73/100], Training Loss: 0.0108, Validation Loss: 0.0097\n","Epoch [74/100], Training Loss: 0.0106, Validation Loss: 0.0095\n","Epoch [75/100], Training Loss: 0.0104, Validation Loss: 0.0093\n","Epoch [76/100], Training Loss: 0.0103, Validation Loss: 0.0091\n","Epoch [77/100], Training Loss: 0.0101, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0099, Validation Loss: 0.0088\n","Epoch [79/100], Training Loss: 0.0097, Validation Loss: 0.0087\n","Epoch [80/100], Training Loss: 0.0095, Validation Loss: 0.0085\n","Epoch [81/100], Training Loss: 0.0093, Validation Loss: 0.0083\n","Epoch [82/100], Training Loss: 0.0090, Validation Loss: 0.0081\n","Epoch [83/100], Training Loss: 0.0088, Validation Loss: 0.0079\n","Epoch [84/100], Training Loss: 0.0086, Validation Loss: 0.0077\n","Epoch [85/100], Training Loss: 0.0084, Validation Loss: 0.0075\n","Epoch [86/100], Training Loss: 0.0081, Validation Loss: 0.0073\n","Epoch [87/100], Training Loss: 0.0079, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  98%|█████████▊| 98/100 [00:02<00:00, 48.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0076, Validation Loss: 0.0069\n","Epoch [89/100], Training Loss: 0.0074, Validation Loss: 0.0067\n","Epoch [90/100], Training Loss: 0.0072, Validation Loss: 0.0065\n","Epoch [91/100], Training Loss: 0.0069, Validation Loss: 0.0063\n","Epoch [92/100], Training Loss: 0.0067, Validation Loss: 0.0061\n","Epoch [93/100], Training Loss: 0.0064, Validation Loss: 0.0059\n","Epoch [94/100], Training Loss: 0.0062, Validation Loss: 0.0057\n","Epoch [95/100], Training Loss: 0.0059, Validation Loss: 0.0054\n","Epoch [96/100], Training Loss: 0.0057, Validation Loss: 0.0052\n","Epoch [97/100], Training Loss: 0.0055, Validation Loss: 0.0050\n","Epoch [98/100], Training Loss: 0.0052, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 100/100 [00:02<00:00, 46.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0050, Validation Loss: 0.0046\n","Epoch [100/100], Training Loss: 0.0048, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0792, Validation Loss: 0.0717\n","Epoch [2/100], Training Loss: 0.0776, Validation Loss: 0.0702\n","Epoch [3/100], Training Loss: 0.0761, Validation Loss: 0.0688\n","Epoch [4/100], Training Loss: 0.0747, Validation Loss: 0.0675\n","Epoch [5/100], Training Loss: 0.0732, Validation Loss: 0.0662\n","Epoch [6/100], Training Loss: 0.0719, Validation Loss: 0.0649\n","Epoch [7/100], Training Loss: 0.0705, Validation Loss: 0.0637\n","Epoch [8/100], Training Loss: 0.0693, Validation Loss: 0.0625\n","Epoch [9/100], Training Loss: 0.0680, Validation Loss: 0.0613\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   7%|▋         | 7/100 [00:00<00:01, 68.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0668, Validation Loss: 0.0602\n","Epoch [11/100], Training Loss: 0.0656, Validation Loss: 0.0591\n","Epoch [12/100], Training Loss: 0.0645, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 20/100 [00:00<00:01, 56.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0634, Validation Loss: 0.0570\n","Epoch [14/100], Training Loss: 0.0623, Validation Loss: 0.0561\n","Epoch [15/100], Training Loss: 0.0613, Validation Loss: 0.0551\n","Epoch [16/100], Training Loss: 0.0603, Validation Loss: 0.0542\n","Epoch [17/100], Training Loss: 0.0593, Validation Loss: 0.0533\n","Epoch [18/100], Training Loss: 0.0584, Validation Loss: 0.0524\n","Epoch [19/100], Training Loss: 0.0574, Validation Loss: 0.0516\n","Epoch [20/100], Training Loss: 0.0566, Validation Loss: 0.0508\n","Epoch [21/100], Training Loss: 0.0557, Validation Loss: 0.0500\n","Epoch [22/100], Training Loss: 0.0549, Validation Loss: 0.0492\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 20/100 [00:00<00:01, 56.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0540, Validation Loss: 0.0485\n","Epoch [24/100], Training Loss: 0.0533, Validation Loss: 0.0478\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 32/100 [00:00<00:01, 56.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0525, Validation Loss: 0.0471\n","Epoch [26/100], Training Loss: 0.0517, Validation Loss: 0.0464\n","Epoch [27/100], Training Loss: 0.0510, Validation Loss: 0.0457\n","Epoch [28/100], Training Loss: 0.0503, Validation Loss: 0.0451\n","Epoch [29/100], Training Loss: 0.0496, Validation Loss: 0.0444\n","Epoch [30/100], Training Loss: 0.0490, Validation Loss: 0.0438\n","Epoch [31/100], Training Loss: 0.0483, Validation Loss: 0.0433\n","Epoch [32/100], Training Loss: 0.0477, Validation Loss: 0.0427\n","Epoch [33/100], Training Loss: 0.0471, Validation Loss: 0.0421\n","Epoch [34/100], Training Loss: 0.0465, Validation Loss: 0.0416\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0459, Validation Loss: 0.0411\n","Epoch [36/100], Training Loss: 0.0454, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  46%|████▌     | 46/100 [00:00<00:00, 60.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0448, Validation Loss: 0.0401\n","Epoch [38/100], Training Loss: 0.0443, Validation Loss: 0.0396\n","Epoch [39/100], Training Loss: 0.0438, Validation Loss: 0.0391\n","Epoch [40/100], Training Loss: 0.0432, Validation Loss: 0.0386\n","Epoch [41/100], Training Loss: 0.0428, Validation Loss: 0.0382\n","Epoch [42/100], Training Loss: 0.0423, Validation Loss: 0.0378\n","Epoch [43/100], Training Loss: 0.0418, Validation Loss: 0.0373\n","Epoch [44/100], Training Loss: 0.0414, Validation Loss: 0.0369\n","Epoch [45/100], Training Loss: 0.0409, Validation Loss: 0.0365\n","Epoch [46/100], Training Loss: 0.0405, Validation Loss: 0.0362\n","Epoch [47/100], Training Loss: 0.0401, Validation Loss: 0.0358\n","Epoch [48/100], Training Loss: 0.0397, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  46%|████▌     | 46/100 [00:00<00:00, 60.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0393, Validation Loss: 0.0351\n","Epoch [50/100], Training Loss: 0.0389, Validation Loss: 0.0347\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0385, Validation Loss: 0.0344\n","Epoch [52/100], Training Loss: 0.0381, Validation Loss: 0.0341\n","Epoch [53/100], Training Loss: 0.0378, Validation Loss: 0.0337\n","Epoch [54/100], Training Loss: 0.0374, Validation Loss: 0.0334\n","Epoch [55/100], Training Loss: 0.0371, Validation Loss: 0.0331\n","Epoch [56/100], Training Loss: 0.0368, Validation Loss: 0.0328\n","Epoch [57/100], Training Loss: 0.0365, Validation Loss: 0.0326\n","Epoch [58/100], Training Loss: 0.0362, Validation Loss: 0.0323\n","Epoch [59/100], Training Loss: 0.0359, Validation Loss: 0.0320\n","Epoch [60/100], Training Loss: 0.0356, Validation Loss: 0.0318\n","Epoch [61/100], Training Loss: 0.0353, Validation Loss: 0.0315\n","Epoch [62/100], Training Loss: 0.0350, Validation Loss: 0.0313\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 60/100 [00:01<00:00, 65.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [63/100], Training Loss: 0.0347, Validation Loss: 0.0310\n","Epoch [64/100], Training Loss: 0.0344, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 74/100 [00:01<00:00, 66.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0342, Validation Loss: 0.0306\n","Epoch [66/100], Training Loss: 0.0339, Validation Loss: 0.0303\n","Epoch [67/100], Training Loss: 0.0337, Validation Loss: 0.0301\n","Epoch [68/100], Training Loss: 0.0335, Validation Loss: 0.0299\n","Epoch [69/100], Training Loss: 0.0332, Validation Loss: 0.0297\n","Epoch [70/100], Training Loss: 0.0330, Validation Loss: 0.0295\n","Epoch [71/100], Training Loss: 0.0328, Validation Loss: 0.0293\n","Epoch [72/100], Training Loss: 0.0326, Validation Loss: 0.0291\n","Epoch [73/100], Training Loss: 0.0323, Validation Loss: 0.0289\n","Epoch [74/100], Training Loss: 0.0321, Validation Loss: 0.0288\n","Epoch [75/100], Training Loss: 0.0319, Validation Loss: 0.0286\n","Epoch [76/100], Training Loss: 0.0317, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 74/100 [00:01<00:00, 66.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0316, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  81%|████████  | 81/100 [00:01<00:00, 55.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0314, Validation Loss: 0.0281\n","Epoch [79/100], Training Loss: 0.0312, Validation Loss: 0.0279\n","Epoch [80/100], Training Loss: 0.0310, Validation Loss: 0.0278\n","Epoch [81/100], Training Loss: 0.0308, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  81%|████████  | 81/100 [00:01<00:00, 55.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0307, Validation Loss: 0.0275\n","Epoch [83/100], Training Loss: 0.0305, Validation Loss: 0.0274\n","Epoch [84/100], Training Loss: 0.0304, Validation Loss: 0.0272\n","Epoch [85/100], Training Loss: 0.0302, Validation Loss: 0.0271\n","Epoch [86/100], Training Loss: 0.0300, Validation Loss: 0.0270\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  94%|█████████▍| 94/100 [00:01<00:00, 52.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0299, Validation Loss: 0.0269\n","Epoch [88/100], Training Loss: 0.0298, Validation Loss: 0.0267\n","Epoch [89/100], Training Loss: 0.0296, Validation Loss: 0.0266\n","Epoch [90/100], Training Loss: 0.0295, Validation Loss: 0.0265\n","Epoch [91/100], Training Loss: 0.0293, Validation Loss: 0.0264\n","Epoch [92/100], Training Loss: 0.0292, Validation Loss: 0.0263\n","Epoch [93/100], Training Loss: 0.0291, Validation Loss: 0.0262\n","Epoch [94/100], Training Loss: 0.0290, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 100/100 [00:01<00:00, 57.86it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0288, Validation Loss: 0.0260\n","Epoch [96/100], Training Loss: 0.0287, Validation Loss: 0.0259\n","Epoch [97/100], Training Loss: 0.0286, Validation Loss: 0.0258\n","Epoch [98/100], Training Loss: 0.0285, Validation Loss: 0.0257\n","Epoch [99/100], Training Loss: 0.0284, Validation Loss: 0.0256\n","Epoch [100/100], Training Loss: 0.0283, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0928, Validation Loss: 0.0882\n","Epoch [2/100], Training Loss: 0.0920, Validation Loss: 0.0874\n","Epoch [3/100], Training Loss: 0.0913, Validation Loss: 0.0867\n","Epoch [4/100], Training Loss: 0.0906, Validation Loss: 0.0860\n","Epoch [5/100], Training Loss: 0.0898, Validation Loss: 0.0852\n","Epoch [6/100], Training Loss: 0.0891, Validation Loss: 0.0845\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   6%|▌         | 6/100 [00:00<00:01, 55.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/100], Training Loss: 0.0884, Validation Loss: 0.0838\n","Epoch [8/100], Training Loss: 0.0877, Validation Loss: 0.0831\n","Epoch [9/100], Training Loss: 0.0870, Validation Loss: 0.0824\n","Epoch [10/100], Training Loss: 0.0863, Validation Loss: 0.0817\n","Epoch [11/100], Training Loss: 0.0856, Validation Loss: 0.0810\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 12/100 [00:00<00:01, 50.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0849, Validation Loss: 0.0803\n","Epoch [13/100], Training Loss: 0.0842, Validation Loss: 0.0796\n","Epoch [14/100], Training Loss: 0.0836, Validation Loss: 0.0789\n","Epoch [15/100], Training Loss: 0.0829, Validation Loss: 0.0781\n","Epoch [16/100], Training Loss: 0.0820, Validation Loss: 0.0773\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  18%|█▊        | 18/100 [00:00<00:01, 46.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0812, Validation Loss: 0.0764\n","Epoch [18/100], Training Loss: 0.0802, Validation Loss: 0.0754\n","Epoch [19/100], Training Loss: 0.0792, Validation Loss: 0.0744\n","Epoch [20/100], Training Loss: 0.0782, Validation Loss: 0.0733\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  23%|██▎       | 23/100 [00:00<00:01, 41.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0771, Validation Loss: 0.0723\n","Epoch [22/100], Training Loss: 0.0760, Validation Loss: 0.0712\n","Epoch [23/100], Training Loss: 0.0749, Validation Loss: 0.0702\n","Epoch [24/100], Training Loss: 0.0738, Validation Loss: 0.0691\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0727, Validation Loss: 0.0681\n","Epoch [26/100], Training Loss: 0.0717, Validation Loss: 0.0670\n","Epoch [27/100], Training Loss: 0.0706, Validation Loss: 0.0660\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 28/100 [00:00<00:01, 38.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0696, Validation Loss: 0.0650\n","Epoch [29/100], Training Loss: 0.0685, Validation Loss: 0.0640\n","Epoch [30/100], Training Loss: 0.0675, Validation Loss: 0.0630\n","Epoch [31/100], Training Loss: 0.0665, Validation Loss: 0.0620\n","Epoch [32/100], Training Loss: 0.0654, Validation Loss: 0.0610\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0644, Validation Loss: 0.0600\n","Epoch [34/100], Training Loss: 0.0633, Validation Loss: 0.0590\n","Epoch [35/100], Training Loss: 0.0623, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  37%|███▋      | 37/100 [00:00<00:01, 39.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0612, Validation Loss: 0.0568\n","Epoch [37/100], Training Loss: 0.0601, Validation Loss: 0.0558\n","Epoch [38/100], Training Loss: 0.0590, Validation Loss: 0.0547\n","Epoch [39/100], Training Loss: 0.0578, Validation Loss: 0.0536\n","Epoch [40/100], Training Loss: 0.0567, Validation Loss: 0.0525\n","Epoch [41/100], Training Loss: 0.0555, Validation Loss: 0.0513\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  42%|████▏     | 42/100 [00:01<00:01, 39.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0543, Validation Loss: 0.0502\n","Epoch [43/100], Training Loss: 0.0531, Validation Loss: 0.0490\n","Epoch [44/100], Training Loss: 0.0519, Validation Loss: 0.0478\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  47%|████▋     | 47/100 [00:01<00:01, 42.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0506, Validation Loss: 0.0466\n","Epoch [46/100], Training Loss: 0.0494, Validation Loss: 0.0455\n","Epoch [47/100], Training Loss: 0.0481, Validation Loss: 0.0443\n","Epoch [48/100], Training Loss: 0.0469, Validation Loss: 0.0431\n","Epoch [49/100], Training Loss: 0.0456, Validation Loss: 0.0420\n","Epoch [50/100], Training Loss: 0.0444, Validation Loss: 0.0409\n","Epoch [51/100], Training Loss: 0.0432, Validation Loss: 0.0398\n","Epoch [52/100], Training Loss: 0.0420, Validation Loss: 0.0388\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  53%|█████▎    | 53/100 [00:01<00:01, 46.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0408, Validation Loss: 0.0378\n","Epoch [54/100], Training Loss: 0.0396, Validation Loss: 0.0368\n","Epoch [55/100], Training Loss: 0.0385, Validation Loss: 0.0359\n","Epoch [56/100], Training Loss: 0.0375, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  58%|█████▊    | 58/100 [00:01<00:00, 47.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0364, Validation Loss: 0.0342\n","Epoch [58/100], Training Loss: 0.0355, Validation Loss: 0.0335\n","Epoch [59/100], Training Loss: 0.0346, Validation Loss: 0.0329\n","Epoch [60/100], Training Loss: 0.0338, Validation Loss: 0.0323\n","Epoch [61/100], Training Loss: 0.0330, Validation Loss: 0.0318\n","Epoch [62/100], Training Loss: 0.0323, Validation Loss: 0.0314\n","Epoch [63/100], Training Loss: 0.0317, Validation Loss: 0.0311\n","Epoch [64/100], Training Loss: 0.0312, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  65%|██████▌   | 65/100 [00:01<00:00, 53.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0308, Validation Loss: 0.0306\n","Epoch [66/100], Training Loss: 0.0304, Validation Loss: 0.0304\n","Epoch [67/100], Training Loss: 0.0300, Validation Loss: 0.0302\n","Epoch [68/100], Training Loss: 0.0297, Validation Loss: 0.0300\n","Epoch [69/100], Training Loss: 0.0294, Validation Loss: 0.0299\n","Epoch [70/100], Training Loss: 0.0291, Validation Loss: 0.0296\n","Epoch [71/100], Training Loss: 0.0289, Validation Loss: 0.0294\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  73%|███████▎  | 73/100 [00:01<00:00, 60.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0286, Validation Loss: 0.0291\n","Epoch [73/100], Training Loss: 0.0283, Validation Loss: 0.0288\n","Epoch [74/100], Training Loss: 0.0280, Validation Loss: 0.0284\n","Epoch [75/100], Training Loss: 0.0277, Validation Loss: 0.0281\n","Epoch [76/100], Training Loss: 0.0273, Validation Loss: 0.0277\n","Epoch [77/100], Training Loss: 0.0270, Validation Loss: 0.0273\n","Epoch [78/100], Training Loss: 0.0267, Validation Loss: 0.0269\n","Epoch [79/100], Training Loss: 0.0264, Validation Loss: 0.0265\n","Epoch [80/100], Training Loss: 0.0261, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  81%|████████  | 81/100 [00:01<00:00, 65.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0258, Validation Loss: 0.0258\n","Epoch [82/100], Training Loss: 0.0255, Validation Loss: 0.0255\n","Epoch [83/100], Training Loss: 0.0253, Validation Loss: 0.0252\n","Epoch [84/100], Training Loss: 0.0251, Validation Loss: 0.0249\n","Epoch [85/100], Training Loss: 0.0249, Validation Loss: 0.0246\n","Epoch [86/100], Training Loss: 0.0247, Validation Loss: 0.0244\n","Epoch [87/100], Training Loss: 0.0245, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  89%|████████▉ | 89/100 [00:01<00:00, 66.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0243, Validation Loss: 0.0240\n","Epoch [89/100], Training Loss: 0.0242, Validation Loss: 0.0238\n","Epoch [90/100], Training Loss: 0.0241, Validation Loss: 0.0236\n","Epoch [91/100], Training Loss: 0.0239, Validation Loss: 0.0235\n","Epoch [92/100], Training Loss: 0.0238, Validation Loss: 0.0233\n","Epoch [93/100], Training Loss: 0.0237, Validation Loss: 0.0232\n","Epoch [94/100], Training Loss: 0.0236, Validation Loss: 0.0231\n","Epoch [95/100], Training Loss: 0.0234, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 100/100 [00:01<00:00, 52.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0233, Validation Loss: 0.0229\n","Epoch [97/100], Training Loss: 0.0232, Validation Loss: 0.0227\n","Epoch [98/100], Training Loss: 0.0231, Validation Loss: 0.0226\n","Epoch [99/100], Training Loss: 0.0230, Validation Loss: 0.0226\n","Epoch [100/100], Training Loss: 0.0229, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0829, Validation Loss: 0.0779\n","Epoch [2/100], Training Loss: 0.0828, Validation Loss: 0.0778\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  10%|█         | 10/100 [00:00<00:00, 92.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/100], Training Loss: 0.0827, Validation Loss: 0.0777\n","Epoch [4/100], Training Loss: 0.0825, Validation Loss: 0.0776\n","Epoch [5/100], Training Loss: 0.0824, Validation Loss: 0.0775\n","Epoch [6/100], Training Loss: 0.0823, Validation Loss: 0.0773\n","Epoch [7/100], Training Loss: 0.0822, Validation Loss: 0.0772\n","Epoch [8/100], Training Loss: 0.0821, Validation Loss: 0.0771\n","Epoch [9/100], Training Loss: 0.0819, Validation Loss: 0.0770\n","Epoch [10/100], Training Loss: 0.0818, Validation Loss: 0.0769\n","Epoch [11/100], Training Loss: 0.0817, Validation Loss: 0.0767\n","Epoch [12/100], Training Loss: 0.0816, Validation Loss: 0.0766\n","Epoch [13/100], Training Loss: 0.0814, Validation Loss: 0.0765\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  10%|█         | 10/100 [00:00<00:00, 92.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0813, Validation Loss: 0.0764\n","Epoch [15/100], Training Loss: 0.0812, Validation Loss: 0.0763\n","Epoch [16/100], Training Loss: 0.0811, Validation Loss: 0.0762\n","Epoch [17/100], Training Loss: 0.0810, Validation Loss: 0.0760\n","Epoch [18/100], Training Loss: 0.0808, Validation Loss: 0.0759\n","Epoch [19/100], Training Loss: 0.0807, Validation Loss: 0.0758\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 20/100 [00:00<00:00, 88.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0806, Validation Loss: 0.0757\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 20/100 [00:00<00:00, 88.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0805, Validation Loss: 0.0756\n","Epoch [22/100], Training Loss: 0.0804, Validation Loss: 0.0755\n","Epoch [23/100], Training Loss: 0.0803, Validation Loss: 0.0754\n","Epoch [24/100], Training Loss: 0.0801, Validation Loss: 0.0752\n","Epoch [25/100], Training Loss: 0.0800, Validation Loss: 0.0751\n","Epoch [26/100], Training Loss: 0.0799, Validation Loss: 0.0750\n","Epoch [27/100], Training Loss: 0.0798, Validation Loss: 0.0749\n","Epoch [28/100], Training Loss: 0.0797, Validation Loss: 0.0748\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  29%|██▉       | 29/100 [00:00<00:00, 79.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0795, Validation Loss: 0.0747\n","Epoch [30/100], Training Loss: 0.0794, Validation Loss: 0.0746\n","Epoch [31/100], Training Loss: 0.0793, Validation Loss: 0.0745\n","Epoch [32/100], Training Loss: 0.0792, Validation Loss: 0.0743\n","Epoch [33/100], Training Loss: 0.0791, Validation Loss: 0.0742\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  29%|██▉       | 29/100 [00:00<00:00, 79.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0790, Validation Loss: 0.0741\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  38%|███▊      | 38/100 [00:00<00:00, 72.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0789, Validation Loss: 0.0740\n","Epoch [36/100], Training Loss: 0.0787, Validation Loss: 0.0739\n","Epoch [37/100], Training Loss: 0.0786, Validation Loss: 0.0738\n","Epoch [38/100], Training Loss: 0.0785, Validation Loss: 0.0737\n","Epoch [39/100], Training Loss: 0.0784, Validation Loss: 0.0736\n","Epoch [40/100], Training Loss: 0.0783, Validation Loss: 0.0735\n","Epoch [41/100], Training Loss: 0.0782, Validation Loss: 0.0733\n","Epoch [42/100], Training Loss: 0.0781, Validation Loss: 0.0732\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  46%|████▌     | 46/100 [00:00<00:00, 69.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0779, Validation Loss: 0.0731\n","Epoch [44/100], Training Loss: 0.0778, Validation Loss: 0.0730\n","Epoch [45/100], Training Loss: 0.0777, Validation Loss: 0.0729\n","Epoch [46/100], Training Loss: 0.0776, Validation Loss: 0.0728\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0775, Validation Loss: 0.0727\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [48/100], Training Loss: 0.0774, Validation Loss: 0.0726\n","Epoch [49/100], Training Loss: 0.0773, Validation Loss: 0.0725\n","Epoch [50/100], Training Loss: 0.0772, Validation Loss: 0.0724\n","Epoch [51/100], Training Loss: 0.0770, Validation Loss: 0.0723\n","Epoch [52/100], Training Loss: 0.0769, Validation Loss: 0.0721\n","Epoch [53/100], Training Loss: 0.0768, Validation Loss: 0.0720\n","Epoch [54/100], Training Loss: 0.0767, Validation Loss: 0.0719\n","Epoch [55/100], Training Loss: 0.0766, Validation Loss: 0.0718\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0765, Validation Loss: 0.0717\n","Epoch [57/100], Training Loss: 0.0764, Validation Loss: 0.0716\n","Epoch [58/100], Training Loss: 0.0763, Validation Loss: 0.0715\n","Epoch [59/100], Training Loss: 0.0762, Validation Loss: 0.0714\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 60/100 [00:00<00:00, 65.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0761, Validation Loss: 0.0713\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  67%|██████▋   | 67/100 [00:00<00:00, 65.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [61/100], Training Loss: 0.0759, Validation Loss: 0.0712\n","Epoch [62/100], Training Loss: 0.0758, Validation Loss: 0.0711\n","Epoch [63/100], Training Loss: 0.0757, Validation Loss: 0.0710\n","Epoch [64/100], Training Loss: 0.0756, Validation Loss: 0.0709\n","Epoch [65/100], Training Loss: 0.0755, Validation Loss: 0.0708\n","Epoch [66/100], Training Loss: 0.0754, Validation Loss: 0.0707\n","Epoch [67/100], Training Loss: 0.0753, Validation Loss: 0.0706\n","Epoch [68/100], Training Loss: 0.0752, Validation Loss: 0.0705\n","Epoch [69/100], Training Loss: 0.0751, Validation Loss: 0.0704\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  67%|██████▋   | 67/100 [00:01<00:00, 65.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0750, Validation Loss: 0.0703\n","Epoch [71/100], Training Loss: 0.0749, Validation Loss: 0.0702\n","Epoch [72/100], Training Loss: 0.0748, Validation Loss: 0.0701\n","Epoch [73/100], Training Loss: 0.0747, Validation Loss: 0.0700\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  67%|██████▋   | 67/100 [00:01<00:00, 65.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0745, Validation Loss: 0.0698\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  75%|███████▌  | 75/100 [00:01<00:00, 66.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0744, Validation Loss: 0.0697\n","Epoch [76/100], Training Loss: 0.0743, Validation Loss: 0.0696\n","Epoch [77/100], Training Loss: 0.0742, Validation Loss: 0.0695\n","Epoch [78/100], Training Loss: 0.0741, Validation Loss: 0.0694\n","Epoch [79/100], Training Loss: 0.0740, Validation Loss: 0.0693\n","Epoch [80/100], Training Loss: 0.0739, Validation Loss: 0.0692\n","Epoch [81/100], Training Loss: 0.0738, Validation Loss: 0.0691\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 82/100 [00:01<00:00, 61.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0737, Validation Loss: 0.0690\n","Epoch [83/100], Training Loss: 0.0736, Validation Loss: 0.0689\n","Epoch [84/100], Training Loss: 0.0735, Validation Loss: 0.0688\n","Epoch [85/100], Training Loss: 0.0734, Validation Loss: 0.0687\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 82/100 [00:01<00:00, 61.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0733, Validation Loss: 0.0686\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0732, Validation Loss: 0.0685\n","Epoch [88/100], Training Loss: 0.0731, Validation Loss: 0.0684\n","Epoch [89/100], Training Loss: 0.0730, Validation Loss: 0.0683\n","Epoch [90/100], Training Loss: 0.0729, Validation Loss: 0.0682\n","Epoch [91/100], Training Loss: 0.0728, Validation Loss: 0.0681\n","Epoch [92/100], Training Loss: 0.0727, Validation Loss: 0.0680\n","Epoch [93/100], Training Loss: 0.0726, Validation Loss: 0.0679\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  96%|█████████▌| 96/100 [00:01<00:00, 60.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0725, Validation Loss: 0.0679\n","Epoch [95/100], Training Loss: 0.0724, Validation Loss: 0.0678\n","Epoch [96/100], Training Loss: 0.0723, Validation Loss: 0.0677\n","Epoch [97/100], Training Loss: 0.0722, Validation Loss: 0.0676\n","Epoch [98/100], Training Loss: 0.0721, Validation Loss: 0.0675\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0720, Validation Loss: 0.0674\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 100/100 [00:01<00:00, 66.83it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0719, Validation Loss: 0.0673\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0600, Validation Loss: 0.0338\n","Epoch [2/100], Training Loss: 0.0370, Validation Loss: 0.0240\n","Epoch [3/100], Training Loss: 0.0265, Validation Loss: 0.0293\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:02, 37.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0309, Validation Loss: 0.0265\n","Epoch [5/100], Training Loss: 0.0281, Validation Loss: 0.0225\n","Epoch [6/100], Training Loss: 0.0243, Validation Loss: 0.0219\n","Epoch [7/100], Training Loss: 0.0237, Validation Loss: 0.0223\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   9%|▉         | 9/100 [00:00<00:02, 41.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0242, Validation Loss: 0.0224\n","Epoch [9/100], Training Loss: 0.0243, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   9%|▉         | 9/100 [00:00<00:02, 41.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0237, Validation Loss: 0.0212\n","Epoch [11/100], Training Loss: 0.0228, Validation Loss: 0.0206\n","Epoch [12/100], Training Loss: 0.0219, Validation Loss: 0.0206\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 14/100 [00:00<00:02, 40.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0216, Validation Loss: 0.0210\n","Epoch [14/100], Training Loss: 0.0216, Validation Loss: 0.0208\n","Epoch [15/100], Training Loss: 0.0214, Validation Loss: 0.0199\n","Epoch [16/100], Training Loss: 0.0206, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 14/100 [00:00<00:02, 40.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0197, Validation Loss: 0.0179\n","Epoch [18/100], Training Loss: 0.0190, Validation Loss: 0.0171\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  19%|█▉        | 19/100 [00:00<00:02, 39.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/100], Training Loss: 0.0184, Validation Loss: 0.0161\n","Epoch [20/100], Training Loss: 0.0175, Validation Loss: 0.0151\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  23%|██▎       | 23/100 [00:00<00:02, 38.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0164, Validation Loss: 0.0142\n","Epoch [22/100], Training Loss: 0.0152, Validation Loss: 0.0132\n","Epoch [23/100], Training Loss: 0.0140, Validation Loss: 0.0121\n","Epoch [24/100], Training Loss: 0.0128, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  23%|██▎       | 23/100 [00:00<00:02, 38.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0117, Validation Loss: 0.0095\n","Epoch [26/100], Training Loss: 0.0105, Validation Loss: 0.0085\n","Epoch [27/100], Training Loss: 0.0095, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 28/100 [00:00<00:01, 40.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0085, Validation Loss: 0.0076\n","Epoch [29/100], Training Loss: 0.0079, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  33%|███▎      | 33/100 [00:00<00:01, 42.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/100], Training Loss: 0.0071, Validation Loss: 0.0062\n","Epoch [31/100], Training Loss: 0.0066, Validation Loss: 0.0057\n","Epoch [32/100], Training Loss: 0.0058, Validation Loss: 0.0057\n","Epoch [33/100], Training Loss: 0.0054, Validation Loss: 0.0049\n","Epoch [34/100], Training Loss: 0.0047, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  33%|███▎      | 33/100 [00:00<00:01, 42.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/100], Training Loss: 0.0044, Validation Loss: 0.0044\n","Epoch [36/100], Training Loss: 0.0040, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  38%|███▊      | 38/100 [00:00<00:01, 39.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0037, Validation Loss: 0.0039\n","Epoch [38/100], Training Loss: 0.0036, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  43%|████▎     | 43/100 [00:01<00:01, 38.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0032, Validation Loss: 0.0035\n","Epoch [40/100], Training Loss: 0.0030, Validation Loss: 0.0032\n","Epoch [41/100], Training Loss: 0.0028, Validation Loss: 0.0030\n","Epoch [42/100], Training Loss: 0.0027, Validation Loss: 0.0027\n","Epoch [43/100], Training Loss: 0.0025, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  43%|████▎     | 43/100 [00:01<00:01, 38.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0023, Validation Loss: 0.0023\n","Epoch [45/100], Training Loss: 0.0022, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  43%|████▎     | 43/100 [00:01<00:01, 38.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0022, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 38.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0021, Validation Loss: 0.0020\n","Epoch [48/100], Training Loss: 0.0019, Validation Loss: 0.0020\n","Epoch [49/100], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [50/100], Training Loss: 0.0018, Validation Loss: 0.0019\n","Epoch [51/100], Training Loss: 0.0017, Validation Loss: 0.0018\n","Epoch [52/100], Training Loss: 0.0016, Validation Loss: 0.0018\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 38.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0015, Validation Loss: 0.0016\n","Epoch [54/100], Training Loss: 0.0015, Validation Loss: 0.0016\n","Epoch [55/100], Training Loss: 0.0014, Validation Loss: 0.0014\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 38.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0013, Validation Loss: 0.0014\n","Epoch [57/100], Training Loss: 0.0013, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 64/100 [00:01<00:00, 46.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [59/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [60/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [61/100], Training Loss: 0.0012, Validation Loss: 0.0013\n","Epoch [62/100], Training Loss: 0.0012, Validation Loss: 0.0011\n","Epoch [63/100], Training Loss: 0.0011, Validation Loss: 0.0011\n","Epoch [64/100], Training Loss: 0.0010, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 64/100 [00:01<00:00, 46.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0010, Validation Loss: 0.0010\n","Epoch [66/100], Training Loss: 0.0010, Validation Loss: 0.0010\n","Epoch [67/100], Training Loss: 0.0010, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 64/100 [00:01<00:00, 46.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0009, Validation Loss: 0.0010\n","Epoch [69/100], Training Loss: 0.0010, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 76/100 [00:01<00:00, 50.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0010, Validation Loss: 0.0011\n","Epoch [71/100], Training Loss: 0.0011, Validation Loss: 0.0012\n","Epoch [72/100], Training Loss: 0.0012, Validation Loss: 0.0010\n","Epoch [73/100], Training Loss: 0.0011, Validation Loss: 0.0009\n","Epoch [74/100], Training Loss: 0.0008, Validation Loss: 0.0009\n","Epoch [75/100], Training Loss: 0.0008, Validation Loss: 0.0009\n","Epoch [76/100], Training Loss: 0.0009, Validation Loss: 0.0010\n","Epoch [77/100], Training Loss: 0.0009, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 76/100 [00:01<00:00, 50.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0007, Validation Loss: 0.0008\n","Epoch [79/100], Training Loss: 0.0008, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 76/100 [00:01<00:00, 50.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0008, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  87%|████████▋ | 87/100 [00:02<00:00, 44.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [82/100], Training Loss: 0.0007, Validation Loss: 0.0008\n","Epoch [83/100], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [84/100], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [85/100], Training Loss: 0.0006, Validation Loss: 0.0007\n","Epoch [86/100], Training Loss: 0.0006, Validation Loss: 0.0007\n","Epoch [87/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  87%|████████▋ | 87/100 [00:02<00:00, 44.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [88/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [89/100], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  87%|████████▋ | 87/100 [00:02<00:00, 44.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  97%|█████████▋| 97/100 [00:02<00:00, 43.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [92/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [93/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [94/100], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [95/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [96/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [97/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  97%|█████████▋| 97/100 [00:02<00:00, 43.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [98/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [99/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 100/100 [00:02<00:00, 42.24it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:01, 51.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0407, Validation Loss: 0.0413\n","Epoch [2/100], Training Loss: 0.0403, Validation Loss: 0.0409\n","Epoch [3/100], Training Loss: 0.0399, Validation Loss: 0.0405\n","Epoch [4/100], Training Loss: 0.0395, Validation Loss: 0.0401\n","Epoch [5/100], Training Loss: 0.0392, Validation Loss: 0.0398\n","Epoch [6/100], Training Loss: 0.0388, Validation Loss: 0.0394\n","Epoch [7/100], Training Loss: 0.0385, Validation Loss: 0.0390\n","Epoch [8/100], Training Loss: 0.0382, Validation Loss: 0.0387\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:01, 51.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0378, Validation Loss: 0.0383\n","Epoch [10/100], Training Loss: 0.0375, Validation Loss: 0.0380\n","Epoch [11/100], Training Loss: 0.0372, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 12/100 [00:00<00:01, 51.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0369, Validation Loss: 0.0374\n","Epoch [13/100], Training Loss: 0.0366, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 18/100 [00:00<00:01, 52.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0363, Validation Loss: 0.0368\n","Epoch [15/100], Training Loss: 0.0361, Validation Loss: 0.0365\n","Epoch [16/100], Training Loss: 0.0358, Validation Loss: 0.0362\n","Epoch [17/100], Training Loss: 0.0355, Validation Loss: 0.0359\n","Epoch [18/100], Training Loss: 0.0353, Validation Loss: 0.0356\n","Epoch [19/100], Training Loss: 0.0350, Validation Loss: 0.0353\n","Epoch [20/100], Training Loss: 0.0348, Validation Loss: 0.0351\n","Epoch [21/100], Training Loss: 0.0345, Validation Loss: 0.0348\n","Epoch [22/100], Training Loss: 0.0343, Validation Loss: 0.0346\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0341, Validation Loss: 0.0343\n","Epoch [24/100], Training Loss: 0.0338, Validation Loss: 0.0341\n","Epoch [25/100], Training Loss: 0.0336, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 24/100 [00:00<00:01, 55.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0334, Validation Loss: 0.0336\n","Epoch [27/100], Training Loss: 0.0332, Validation Loss: 0.0334\n","Epoch [28/100], Training Loss: 0.0330, Validation Loss: 0.0332\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  37%|███▋      | 37/100 [00:00<00:01, 57.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0328, Validation Loss: 0.0330\n","Epoch [30/100], Training Loss: 0.0326, Validation Loss: 0.0327\n","Epoch [31/100], Training Loss: 0.0324, Validation Loss: 0.0325\n","Epoch [32/100], Training Loss: 0.0322, Validation Loss: 0.0323\n","Epoch [33/100], Training Loss: 0.0321, Validation Loss: 0.0321\n","Epoch [34/100], Training Loss: 0.0319, Validation Loss: 0.0320\n","Epoch [35/100], Training Loss: 0.0317, Validation Loss: 0.0318\n","Epoch [36/100], Training Loss: 0.0316, Validation Loss: 0.0316\n","Epoch [37/100], Training Loss: 0.0314, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  37%|███▋      | 37/100 [00:00<00:01, 57.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0312, Validation Loss: 0.0312\n","Epoch [39/100], Training Loss: 0.0311, Validation Loss: 0.0311\n","Epoch [40/100], Training Loss: 0.0309, Validation Loss: 0.0309\n","Epoch [41/100], Training Loss: 0.0308, Validation Loss: 0.0307\n","Epoch [42/100], Training Loss: 0.0306, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  49%|████▉     | 49/100 [00:00<00:00, 52.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/100], Training Loss: 0.0305, Validation Loss: 0.0304\n","Epoch [44/100], Training Loss: 0.0304, Validation Loss: 0.0303\n","Epoch [45/100], Training Loss: 0.0302, Validation Loss: 0.0301\n","Epoch [46/100], Training Loss: 0.0301, Validation Loss: 0.0300\n","Epoch [47/100], Training Loss: 0.0300, Validation Loss: 0.0299\n","Epoch [48/100], Training Loss: 0.0299, Validation Loss: 0.0297\n","Epoch [49/100], Training Loss: 0.0297, Validation Loss: 0.0296\n","Epoch [50/100], Training Loss: 0.0296, Validation Loss: 0.0295\n","Epoch [51/100], Training Loss: 0.0295, Validation Loss: 0.0293\n","Epoch [52/100], Training Loss: 0.0294, Validation Loss: 0.0292\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  55%|█████▌    | 55/100 [00:01<00:00, 52.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0293, Validation Loss: 0.0291\n","Epoch [54/100], Training Loss: 0.0292, Validation Loss: 0.0290\n","Epoch [55/100], Training Loss: 0.0291, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  61%|██████    | 61/100 [00:01<00:00, 50.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0290, Validation Loss: 0.0287\n","Epoch [57/100], Training Loss: 0.0289, Validation Loss: 0.0286\n","Epoch [58/100], Training Loss: 0.0288, Validation Loss: 0.0285\n","Epoch [59/100], Training Loss: 0.0287, Validation Loss: 0.0284\n","Epoch [60/100], Training Loss: 0.0286, Validation Loss: 0.0283\n","Epoch [61/100], Training Loss: 0.0285, Validation Loss: 0.0282\n","Epoch [62/100], Training Loss: 0.0284, Validation Loss: 0.0281\n","Epoch [63/100], Training Loss: 0.0283, Validation Loss: 0.0280\n","Epoch [64/100], Training Loss: 0.0282, Validation Loss: 0.0279\n","Epoch [65/100], Training Loss: 0.0282, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  67%|██████▋   | 67/100 [00:01<00:00, 48.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [66/100], Training Loss: 0.0281, Validation Loss: 0.0277\n","Epoch [67/100], Training Loss: 0.0280, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  77%|███████▋  | 77/100 [00:01<00:00, 47.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0279, Validation Loss: 0.0275\n","Epoch [69/100], Training Loss: 0.0279, Validation Loss: 0.0275\n","Epoch [70/100], Training Loss: 0.0278, Validation Loss: 0.0274\n","Epoch [71/100], Training Loss: 0.0277, Validation Loss: 0.0273\n","Epoch [72/100], Training Loss: 0.0277, Validation Loss: 0.0272\n","Epoch [73/100], Training Loss: 0.0276, Validation Loss: 0.0271\n","Epoch [74/100], Training Loss: 0.0275, Validation Loss: 0.0271\n","Epoch [75/100], Training Loss: 0.0275, Validation Loss: 0.0270\n","Epoch [76/100], Training Loss: 0.0274, Validation Loss: 0.0269\n","Epoch [77/100], Training Loss: 0.0273, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  77%|███████▋  | 77/100 [00:01<00:00, 47.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0273, Validation Loss: 0.0268\n","Epoch [79/100], Training Loss: 0.0272, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 90/100 [00:01<00:00, 52.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0272, Validation Loss: 0.0266\n","Epoch [81/100], Training Loss: 0.0271, Validation Loss: 0.0266\n","Epoch [82/100], Training Loss: 0.0271, Validation Loss: 0.0265\n","Epoch [83/100], Training Loss: 0.0270, Validation Loss: 0.0265\n","Epoch [84/100], Training Loss: 0.0269, Validation Loss: 0.0264\n","Epoch [85/100], Training Loss: 0.0269, Validation Loss: 0.0263\n","Epoch [86/100], Training Loss: 0.0269, Validation Loss: 0.0263\n","Epoch [87/100], Training Loss: 0.0268, Validation Loss: 0.0262\n","Epoch [88/100], Training Loss: 0.0268, Validation Loss: 0.0262\n","Epoch [89/100], Training Loss: 0.0267, Validation Loss: 0.0261\n","Epoch [90/100], Training Loss: 0.0267, Validation Loss: 0.0261\n","Epoch [91/100], Training Loss: 0.0266, Validation Loss: 0.0260\n","Epoch [92/100], Training Loss: 0.0266, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 90/100 [00:01<00:00, 52.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0265, Validation Loss: 0.0259\n","Epoch [94/100], Training Loss: 0.0265, Validation Loss: 0.0259\n","Epoch [95/100], Training Loss: 0.0265, Validation Loss: 0.0258\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 100/100 [00:01<00:00, 54.17it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0264, Validation Loss: 0.0258\n","Epoch [97/100], Training Loss: 0.0264, Validation Loss: 0.0257\n","Epoch [98/100], Training Loss: 0.0264, Validation Loss: 0.0257\n","Epoch [99/100], Training Loss: 0.0263, Validation Loss: 0.0256\n","Epoch [100/100], Training Loss: 0.0263, Validation Loss: 0.0256\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:01, 70.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0388, Validation Loss: 0.0377\n","Epoch [2/100], Training Loss: 0.0373, Validation Loss: 0.0362\n","Epoch [3/100], Training Loss: 0.0359, Validation Loss: 0.0349\n","Epoch [4/100], Training Loss: 0.0346, Validation Loss: 0.0337\n","Epoch [5/100], Training Loss: 0.0335, Validation Loss: 0.0325\n","Epoch [6/100], Training Loss: 0.0324, Validation Loss: 0.0315\n","Epoch [7/100], Training Loss: 0.0314, Validation Loss: 0.0304\n","Epoch [8/100], Training Loss: 0.0304, Validation Loss: 0.0294\n","Epoch [9/100], Training Loss: 0.0295, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:01, 70.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0286, Validation Loss: 0.0276\n","Epoch [11/100], Training Loss: 0.0278, Validation Loss: 0.0268\n","Epoch [12/100], Training Loss: 0.0271, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 16/100 [00:00<00:01, 67.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0263, Validation Loss: 0.0252\n","Epoch [14/100], Training Loss: 0.0256, Validation Loss: 0.0244\n","Epoch [15/100], Training Loss: 0.0249, Validation Loss: 0.0237\n","Epoch [16/100], Training Loss: 0.0243, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  23%|██▎       | 23/100 [00:00<00:01, 67.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0236, Validation Loss: 0.0223\n","Epoch [18/100], Training Loss: 0.0230, Validation Loss: 0.0216\n","Epoch [19/100], Training Loss: 0.0224, Validation Loss: 0.0210\n","Epoch [20/100], Training Loss: 0.0219, Validation Loss: 0.0204\n","Epoch [21/100], Training Loss: 0.0214, Validation Loss: 0.0199\n","Epoch [22/100], Training Loss: 0.0210, Validation Loss: 0.0194\n","Epoch [23/100], Training Loss: 0.0206, Validation Loss: 0.0191\n","Epoch [24/100], Training Loss: 0.0203, Validation Loss: 0.0187\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  23%|██▎       | 23/100 [00:00<00:01, 67.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0200, Validation Loss: 0.0184\n","Epoch [26/100], Training Loss: 0.0197, Validation Loss: 0.0182\n","Epoch [27/100], Training Loss: 0.0195, Validation Loss: 0.0180\n","Epoch [28/100], Training Loss: 0.0194, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 30/100 [00:00<00:01, 66.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0192, Validation Loss: 0.0176\n","Epoch [30/100], Training Loss: 0.0190, Validation Loss: 0.0174\n","Epoch [31/100], Training Loss: 0.0188, Validation Loss: 0.0173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  37%|███▋      | 37/100 [00:00<00:01, 62.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0186, Validation Loss: 0.0171\n","Epoch [33/100], Training Loss: 0.0184, Validation Loss: 0.0169\n","Epoch [34/100], Training Loss: 0.0182, Validation Loss: 0.0167\n","Epoch [35/100], Training Loss: 0.0179, Validation Loss: 0.0164\n","Epoch [36/100], Training Loss: 0.0176, Validation Loss: 0.0162\n","Epoch [37/100], Training Loss: 0.0173, Validation Loss: 0.0160\n","Epoch [38/100], Training Loss: 0.0170, Validation Loss: 0.0157\n","Epoch [39/100], Training Loss: 0.0167, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  37%|███▋      | 37/100 [00:00<00:01, 62.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0164, Validation Loss: 0.0153\n","Epoch [41/100], Training Loss: 0.0161, Validation Loss: 0.0151\n","Epoch [42/100], Training Loss: 0.0158, Validation Loss: 0.0149\n","Epoch [43/100], Training Loss: 0.0156, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 44/100 [00:00<00:00, 64.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0153, Validation Loss: 0.0144\n","Epoch [45/100], Training Loss: 0.0150, Validation Loss: 0.0141\n","Epoch [46/100], Training Loss: 0.0147, Validation Loss: 0.0139\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  51%|█████     | 51/100 [00:00<00:00, 65.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0144, Validation Loss: 0.0136\n","Epoch [48/100], Training Loss: 0.0141, Validation Loss: 0.0133\n","Epoch [49/100], Training Loss: 0.0138, Validation Loss: 0.0129\n","Epoch [50/100], Training Loss: 0.0135, Validation Loss: 0.0126\n","Epoch [51/100], Training Loss: 0.0132, Validation Loss: 0.0123\n","Epoch [52/100], Training Loss: 0.0129, Validation Loss: 0.0120\n","Epoch [53/100], Training Loss: 0.0125, Validation Loss: 0.0116\n","Epoch [54/100], Training Loss: 0.0122, Validation Loss: 0.0113\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  51%|█████     | 51/100 [00:00<00:00, 65.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0119, Validation Loss: 0.0110\n","Epoch [56/100], Training Loss: 0.0116, Validation Loss: 0.0106\n","Epoch [57/100], Training Loss: 0.0112, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 58/100 [00:00<00:00, 59.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0109, Validation Loss: 0.0100\n","Epoch [59/100], Training Loss: 0.0106, Validation Loss: 0.0097\n","Epoch [60/100], Training Loss: 0.0103, Validation Loss: 0.0093\n","Epoch [61/100], Training Loss: 0.0100, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  65%|██████▌   | 65/100 [00:01<00:00, 53.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0096, Validation Loss: 0.0087\n","Epoch [63/100], Training Loss: 0.0093, Validation Loss: 0.0084\n","Epoch [64/100], Training Loss: 0.0090, Validation Loss: 0.0081\n","Epoch [65/100], Training Loss: 0.0087, Validation Loss: 0.0077\n","Epoch [66/100], Training Loss: 0.0084, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  65%|██████▌   | 65/100 [00:01<00:00, 53.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [67/100], Training Loss: 0.0081, Validation Loss: 0.0071\n","Epoch [68/100], Training Loss: 0.0078, Validation Loss: 0.0068\n","Epoch [69/100], Training Loss: 0.0074, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  71%|███████   | 71/100 [00:01<00:00, 48.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0071, Validation Loss: 0.0062\n","Epoch [71/100], Training Loss: 0.0068, Validation Loss: 0.0059\n","Epoch [72/100], Training Loss: 0.0065, Validation Loss: 0.0056\n","Epoch [73/100], Training Loss: 0.0062, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  71%|███████   | 71/100 [00:01<00:00, 48.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0059, Validation Loss: 0.0051\n","Epoch [75/100], Training Loss: 0.0056, Validation Loss: 0.0049\n","Epoch [76/100], Training Loss: 0.0054, Validation Loss: 0.0047\n","Epoch [77/100], Training Loss: 0.0051, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  77%|███████▋  | 77/100 [00:01<00:00, 44.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0049, Validation Loss: 0.0045\n","Epoch [79/100], Training Loss: 0.0048, Validation Loss: 0.0043\n","Epoch [80/100], Training Loss: 0.0046, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 82/100 [00:01<00:00, 42.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0044, Validation Loss: 0.0041\n","Epoch [82/100], Training Loss: 0.0043, Validation Loss: 0.0040\n","Epoch [83/100], Training Loss: 0.0042, Validation Loss: 0.0039\n","Epoch [84/100], Training Loss: 0.0041, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  87%|████████▋ | 87/100 [00:01<00:00, 42.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0040, Validation Loss: 0.0037\n","Epoch [86/100], Training Loss: 0.0039, Validation Loss: 0.0037\n","Epoch [87/100], Training Loss: 0.0037, Validation Loss: 0.0036\n","Epoch [88/100], Training Loss: 0.0036, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  87%|████████▋ | 87/100 [00:01<00:00, 42.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0035, Validation Loss: 0.0034\n","Epoch [90/100], Training Loss: 0.0034, Validation Loss: 0.0033\n","Epoch [91/100], Training Loss: 0.0033, Validation Loss: 0.0032\n","Epoch [92/100], Training Loss: 0.0032, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 98/100 [00:01<00:00, 46.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0031, Validation Loss: 0.0030\n","Epoch [94/100], Training Loss: 0.0030, Validation Loss: 0.0030\n","Epoch [95/100], Training Loss: 0.0029, Validation Loss: 0.0029\n","Epoch [96/100], Training Loss: 0.0028, Validation Loss: 0.0028\n","Epoch [97/100], Training Loss: 0.0028, Validation Loss: 0.0027\n","Epoch [98/100], Training Loss: 0.0027, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 100/100 [00:01<00:00, 52.29it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0026, Validation Loss: 0.0026\n","Epoch [100/100], Training Loss: 0.0025, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0440, Validation Loss: 0.0409\n","Epoch [2/100], Training Loss: 0.0440, Validation Loss: 0.0408\n","Epoch [3/100], Training Loss: 0.0439, Validation Loss: 0.0408\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0438, Validation Loss: 0.0407\n","Epoch [5/100], Training Loss: 0.0438, Validation Loss: 0.0407\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 6/100 [00:00<00:02, 41.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0437, Validation Loss: 0.0406\n","Epoch [7/100], Training Loss: 0.0437, Validation Loss: 0.0406\n","Epoch [8/100], Training Loss: 0.0436, Validation Loss: 0.0405\n","Epoch [9/100], Training Loss: 0.0436, Validation Loss: 0.0405\n","Epoch [10/100], Training Loss: 0.0435, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 12/100 [00:00<00:01, 47.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0435, Validation Loss: 0.0404\n","Epoch [12/100], Training Loss: 0.0434, Validation Loss: 0.0403\n","Epoch [13/100], Training Loss: 0.0434, Validation Loss: 0.0403\n","Epoch [14/100], Training Loss: 0.0433, Validation Loss: 0.0402\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 12/100 [00:00<00:01, 47.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/100], Training Loss: 0.0433, Validation Loss: 0.0402\n","Epoch [16/100], Training Loss: 0.0432, Validation Loss: 0.0401\n","Epoch [17/100], Training Loss: 0.0431, Validation Loss: 0.0401\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 18/100 [00:00<00:01, 50.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0431, Validation Loss: 0.0400\n","Epoch [19/100], Training Loss: 0.0430, Validation Loss: 0.0400\n","Epoch [20/100], Training Loss: 0.0430, Validation Loss: 0.0399\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 26/100 [00:00<00:01, 57.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0429, Validation Loss: 0.0399\n","Epoch [22/100], Training Loss: 0.0429, Validation Loss: 0.0398\n","Epoch [23/100], Training Loss: 0.0428, Validation Loss: 0.0398\n","Epoch [24/100], Training Loss: 0.0428, Validation Loss: 0.0397\n","Epoch [25/100], Training Loss: 0.0427, Validation Loss: 0.0397\n","Epoch [26/100], Training Loss: 0.0427, Validation Loss: 0.0396\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 32/100 [00:00<00:01, 55.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0426, Validation Loss: 0.0396\n","Epoch [28/100], Training Loss: 0.0426, Validation Loss: 0.0395\n","Epoch [29/100], Training Loss: 0.0425, Validation Loss: 0.0395\n","Epoch [30/100], Training Loss: 0.0425, Validation Loss: 0.0394\n","Epoch [31/100], Training Loss: 0.0424, Validation Loss: 0.0394\n","Epoch [32/100], Training Loss: 0.0424, Validation Loss: 0.0393\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/100], Training Loss: 0.0423, Validation Loss: 0.0393\n","Epoch [34/100], Training Loss: 0.0423, Validation Loss: 0.0392\n","Epoch [35/100], Training Loss: 0.0422, Validation Loss: 0.0392\n","Epoch [36/100], Training Loss: 0.0422, Validation Loss: 0.0391\n","Epoch [37/100], Training Loss: 0.0421, Validation Loss: 0.0391\n","Epoch [38/100], Training Loss: 0.0421, Validation Loss: 0.0390\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  43%|████▎     | 43/100 [00:00<00:01, 45.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/100], Training Loss: 0.0420, Validation Loss: 0.0390\n","Epoch [40/100], Training Loss: 0.0420, Validation Loss: 0.0389\n","Epoch [41/100], Training Loss: 0.0419, Validation Loss: 0.0389\n","Epoch [42/100], Training Loss: 0.0419, Validation Loss: 0.0388\n","Epoch [43/100], Training Loss: 0.0418, Validation Loss: 0.0388\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0418, Validation Loss: 0.0387\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 48/100 [00:01<00:01, 40.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0417, Validation Loss: 0.0387\n","Epoch [46/100], Training Loss: 0.0417, Validation Loss: 0.0387\n","Epoch [47/100], Training Loss: 0.0416, Validation Loss: 0.0386\n","Epoch [48/100], Training Loss: 0.0416, Validation Loss: 0.0386\n","Epoch [49/100], Training Loss: 0.0415, Validation Loss: 0.0385\n","Epoch [50/100], Training Loss: 0.0415, Validation Loss: 0.0385\n","Epoch [51/100], Training Loss: 0.0414, Validation Loss: 0.0384\n","Epoch [52/100], Training Loss: 0.0414, Validation Loss: 0.0384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 54/100 [00:01<00:01, 44.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0413, Validation Loss: 0.0383\n","Epoch [54/100], Training Loss: 0.0413, Validation Loss: 0.0383\n","Epoch [55/100], Training Loss: 0.0412, Validation Loss: 0.0382\n","Epoch [56/100], Training Loss: 0.0412, Validation Loss: 0.0382\n","Epoch [57/100], Training Loss: 0.0411, Validation Loss: 0.0381\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 60/100 [00:01<00:00, 46.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0411, Validation Loss: 0.0381\n","Epoch [59/100], Training Loss: 0.0411, Validation Loss: 0.0381\n","Epoch [60/100], Training Loss: 0.0410, Validation Loss: 0.0380\n","Epoch [61/100], Training Loss: 0.0410, Validation Loss: 0.0380\n","Epoch [62/100], Training Loss: 0.0409, Validation Loss: 0.0379\n","Epoch [63/100], Training Loss: 0.0409, Validation Loss: 0.0379\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  65%|██████▌   | 65/100 [00:01<00:00, 46.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [64/100], Training Loss: 0.0408, Validation Loss: 0.0378\n","Epoch [65/100], Training Loss: 0.0408, Validation Loss: 0.0378\n","Epoch [66/100], Training Loss: 0.0407, Validation Loss: 0.0378\n","Epoch [67/100], Training Loss: 0.0407, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 70/100 [00:01<00:00, 46.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0406, Validation Loss: 0.0377\n","Epoch [69/100], Training Loss: 0.0406, Validation Loss: 0.0376\n","Epoch [70/100], Training Loss: 0.0405, Validation Loss: 0.0376\n","Epoch [71/100], Training Loss: 0.0405, Validation Loss: 0.0375\n","Epoch [72/100], Training Loss: 0.0405, Validation Loss: 0.0375\n","Epoch [73/100], Training Loss: 0.0404, Validation Loss: 0.0374\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0404, Validation Loss: 0.0374\n","Epoch [75/100], Training Loss: 0.0403, Validation Loss: 0.0374\n","Epoch [76/100], Training Loss: 0.0403, Validation Loss: 0.0373\n","Epoch [77/100], Training Loss: 0.0402, Validation Loss: 0.0373\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0402, Validation Loss: 0.0372\n","Epoch [79/100], Training Loss: 0.0401, Validation Loss: 0.0372\n","Epoch [80/100], Training Loss: 0.0401, Validation Loss: 0.0372\n","Epoch [81/100], Training Loss: 0.0401, Validation Loss: 0.0371\n","Epoch [82/100], Training Loss: 0.0400, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 86/100 [00:01<00:00, 45.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0400, Validation Loss: 0.0370\n","Epoch [84/100], Training Loss: 0.0399, Validation Loss: 0.0370\n","Epoch [85/100], Training Loss: 0.0399, Validation Loss: 0.0369\n","Epoch [86/100], Training Loss: 0.0398, Validation Loss: 0.0369\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  91%|█████████ | 91/100 [00:01<00:00, 44.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0398, Validation Loss: 0.0369\n","Epoch [88/100], Training Loss: 0.0398, Validation Loss: 0.0368\n","Epoch [89/100], Training Loss: 0.0397, Validation Loss: 0.0368\n","Epoch [90/100], Training Loss: 0.0397, Validation Loss: 0.0367\n","Epoch [91/100], Training Loss: 0.0396, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  91%|█████████ | 91/100 [00:02<00:00, 44.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0396, Validation Loss: 0.0367\n","Epoch [93/100], Training Loss: 0.0395, Validation Loss: 0.0366\n","Epoch [94/100], Training Loss: 0.0395, Validation Loss: 0.0366\n","Epoch [95/100], Training Loss: 0.0395, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 100/100 [00:02<00:00, 46.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [96/100], Training Loss: 0.0394, Validation Loss: 0.0365\n","Epoch [97/100], Training Loss: 0.0394, Validation Loss: 0.0365\n","Epoch [98/100], Training Loss: 0.0393, Validation Loss: 0.0364\n","Epoch [99/100], Training Loss: 0.0393, Validation Loss: 0.0364\n","Epoch [100/100], Training Loss: 0.0392, Validation Loss: 0.0363\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0407, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   4%|▍         | 4/100 [00:00<00:02, 37.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/100], Training Loss: 0.0261, Validation Loss: 0.0359\n","Epoch [3/100], Training Loss: 0.0344, Validation Loss: 0.0208\n","Epoch [4/100], Training Loss: 0.0221, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:02, 38.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0242, Validation Loss: 0.0229\n","Epoch [6/100], Training Loss: 0.0244, Validation Loss: 0.0220\n","Epoch [7/100], Training Loss: 0.0233, Validation Loss: 0.0207\n","Epoch [8/100], Training Loss: 0.0217, Validation Loss: 0.0193\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   8%|▊         | 8/100 [00:00<00:02, 38.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0201, Validation Loss: 0.0184\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/100], Training Loss: 0.0189, Validation Loss: 0.0178\n","Epoch [11/100], Training Loss: 0.0183, Validation Loss: 0.0160\n","Epoch [12/100], Training Loss: 0.0166, Validation Loss: 0.0137\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  16%|█▌        | 16/100 [00:00<00:02, 37.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/100], Training Loss: 0.0145, Validation Loss: 0.0121\n","Epoch [14/100], Training Loss: 0.0131, Validation Loss: 0.0110\n","Epoch [15/100], Training Loss: 0.0124, Validation Loss: 0.0104\n","Epoch [16/100], Training Loss: 0.0117, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  16%|█▌        | 16/100 [00:00<00:02, 37.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0111, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  16%|█▌        | 16/100 [00:00<00:02, 37.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0098, Validation Loss: 0.0077\n","Epoch [19/100], Training Loss: 0.0087, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  20%|██        | 20/100 [00:00<00:02, 35.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0082, Validation Loss: 0.0070\n","Epoch [21/100], Training Loss: 0.0076, Validation Loss: 0.0058\n","Epoch [22/100], Training Loss: 0.0064, Validation Loss: 0.0053\n","Epoch [23/100], Training Loss: 0.0057, Validation Loss: 0.0048\n","Epoch [24/100], Training Loss: 0.0052, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  25%|██▌       | 25/100 [00:00<00:01, 37.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/100], Training Loss: 0.0048, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  25%|██▌       | 25/100 [00:00<00:01, 37.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0043, Validation Loss: 0.0041\n","Epoch [27/100], Training Loss: 0.0040, Validation Loss: 0.0037\n","Epoch [28/100], Training Loss: 0.0036, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0034, Validation Loss: 0.0030\n","Epoch [30/100], Training Loss: 0.0028, Validation Loss: 0.0026\n","Epoch [31/100], Training Loss: 0.0025, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  29%|██▉       | 29/100 [00:00<00:01, 37.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0021, Validation Loss: 0.0018\n","Epoch [33/100], Training Loss: 0.0019, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  33%|███▎      | 33/100 [00:00<00:01, 35.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0017, Validation Loss: 0.0017\n","Epoch [35/100], Training Loss: 0.0016, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  37%|███▋      | 37/100 [00:01<00:01, 34.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0015, Validation Loss: 0.0014\n","Epoch [37/100], Training Loss: 0.0013, Validation Loss: 0.0014\n","Epoch [38/100], Training Loss: 0.0013, Validation Loss: 0.0013\n","Epoch [39/100], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  41%|████      | 41/100 [00:01<00:01, 35.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/100], Training Loss: 0.0011, Validation Loss: 0.0011\n","Epoch [41/100], Training Loss: 0.0010, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  41%|████      | 41/100 [00:01<00:01, 35.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0011, Validation Loss: 0.0020\n","Epoch [43/100], Training Loss: 0.0020, Validation Loss: 0.0022\n","Epoch [44/100], Training Loss: 0.0020, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  46%|████▌     | 46/100 [00:01<00:01, 38.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/100], Training Loss: 0.0009, Validation Loss: 0.0011\n","Epoch [46/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [47/100], Training Loss: 0.0011, Validation Loss: 0.0008\n","Epoch [48/100], Training Loss: 0.0007, Validation Loss: 0.0011\n","Epoch [49/100], Training Loss: 0.0011, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 42.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0005, Validation Loss: 0.0010\n","Epoch [51/100], Training Loss: 0.0009, Validation Loss: 0.0005\n","Epoch [52/100], Training Loss: 0.0004, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 42.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [53/100], Training Loss: 0.0008, Validation Loss: 0.0005\n","Epoch [54/100], Training Loss: 0.0005, Validation Loss: 0.0007\n","Epoch [55/100], Training Loss: 0.0006, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  58%|█████▊    | 58/100 [00:01<00:00, 46.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [57/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [58/100], Training Loss: 0.0004, Validation Loss: 0.0005\n","Epoch [59/100], Training Loss: 0.0004, Validation Loss: 0.0004\n","Epoch [60/100], Training Loss: 0.0004, Validation Loss: 0.0004\n","Epoch [61/100], Training Loss: 0.0003, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  64%|██████▍   | 64/100 [00:01<00:00, 49.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0004, Validation Loss: 0.0003\n","Epoch [63/100], Training Loss: 0.0003, Validation Loss: 0.0004\n","Epoch [64/100], Training Loss: 0.0003, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  64%|██████▍   | 64/100 [00:01<00:00, 49.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0002, Validation Loss: 0.0004\n","Epoch [66/100], Training Loss: 0.0003, Validation Loss: 0.0003\n","Epoch [67/100], Training Loss: 0.0002, Validation Loss: 0.0003\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  70%|███████   | 70/100 [00:01<00:00, 50.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0003, Validation Loss: 0.0003\n","Epoch [69/100], Training Loss: 0.0002, Validation Loss: 0.0003\n","Epoch [70/100], Training Loss: 0.0002, Validation Loss: 0.0003\n","Epoch [71/100], Training Loss: 0.0002, Validation Loss: 0.0002\n","Epoch [72/100], Training Loss: 0.0002, Validation Loss: 0.0003\n","Epoch [73/100], Training Loss: 0.0002, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  76%|███████▌  | 76/100 [00:01<00:00, 53.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [74/100], Training Loss: 0.0002, Validation Loss: 0.0002\n","Epoch [75/100], Training Loss: 0.0002, Validation Loss: 0.0002\n","Epoch [76/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [77/100], Training Loss: 0.0002, Validation Loss: 0.0002\n","Epoch [78/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [79/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  82%|████████▏ | 82/100 [00:01<00:00, 54.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [81/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [82/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [83/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [84/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [85/100], Training Loss: 0.0001, Validation Loss: 0.0002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  88%|████████▊ | 88/100 [00:01<00:00, 55.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [86/100], Training Loss: 0.0001, Validation Loss: 0.0002\n","Epoch [87/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [88/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  88%|████████▊ | 88/100 [00:02<00:00, 55.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [90/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [91/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 94/100 [00:02<00:00, 53.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [93/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [94/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [95/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [96/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 94/100 [00:02<00:00, 53.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [98/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  94%|█████████▍| 94/100 [00:02<00:00, 53.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0001, Validation Loss: 0.0001\n","Epoch [100/100], Training Loss: 0.0001, Validation Loss: 0.0001\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 100/100 [00:02<00:00, 43.95it/s]\n","Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0391, Validation Loss: 0.0396\n","Epoch [2/100], Training Loss: 0.0386, Validation Loss: 0.0391\n","Epoch [3/100], Training Loss: 0.0381, Validation Loss: 0.0386\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:02, 35.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0377, Validation Loss: 0.0381\n","Epoch [5/100], Training Loss: 0.0372, Validation Loss: 0.0376\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   4%|▍         | 4/100 [00:00<00:02, 35.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0368, Validation Loss: 0.0371\n","Epoch [7/100], Training Loss: 0.0363, Validation Loss: 0.0367\n","Epoch [8/100], Training Loss: 0.0359, Validation Loss: 0.0362\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   9%|▉         | 9/100 [00:00<00:02, 38.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0355, Validation Loss: 0.0358\n","Epoch [10/100], Training Loss: 0.0351, Validation Loss: 0.0354\n","Epoch [11/100], Training Loss: 0.0347, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:00<00:02, 37.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0344, Validation Loss: 0.0346\n","Epoch [13/100], Training Loss: 0.0340, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:00<00:02, 37.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0337, Validation Loss: 0.0339\n","Epoch [15/100], Training Loss: 0.0333, Validation Loss: 0.0335\n","Epoch [16/100], Training Loss: 0.0330, Validation Loss: 0.0332\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  17%|█▋        | 17/100 [00:00<00:02, 38.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/100], Training Loss: 0.0327, Validation Loss: 0.0328\n","Epoch [18/100], Training Loss: 0.0324, Validation Loss: 0.0325\n","Epoch [19/100], Training Loss: 0.0321, Validation Loss: 0.0322\n","Epoch [20/100], Training Loss: 0.0318, Validation Loss: 0.0319\n","Epoch [21/100], Training Loss: 0.0315, Validation Loss: 0.0316\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  23%|██▎       | 23/100 [00:00<00:01, 43.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/100], Training Loss: 0.0313, Validation Loss: 0.0313\n","Epoch [23/100], Training Loss: 0.0310, Validation Loss: 0.0310\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  23%|██▎       | 23/100 [00:00<00:01, 43.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/100], Training Loss: 0.0308, Validation Loss: 0.0308\n","Epoch [25/100], Training Loss: 0.0305, Validation Loss: 0.0305\n","Epoch [26/100], Training Loss: 0.0303, Validation Loss: 0.0303\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  28%|██▊       | 28/100 [00:00<00:01, 43.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/100], Training Loss: 0.0301, Validation Loss: 0.0300\n","Epoch [28/100], Training Loss: 0.0298, Validation Loss: 0.0298\n","Epoch [29/100], Training Loss: 0.0296, Validation Loss: 0.0295\n","Epoch [30/100], Training Loss: 0.0294, Validation Loss: 0.0293\n","Epoch [31/100], Training Loss: 0.0292, Validation Loss: 0.0291\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  33%|███▎      | 33/100 [00:00<00:01, 45.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/100], Training Loss: 0.0290, Validation Loss: 0.0289\n","Epoch [33/100], Training Loss: 0.0289, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  33%|███▎      | 33/100 [00:00<00:01, 45.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0287, Validation Loss: 0.0285\n","Epoch [35/100], Training Loss: 0.0285, Validation Loss: 0.0283\n","Epoch [36/100], Training Loss: 0.0283, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 38/100 [00:00<00:01, 45.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0282, Validation Loss: 0.0279\n","Epoch [38/100], Training Loss: 0.0280, Validation Loss: 0.0277\n","Epoch [39/100], Training Loss: 0.0279, Validation Loss: 0.0276\n","Epoch [40/100], Training Loss: 0.0277, Validation Loss: 0.0274\n","Epoch [41/100], Training Loss: 0.0276, Validation Loss: 0.0273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  43%|████▎     | 43/100 [00:00<00:01, 47.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0274, Validation Loss: 0.0271\n","Epoch [43/100], Training Loss: 0.0273, Validation Loss: 0.0269\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0272, Validation Loss: 0.0268\n","Epoch [45/100], Training Loss: 0.0270, Validation Loss: 0.0267\n","Epoch [46/100], Training Loss: 0.0269, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  48%|████▊     | 48/100 [00:01<00:01, 47.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/100], Training Loss: 0.0268, Validation Loss: 0.0264\n","Epoch [48/100], Training Loss: 0.0267, Validation Loss: 0.0263\n","Epoch [49/100], Training Loss: 0.0266, Validation Loss: 0.0261\n","Epoch [50/100], Training Loss: 0.0265, Validation Loss: 0.0260\n","Epoch [51/100], Training Loss: 0.0263, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  53%|█████▎    | 53/100 [00:01<00:01, 46.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0262, Validation Loss: 0.0258\n","Epoch [53/100], Training Loss: 0.0261, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  53%|█████▎    | 53/100 [00:01<00:01, 46.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [54/100], Training Loss: 0.0261, Validation Loss: 0.0256\n","Epoch [55/100], Training Loss: 0.0260, Validation Loss: 0.0254\n","Epoch [56/100], Training Loss: 0.0259, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  58%|█████▊    | 58/100 [00:01<00:00, 42.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [57/100], Training Loss: 0.0258, Validation Loss: 0.0252\n","Epoch [58/100], Training Loss: 0.0257, Validation Loss: 0.0251\n","Epoch [59/100], Training Loss: 0.0256, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  58%|█████▊    | 58/100 [00:01<00:00, 42.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [60/100], Training Loss: 0.0255, Validation Loss: 0.0250\n","Epoch [61/100], Training Loss: 0.0255, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0254, Validation Loss: 0.0248\n","Epoch [63/100], Training Loss: 0.0253, Validation Loss: 0.0247\n","Epoch [64/100], Training Loss: 0.0253, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  68%|██████▊   | 68/100 [00:01<00:00, 43.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0252, Validation Loss: 0.0245\n","Epoch [66/100], Training Loss: 0.0251, Validation Loss: 0.0245\n","Epoch [67/100], Training Loss: 0.0251, Validation Loss: 0.0244\n","Epoch [68/100], Training Loss: 0.0250, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  68%|██████▊   | 68/100 [00:01<00:00, 43.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0249, Validation Loss: 0.0242\n","Epoch [70/100], Training Loss: 0.0249, Validation Loss: 0.0242\n","Epoch [71/100], Training Loss: 0.0248, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [72/100], Training Loss: 0.0248, Validation Loss: 0.0240\n","Epoch [73/100], Training Loss: 0.0247, Validation Loss: 0.0240\n","Epoch [74/100], Training Loss: 0.0247, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  78%|███████▊  | 78/100 [00:01<00:00, 45.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [75/100], Training Loss: 0.0246, Validation Loss: 0.0239\n","Epoch [76/100], Training Loss: 0.0246, Validation Loss: 0.0238\n","Epoch [77/100], Training Loss: 0.0245, Validation Loss: 0.0238\n","Epoch [78/100], Training Loss: 0.0245, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0244, Validation Loss: 0.0236\n","Epoch [80/100], Training Loss: 0.0244, Validation Loss: 0.0236\n","Epoch [81/100], Training Loss: 0.0243, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [82/100], Training Loss: 0.0243, Validation Loss: 0.0235\n","Epoch [83/100], Training Loss: 0.0243, Validation Loss: 0.0234\n","Epoch [84/100], Training Loss: 0.0242, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  88%|████████▊ | 88/100 [00:01<00:00, 46.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0242, Validation Loss: 0.0234\n","Epoch [86/100], Training Loss: 0.0242, Validation Loss: 0.0233\n","Epoch [87/100], Training Loss: 0.0241, Validation Loss: 0.0233\n","Epoch [88/100], Training Loss: 0.0241, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  88%|████████▊ | 88/100 [00:02<00:00, 46.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [89/100], Training Loss: 0.0241, Validation Loss: 0.0232\n","Epoch [90/100], Training Loss: 0.0240, Validation Loss: 0.0231\n","Epoch [91/100], Training Loss: 0.0240, Validation Loss: 0.0231\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  93%|█████████▎| 93/100 [00:02<00:00, 46.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0240, Validation Loss: 0.0231\n","Epoch [93/100], Training Loss: 0.0239, Validation Loss: 0.0230\n","Epoch [94/100], Training Loss: 0.0239, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  93%|█████████▎| 93/100 [00:02<00:00, 46.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [95/100], Training Loss: 0.0239, Validation Loss: 0.0230\n","Epoch [96/100], Training Loss: 0.0239, Validation Loss: 0.0229\n","Epoch [97/100], Training Loss: 0.0238, Validation Loss: 0.0229\n","Epoch [98/100], Training Loss: 0.0238, Validation Loss: 0.0229\n","Epoch [99/100], Training Loss: 0.0238, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 100/100 [00:02<00:00, 44.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [100/100], Training Loss: 0.0238, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0292, Validation Loss: 0.0254\n","Epoch [2/100], Training Loss: 0.0280, Validation Loss: 0.0245\n","Epoch [3/100], Training Loss: 0.0270, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:   5%|▌         | 5/100 [00:00<00:02, 42.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/100], Training Loss: 0.0262, Validation Loss: 0.0233\n","Epoch [5/100], Training Loss: 0.0254, Validation Loss: 0.0227\n","Epoch [6/100], Training Loss: 0.0248, Validation Loss: 0.0223\n","Epoch [7/100], Training Loss: 0.0242, Validation Loss: 0.0220\n","Epoch [8/100], Training Loss: 0.0237, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  10%|█         | 10/100 [00:00<00:01, 45.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/100], Training Loss: 0.0233, Validation Loss: 0.0214\n","Epoch [10/100], Training Loss: 0.0229, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  10%|█         | 10/100 [00:00<00:01, 45.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/100], Training Loss: 0.0226, Validation Loss: 0.0211\n","Epoch [12/100], Training Loss: 0.0224, Validation Loss: 0.0210\n","Epoch [13/100], Training Loss: 0.0221, Validation Loss: 0.0208\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  15%|█▌        | 15/100 [00:00<00:01, 44.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0218, Validation Loss: 0.0205\n","Epoch [15/100], Training Loss: 0.0215, Validation Loss: 0.0202\n","Epoch [16/100], Training Loss: 0.0211, Validation Loss: 0.0199\n","Epoch [17/100], Training Loss: 0.0207, Validation Loss: 0.0195\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  15%|█▌        | 15/100 [00:00<00:01, 44.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/100], Training Loss: 0.0203, Validation Loss: 0.0191\n","Epoch [19/100], Training Loss: 0.0199, Validation Loss: 0.0187\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  20%|██        | 20/100 [00:00<00:01, 42.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0195, Validation Loss: 0.0183\n","Epoch [21/100], Training Loss: 0.0191, Validation Loss: 0.0179\n","Epoch [22/100], Training Loss: 0.0186, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0182, Validation Loss: 0.0169\n","Epoch [24/100], Training Loss: 0.0177, Validation Loss: 0.0164\n","Epoch [25/100], Training Loss: 0.0172, Validation Loss: 0.0159\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/100], Training Loss: 0.0166, Validation Loss: 0.0152\n","Epoch [27/100], Training Loss: 0.0159, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  30%|███       | 30/100 [00:00<00:01, 41.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0152, Validation Loss: 0.0138\n","Epoch [29/100], Training Loss: 0.0145, Validation Loss: 0.0130\n","Epoch [30/100], Training Loss: 0.0137, Validation Loss: 0.0122\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  30%|███       | 30/100 [00:00<00:01, 41.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0128, Validation Loss: 0.0113\n","Epoch [32/100], Training Loss: 0.0120, Validation Loss: 0.0104\n","Epoch [33/100], Training Loss: 0.0111, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  35%|███▌      | 35/100 [00:00<00:01, 38.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/100], Training Loss: 0.0102, Validation Loss: 0.0086\n","Epoch [35/100], Training Loss: 0.0093, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [36/100], Training Loss: 0.0084, Validation Loss: 0.0070\n","Epoch [37/100], Training Loss: 0.0075, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  39%|███▉      | 39/100 [00:01<00:01, 37.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0067, Validation Loss: 0.0058\n","Epoch [39/100], Training Loss: 0.0060, Validation Loss: 0.0054\n","Epoch [40/100], Training Loss: 0.0055, Validation Loss: 0.0049\n","Epoch [41/100], Training Loss: 0.0050, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  39%|███▉      | 39/100 [00:01<00:01, 37.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/100], Training Loss: 0.0046, Validation Loss: 0.0042\n","Epoch [43/100], Training Loss: 0.0044, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  44%|████▍     | 44/100 [00:01<00:01, 37.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/100], Training Loss: 0.0041, Validation Loss: 0.0039\n","Epoch [45/100], Training Loss: 0.0039, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  48%|████▊     | 48/100 [00:01<00:01, 36.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/100], Training Loss: 0.0037, Validation Loss: 0.0034\n","Epoch [47/100], Training Loss: 0.0035, Validation Loss: 0.0032\n","Epoch [48/100], Training Loss: 0.0033, Validation Loss: 0.0030\n","Epoch [49/100], Training Loss: 0.0031, Validation Loss: 0.0028\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  48%|████▊     | 48/100 [00:01<00:01, 36.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0028, Validation Loss: 0.0026\n","Epoch [51/100], Training Loss: 0.0027, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  52%|█████▏    | 52/100 [00:01<00:01, 37.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [52/100], Training Loss: 0.0025, Validation Loss: 0.0023\n","Epoch [53/100], Training Loss: 0.0023, Validation Loss: 0.0022\n","Epoch [54/100], Training Loss: 0.0022, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [55/100], Training Loss: 0.0020, Validation Loss: 0.0020\n","Epoch [56/100], Training Loss: 0.0019, Validation Loss: 0.0018\n","Epoch [57/100], Training Loss: 0.0017, Validation Loss: 0.0017\n","Epoch [58/100], Training Loss: 0.0016, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  57%|█████▋    | 57/100 [00:01<00:01, 40.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0015, Validation Loss: 0.0015\n","Epoch [60/100], Training Loss: 0.0014, Validation Loss: 0.0014\n","Epoch [61/100], Training Loss: 0.0013, Validation Loss: 0.0013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  62%|██████▏   | 62/100 [00:01<00:00, 41.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [62/100], Training Loss: 0.0013, Validation Loss: 0.0012\n","Epoch [63/100], Training Loss: 0.0012, Validation Loss: 0.0012\n","Epoch [64/100], Training Loss: 0.0011, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  67%|██████▋   | 67/100 [00:01<00:00, 40.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0011, Validation Loss: 0.0011\n","Epoch [66/100], Training Loss: 0.0010, Validation Loss: 0.0010\n","Epoch [67/100], Training Loss: 0.0010, Validation Loss: 0.0010\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  67%|██████▋   | 67/100 [00:01<00:00, 40.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0009, Validation Loss: 0.0010\n","Epoch [69/100], Training Loss: 0.0009, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  72%|███████▏  | 72/100 [00:01<00:00, 40.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [70/100], Training Loss: 0.0008, Validation Loss: 0.0009\n","Epoch [71/100], Training Loss: 0.0008, Validation Loss: 0.0009\n","Epoch [72/100], Training Loss: 0.0008, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [73/100], Training Loss: 0.0007, Validation Loss: 0.0008\n","Epoch [74/100], Training Loss: 0.0007, Validation Loss: 0.0008\n","Epoch [75/100], Training Loss: 0.0007, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  77%|███████▋  | 77/100 [00:01<00:00, 38.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0006, Validation Loss: 0.0007\n","Epoch [77/100], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [78/100], Training Loss: 0.0006, Validation Loss: 0.0007\n","Epoch [79/100], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  81%|████████  | 81/100 [00:02<00:00, 36.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [80/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [81/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [82/100], Training Loss: 0.0005, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  81%|████████  | 81/100 [00:02<00:00, 36.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [83/100], Training Loss: 0.0005, Validation Loss: 0.0006\n","Epoch [84/100], Training Loss: 0.0005, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  85%|████████▌ | 85/100 [00:02<00:00, 35.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [85/100], Training Loss: 0.0005, Validation Loss: 0.0005\n","Epoch [86/100], Training Loss: 0.0004, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  89%|████████▉ | 89/100 [00:02<00:00, 35.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0004, Validation Loss: 0.0005\n","Epoch [88/100], Training Loss: 0.0004, Validation Loss: 0.0005\n","Epoch [89/100], Training Loss: 0.0004, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  89%|████████▉ | 89/100 [00:02<00:00, 35.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [90/100], Training Loss: 0.0004, Validation Loss: 0.0005\n","Epoch [91/100], Training Loss: 0.0004, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  93%|█████████▎| 93/100 [00:02<00:00, 34.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [92/100], Training Loss: 0.0004, Validation Loss: 0.0004\n","Epoch [93/100], Training Loss: 0.0003, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  93%|█████████▎| 93/100 [00:02<00:00, 34.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [94/100], Training Loss: 0.0003, Validation Loss: 0.0005\n","Epoch [95/100], Training Loss: 0.0004, Validation Loss: 0.0006\n","Epoch [96/100], Training Loss: 0.0005, Validation Loss: 0.0008\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam:  97%|█████████▋| 97/100 [00:02<00:00, 32.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [97/100], Training Loss: 0.0007, Validation Loss: 0.0005\n","Epoch [98/100], Training Loss: 0.0004, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=Adam: 100%|██████████| 100/100 [00:02<00:00, 37.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0004, Validation Loss: 0.0006\n","Epoch [100/100], Training Loss: 0.0005, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   0%|          | 0/100 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/100], Training Loss: 0.0265, Validation Loss: 0.0256\n","Epoch [2/100], Training Loss: 0.0265, Validation Loss: 0.0255\n","Epoch [3/100], Training Loss: 0.0265, Validation Loss: 0.0255\n","Epoch [4/100], Training Loss: 0.0265, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:   5%|▌         | 5/100 [00:00<00:02, 37.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/100], Training Loss: 0.0265, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [6/100], Training Loss: 0.0265, Validation Loss: 0.0255\n","Epoch [7/100], Training Loss: 0.0265, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [8/100], Training Loss: 0.0265, Validation Loss: 0.0255\n","Epoch [9/100], Training Loss: 0.0265, Validation Loss: 0.0255\n","Epoch [10/100], Training Loss: 0.0264, Validation Loss: 0.0255\n","Epoch [11/100], Training Loss: 0.0264, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:00<00:02, 35.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/100], Training Loss: 0.0264, Validation Loss: 0.0255\n","Epoch [13/100], Training Loss: 0.0264, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  13%|█▎        | 13/100 [00:00<00:02, 35.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/100], Training Loss: 0.0264, Validation Loss: 0.0255\n","Epoch [15/100], Training Loss: 0.0264, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  17%|█▋        | 17/100 [00:00<00:02, 35.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/100], Training Loss: 0.0264, Validation Loss: 0.0255\n","Epoch [17/100], Training Loss: 0.0264, Validation Loss: 0.0255\n","Epoch [18/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [19/100], Training Loss: 0.0264, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [20/100], Training Loss: 0.0264, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [21/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [22/100], Training Loss: 0.0264, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  25%|██▌       | 25/100 [00:00<00:02, 34.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [24/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [25/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [26/100], Training Loss: 0.0264, Validation Loss: 0.0254\n","Epoch [27/100], Training Loss: 0.0264, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  25%|██▌       | 25/100 [00:00<00:02, 34.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/100], Training Loss: 0.0263, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  29%|██▉       | 29/100 [00:00<00:02, 35.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/100], Training Loss: 0.0263, Validation Loss: 0.0254\n","Epoch [30/100], Training Loss: 0.0263, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  33%|███▎      | 33/100 [00:00<00:01, 36.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/100], Training Loss: 0.0263, Validation Loss: 0.0254\n","Epoch [32/100], Training Loss: 0.0263, Validation Loss: 0.0254\n","Epoch [33/100], Training Loss: 0.0263, Validation Loss: 0.0254\n","Epoch [34/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [35/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [36/100], Training Loss: 0.0263, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [37/100], Training Loss: 0.0263, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  38%|███▊      | 38/100 [00:01<00:01, 39.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [39/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [40/100], Training Loss: 0.0263, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 44/100 [00:01<00:01, 44.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [42/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [43/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [44/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [45/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [46/100], Training Loss: 0.0263, Validation Loss: 0.0253\n","Epoch [47/100], Training Loss: 0.0262, Validation Loss: 0.0253\n","Epoch [48/100], Training Loss: 0.0262, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  44%|████▍     | 44/100 [00:01<00:01, 44.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/100], Training Loss: 0.0262, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [50/100], Training Loss: 0.0262, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  55%|█████▌    | 55/100 [00:01<00:01, 42.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [51/100], Training Loss: 0.0262, Validation Loss: 0.0253\n","Epoch [52/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [53/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [54/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [55/100], Training Loss: 0.0262, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  55%|█████▌    | 55/100 [00:01<00:01, 42.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [56/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [57/100], Training Loss: 0.0262, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  55%|█████▌    | 55/100 [00:01<00:01, 42.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [58/100], Training Loss: 0.0262, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  60%|██████    | 60/100 [00:01<00:00, 40.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [59/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [60/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [61/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [62/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [63/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [64/100], Training Loss: 0.0262, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  65%|██████▌   | 65/100 [00:01<00:00, 42.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [65/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [66/100], Training Loss: 0.0262, Validation Loss: 0.0252\n","Epoch [67/100], Training Loss: 0.0261, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  65%|██████▌   | 65/100 [00:01<00:00, 42.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [68/100], Training Loss: 0.0261, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  70%|███████   | 70/100 [00:01<00:00, 42.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [69/100], Training Loss: 0.0261, Validation Loss: 0.0252\n","Epoch [70/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [71/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [72/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [73/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [74/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [75/100], Training Loss: 0.0261, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [76/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [77/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [78/100], Training Loss: 0.0261, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  77%|███████▋  | 77/100 [00:01<00:00, 48.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [79/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [80/100], Training Loss: 0.0261, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  83%|████████▎ | 83/100 [00:02<00:00, 48.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [81/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [82/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [83/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [84/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [85/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [86/100], Training Loss: 0.0261, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  90%|█████████ | 90/100 [00:02<00:00, 52.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [87/100], Training Loss: 0.0261, Validation Loss: 0.0251\n","Epoch [88/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [89/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [90/100], Training Loss: 0.0260, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [91/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [92/100], Training Loss: 0.0260, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD:  96%|█████████▌| 96/100 [00:02<00:00, 52.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [93/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [94/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [95/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [96/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [97/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [98/100], Training Loss: 0.0260, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[32, 64, 80, 64, 32], Optimizer=SGD: 100%|██████████| 100/100 [00:02<00:00, 43.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [99/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Epoch [100/100], Training Loss: 0.0260, Validation Loss: 0.0250\n","Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [32, 64, 80, 64, 32]\n","Optimizer: Adam\n","Best Validation Loss: 0.00010943069355562329\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'RMSprop':\n","        optimizer = optim.RMSprop(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"1K_model_state_dict_r3\"))"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1733528042328,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"4_DbIgNliBuI","outputId":"f027efb4-72a3-4186-8efe-6849baa66590"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1733528042328,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9O16vuIsiEnT","outputId":"626aec5e-9aa2-4325-f94e-0e91ab882d46"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.010232834519922464\n","Test R^2 Score: 0.9954222440719604\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/1K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model2 = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model2.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model2.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model2(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"IwZV-5LE0R_g"},"source":["## Check with Jacobian"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"P-TEtZJi0V4R","executionInfo":{"status":"ok","timestamp":1733528083838,"user_tz":-60,"elapsed":232,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["def FK(model, theta):\n","    t = theta.view(1, 3)\n","    out = model(t)\n","    out = out.view(-1)\n","    return out\n","\n","def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(t):\n","        return FK(model, t)\n","\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, theta)\n","    return jacobian\n","\n","def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        # Differenze finite centrali\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n","\n","\n","# Analytical Jacobian\n","def analytical_jacobian(joint_angles, L1, L2, L3):\n","    j0, j1, j2 = joint_angles\n","    j0, j1, j2 = j0.item(), j1.item(), j2.item()\n","\n","    theta1 = j0\n","    theta2 = j0 + j1\n","    theta3 = j0 + j1 + j2\n","\n","    dx_dj0 = -L1 * np.sin(theta1) - L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj0 = L1 * np.cos(theta1) + L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj1 = -L2 * np.sin(theta2) - L3 * np.sin(theta3)\n","    dy_dj1 = L2 * np.cos(theta2) + L3 * np.cos(theta3)\n","\n","    dx_dj2 = -L3 * np.sin(theta3)\n","    dy_dj2 = L3 * np.cos(theta3)\n","\n","    J_analytical = np.array([\n","        [dx_dj0, dx_dj1, dx_dj2],\n","        [dy_dj0, dy_dj1, dy_dj2]\n","    ])\n","    return J_analytical\n","\n"]},{"cell_type":"code","source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/1K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2), 0], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a57Wb2xRZVW8","executionInfo":{"status":"ok","timestamp":1733399680996,"user_tz":-60,"elapsed":227,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"15bd6dfb-710c-4c33-a8a4-6a7f6fe750ce"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[-0.002 -0.005 0.007]\n"," [0.027 -0.025 -0.009]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.208 0.205 0.117]\n"," [-0.073 -0.025 -0.009]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000 0.000]\n"," [0.000 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.210 0.210 0.110]\n"," [-0.100 0.000 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.178 -0.161 -0.066]\n"," [0.118 0.045 0.021]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.032 0.049 0.044]\n"," [0.018 0.045 0.021]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[0.033 0.000 0.000]\n"," [-0.747 0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.243 0.210 0.110]\n"," [-0.847 0.000 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.052 -0.103 -0.096]\n"," [0.031 0.026 0.014]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.158 0.107 0.014]\n"," [-0.069 0.026 0.014]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.241 -0.224 -0.154]\n"," [0.128 0.075 0.024]]\n","Analytical Jacobian:\n"," [[-0.210 -0.210 -0.110]\n"," [0.100 -0.000 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.031 -0.014 -0.044]\n"," [0.028 0.075 0.024]]\n","------------------------------------------------------------------------------------------\n"]}]},{"cell_type":"markdown","source":["### Check with metrics"],"metadata":{"id":"nvyYCnT3IQwp"}},{"cell_type":"code","source":["# Estrai joint angles e ground truth\n","joint_angles = torch.tensor(X_test[['j0', 'j1', 'j2']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","L3 = 0.11  # Length of the third link\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)"],"metadata":{"id":"Ts03ElPAq5lf","executionInfo":{"status":"ok","timestamp":1733528119117,"user_tz":-60,"elapsed":244,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"2C39KPrDIRIo","executionInfo":{"status":"ok","timestamp":1733528123618,"user_tz":-60,"elapsed":1062,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"f04d1800-aa64-4d88-ec03-31b9db2bd117"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"Mb2X0plhrFcq","executionInfo":{"status":"ok","timestamp":1733528125772,"user_tz":-60,"elapsed":575,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"7a957682-7324-4f1b-f2ce-03fcbe3e4680"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"8rSxlDx3IRSM","executionInfo":{"status":"ok","timestamp":1733399750401,"user_tz":-60,"elapsed":1632,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"3252d8aa-de45-44c7-edda-a5106117d7aa"},"execution_count":75,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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H/oc+/LLL+OWW25BTk4OzjnnHBQWFuLnn3/GY489hjVr1mDNmjUB2YGffvoJTz31FKZPn44bbrgBW7duxccff4zffvsNFRUVUZdIvvzyy7j55ptRXFyM888/H/n5+aipqcGmTZvw0Ucf4YILLpD9XKeccgrOPPNMfP7551izZg2mT58e8nie5zF37lx88sknGDp0KG655RZ0dHTg/fffx7nnnotnnnkGd955Z8Djgn2njLvuugsbN27EOeecA61Wi/feew+XXnopcnNz8fzzz2P79u0466yzYLFY8M477+CPf/wjduzYEdNM4Y8//ojHH38c06dPx/XXXx8QKP3973/HmjVr8Mc//hEzZsyAVqsFAPz++++YMmUK6uvrcc4552DkyJGoqKjA66+/jhUrVuD777/H0KFDA17vggsuwC+//IJZs2YhJycHAwYMAM/zmDlzJjZu3IjJkydj1qxZ0Gg0OHDgAD799FNcccUVITM1LAB89tlnAbh/CwCQk5MjHDN//nw8//zz6N27N6699loA7mD+6quvxtatW/Hcc88p/myiAdtgmDFjRsB9M2fOxLJly/Dtt99i6tSpso4HgG+//Tbs6+bn5wMA9u3bB6fTKXyvodixYwceeughTJ8+Heeffz7S09Oxc+dOvPPOO1i5ciW2bNki+T09++yzWLt2Lf74xz/i1FNPxfLly3H77bfDbDZj69atWL58Oc4++2ycdtppeO+99zBv3jyUlJQI71mMknlOiqamJkydOhXbtm3D5MmTceONN6K1tRWffPIJpk+fjg8++ADnnXceAHf2b/Lkydi/fz9mzJiB888/HzabDZWVlfjPf/6Dv/zlLz4BMkEQMuEJgiBUUFlZyQPgBw0axC9YsCDg3/r163me5/mlS5fyAHiNRsOvXr064HmuvvpqHgB/3333+dy+cuVKHgA/ePBg3ul0CrfPmzePB8AXFBTwVVVVwu1Wq5WfOnUqD4D/8MMPhdu3bdvG63Q6fvTo0XxDQ4PPayxevJgHwC9ZskS4bc2aNTwAHgD/3nvv+Rx/xRVX8AD4d9991+f2/v378/379/e5jY2zsrIy4D0vWLCAB8CvWbNGuG3cuHG8wWDga2trA473H3cwpk2bxgPgq6ur+V9++YXXaDT8hAkTeJfLJRwzbNgw3n/qf+ONN3gA/LRp03ir1SrcfuDAAb5H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36Lrprj5zW9+g66uLowfPx5OpxORSAQPPvggLrvsMgCga4dIi5ZrpLm5GTU1NQk/d7lcGDhwoG2uIwq2CCKPuemmm9DY2IjPPvss16dC2Jzdu3fj1ltvxQcffACfz5fr0yHyBJ7nMXnyZDz00EMAgGOPPRaNjY1YuHAh5syZk+OzI+zM3//+d7z88st45ZVXcNRRR2HDhg247bbbMGzYMLp2iKKCZIQ2YvDgwXA6nSnuX/v370ddXV2OzoqwKzfffDPeffddLFu2DCNGjBAfr6urQzAYREdHR8LxdB0VN19++SVaWlpw3HHHweVyweVy4ZNPPsGf//xnuFwu1NbW0nVDpDB06FDU19cnPHbkkUdi165dACBeG3TfIpK588478Zvf/AaXXHIJJk6ciH//93/H7bffjgULFgCga4dIj5ZrpK6uLsVELhwOo7293TbXEQVbNsLj8eD444/HRx99JD7G8zw++ugjTJ8+PYdnRtgJQRBw8803480338THH3+MsWPHJvz8+OOPh9vtTriONm/ejF27dtF1VMScfvrp+Oabb7Bhwwbxf5MnT8Zll10m/jddN0QyJ510UspoiS1btmD06NEAgLFjx6Kuri7huunq6sLq1avpuily+vr64HAkbjOdTid4ngdA1w6RHi3XyPTp09HR0YEvv/xSPObjjz8Gz/OYOnVq1s9Zllw7dBCJvPbaa4LX6xVeeOEFYePGjcL1118vVFdXC83Nzbk+NcImzJ07V6iqqhKWL18uNDU1if/r6+sTj/nlL38pjBo1Svj444+FL774Qpg+fbowffr0HJ41YUekboSCQNcNkcqaNWsEl8slPPjgg8LWrVuFl19+WSgtLRVeeukl8ZiHH35YqK6uFt5++23h66+/Fs455xxh7NixQn9/fw7PnMg1c+bMEYYPHy68++67wo4dO4Q33nhDGDx4sPDrX/9aPIauHaK7u1tYv369sH79egGA8Pjjjwvr168XfvjhB0EQtF0js2bNEo499lhh9erVwmeffSYcdthhwqWXXpqrl5QCBVs25MknnxRGjRoleDweYcqUKcKqVatyfUqEjQAg+7/nn39ePKa/v1+48cYbhQEDBgilpaXCeeedJzQ1NeXupAlbkhxs0XVDyLF48WJhwoQJgtfrFcaPHy8888wzCT/neV649957hdraWsHr9Qqnn366sHnz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\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta, L1, L2, L3)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"cLXxs8txrOxZ","executionInfo":{"status":"ok","timestamp":1733399753288,"user_tz":-60,"elapsed":1074,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"d9ddcf96-a1fa-443f-9f90-fcf1176671bb"},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Inverse Kinematics"],"metadata":{"id":"wUDWDLpIZaOY"}},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=100000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n","\n"],"metadata":{"id":"I54Zi3ChZZd9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT_3_ARMS_models/1K_model_state_dict_r3\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()\n","\n","initial_joints = torch.tensor([0.0, np.pi/4, 0.0], requires_grad=True)\n","#target_position = torch.tensor([-0.1, -0.1])\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bWBMo-6MZZu1","executionInfo":{"status":"ok","timestamp":1733178266461,"user_tz":-60,"elapsed":309,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"077d52f0-2ff3-48b5-eeac-4b35be77365a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0.0760, 0.1120])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.14915327727794647\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.6046,  1.5416,  1.3569])\n","Levenberg-Marquardt Error: 9.975397551897913e-05\n"," \n","--------------------------------------\n","Comparison target: tensor([0.0760, 0.1120]) Value computed by Newton-Raphson Method:  tensor([0.2214, 0.1453])\n","Comparison target: tensor([0.0760, 0.1120]) Value computed by Levenberg Marquardt:  tensor([0.0760, 0.1121])\n"]}]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=50000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=100000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.0, np.pi/4, 0.0]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pss2Me33b2gX","executionInfo":{"status":"ok","timestamp":1733178278646,"user_tz":-60,"elapsed":1275,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"3ec2f3a0-2b63-4714-8824-5d213682e8dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([0.0760, 0.1120])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: linalg.solve: A must be batches of square matrices, but they are 2 by 3 matrices\n","Target joints Newton-Raphson: tensor([0.0000, 0.7854, 0.0000])\n","Newton-Raphson Error: 0.1338593943560031\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.9697,  1.9008,  1.3109])\n","Levenberg-Marquardt Error: 9.984741518083457e-05\n","--------------------------------------\n","Comparison target: tensor([0.0760, 0.1120]) Value computed by Newton-Raphson Method:  tensor([0.2097, 0.1179], dtype=torch.float64)\n","Comparison target: tensor([0.0760, 0.1120]) Value computed by Levenberg-Marquardt Method:  tensor([0.0761, 0.1121], dtype=torch.float64)\n"]}]}],"metadata":{"colab":{"toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyMmvB3GAEBdTZv28vbIECu8"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}