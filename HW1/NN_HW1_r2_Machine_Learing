{"cells":[{"cell_type":"markdown","metadata":{"id":"ugr4y9zhEIsr"},"source":["# 100 K Part 1"]},{"cell_type":"markdown","metadata":{"id":"EfEtOaq8m0PN"},"source":["# Import of Libraries"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":16054,"status":"ok","timestamp":1733533433024,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"ePd3RFX9ms2a"},"outputs":[],"source":["import pandas as pd\n","import sys, time\n","import csv\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.multioutput import MultiOutputRegressor      # necessary because we have multiple output\n","from sklearn.linear_model import LinearRegression         # 1 model -> Linear Regression\n","from sklearn.tree import DecisionTreeRegressor            # 2 model -> Decision Tree\n","from sklearn.neighbors import KNeighborsRegressor         # 3 model -> KNN\n","from sklearn.svm import SVR                               # 4 model -> SVM\n","from sklearn.ensemble import RandomForestRegressor        # 5 model -> Random Forest (a set of decision tree)\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.metrics import mean_squared_error, r2_score, root_mean_squared_error\n","from sklearn.model_selection import ParameterGrid\n","import warnings\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from tqdm import tqdm\n","import os"]},{"cell_type":"markdown","metadata":{"id":"D6j7ORSGn4yW"},"source":["# Dataset\n","The dataset is a file .csv composed by these attributes joint angles: j0, j1, cos(j0), cos(j1), sin(j0), sin(j1), fingertip position: ft_x, ft_y ft_qw, ft_qz. The file is created by following the professor code present in this [repository](https://github.com/iocchi/MLexercises.git) and saving the generated file on google drive.\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19418,"status":"ok","timestamp":1733533452440,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"zEQf2TkjnssL","outputId":"990db837-ef0e-4c30-b46c-3d357b2e3a97"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#connect to google drive for install the file\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"bAb7ZKQcDYWy"},"source":["## Exploring the dataset"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":1582,"status":"ok","timestamp":1733533454016,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"RPjpqqMHn-Ep"},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2.csv\",sep=';')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":271,"status":"ok","timestamp":1732466693804,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"l995QpJQdsHp","outputId":"d9a8fe56-cae4-49af-bbd6-903e877b5520"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 100000 entries, 0 to 99999\n","Data columns (total 10 columns):\n"," #   Column   Non-Null Count   Dtype  \n","---  ------   --------------   -----  \n"," 0   j0       100000 non-null  float64\n"," 1   j1       100000 non-null  float64\n"," 2   cos(j0)  100000 non-null  float64\n"," 3   cos(j1)  100000 non-null  float64\n"," 4   sin(j0)  100000 non-null  float64\n"," 5   sin(j1)  100000 non-null  float64\n"," 6   ft_x     100000 non-null  float64\n"," 7   ft_y     100000 non-null  float64\n"," 8   ft_qw    100000 non-null  float64\n"," 9   ft_qz    100000 non-null  float64\n","dtypes: float64(10)\n","memory usage: 7.6 MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":258,"status":"ok","timestamp":1732466695793,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9MEahoK9d7o5","outputId":"9a770d4e-1452-459f-aace-acf8a19b5a04"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"j0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.2310278669,\n        \"min\": -3.368,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.0033798599999999906,\n          0.012,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.25028770478,\n        \"min\": -3.278,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.049217529999999995,\n          -0.103,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.36217506051,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.23852683999999996,\n          -0.474,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.35472851166,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.20643464000000003,\n          -0.413,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.306131464415,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.00388186,\n          0.001,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.310819800216,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.013432510000000002,\n          -0.054,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.33826421162,\n        \"min\": -0.21,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.01863603,\n          -0.009,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.334280720475,\n        \"min\": -0.21,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0005402499999999998,\n          0.001,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.24209561064,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.25163276999999995,\n          0.449,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qz\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.306410344376,\n        \"min\": -1.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.008542809999999998,\n          -0.017,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-0409d7ca-3bed-48e0-af15-a8000472606b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>j0</th>\n","      <th>j1</th>\n","      <th>cos(j0)</th>\n","      <th>cos(j1)</th>\n","      <th>sin(j0)</th>\n","      <th>sin(j1)</th>\n","      <th>ft_x</th>\n","      <th>ft_y</th>\n","      <th>ft_qw</th>\n","      <th>ft_qz</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","      <td>100000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-0.003380</td>\n","      <td>-0.049218</td>\n","      <td>-0.238527</td>\n","      <td>-0.206435</td>\n","      <td>0.003882</td>\n","      <td>-0.013433</td>\n","      <td>-0.018636</td>\n","      <td>0.000540</td>\n","      <td>0.251633</td>\n","      <td>-0.008543</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.159701</td>\n","      <td>2.076128</td>\n","      <td>0.732016</td>\n","      <td>0.724354</td>\n","      <td>0.638176</td>\n","      <td>0.657672</td>\n","      <td>0.095383</td>\n","      <td>0.090075</td>\n","      <td>0.678526</td>\n","      <td>0.690093</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-3.368000</td>\n","      <td>-3.278000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","      <td>-0.210000</td>\n","      <td>-0.210000</td>\n","      <td>-1.000000</td>\n","      <td>-1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-2.076000</td>\n","      <td>-2.055000</td>\n","      <td>-0.959000</td>\n","      <td>-0.921000</td>\n","      <td>-0.563000</td>\n","      <td>-0.622000</td>\n","      <td>-0.080000</td>\n","      <td>-0.055000</td>\n","      <td>-0.353250</td>\n","      <td>-0.683000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.012000</td>\n","      <td>-0.103000</td>\n","      <td>-0.474000</td>\n","      <td>-0.413000</td>\n","      <td>0.001000</td>\n","      <td>-0.054000</td>\n","      <td>-0.009000</td>\n","      <td>0.001000</td>\n","      <td>0.449000</td>\n","      <td>-0.017000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.055000</td>\n","      <td>1.938000</td>\n","      <td>0.482000</td>\n","      <td>0.506000</td>\n","      <td>0.572000</td>\n","      <td>0.591000</td>\n","      <td>0.028000</td>\n","      <td>0.058000</td>\n","      <td>0.894000</td>\n","      <td>0.665000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.361000</td>\n","      <td>3.230000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.210000</td>\n","      <td>0.210000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0409d7ca-3bed-48e0-af15-a8000472606b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0409d7ca-3bed-48e0-af15-a8000472606b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0409d7ca-3bed-48e0-af15-a8000472606b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8bb2f705-4b75-48f3-8d11-698f77eba065\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8bb2f705-4b75-48f3-8d11-698f77eba065')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8bb2f705-4b75-48f3-8d11-698f77eba065 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["                  j0             j1        cos(j0)        cos(j1)  \\\n","count  100000.000000  100000.000000  100000.000000  100000.000000   \n","mean       -0.003380      -0.049218      -0.238527      -0.206435   \n","std         2.159701       2.076128       0.732016       0.724354   \n","min        -3.368000      -3.278000      -1.000000      -1.000000   \n","25%        -2.076000      -2.055000      -0.959000      -0.921000   \n","50%         0.012000      -0.103000      -0.474000      -0.413000   \n","75%         2.055000       1.938000       0.482000       0.506000   \n","max         3.361000       3.230000       1.000000       1.000000   \n","\n","             sin(j0)        sin(j1)           ft_x           ft_y  \\\n","count  100000.000000  100000.000000  100000.000000  100000.000000   \n","mean        0.003882      -0.013433      -0.018636       0.000540   \n","std         0.638176       0.657672       0.095383       0.090075   \n","min        -1.000000      -1.000000      -0.210000      -0.210000   \n","25%        -0.563000      -0.622000      -0.080000      -0.055000   \n","50%         0.001000      -0.054000      -0.009000       0.001000   \n","75%         0.572000       0.591000       0.028000       0.058000   \n","max         1.000000       1.000000       0.210000       0.210000   \n","\n","               ft_qw          ft_qz  \n","count  100000.000000  100000.000000  \n","mean        0.251633      -0.008543  \n","std         0.678526       0.690093  \n","min        -1.000000      -1.000000  \n","25%        -0.353250      -0.683000  \n","50%         0.449000      -0.017000  \n","75%         0.894000       0.665000  \n","max         1.000000       1.000000  "]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":308,"status":"ok","timestamp":1732466697034,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"fnCLwj1Mg63c","outputId":"085921d4-7a68-46b0-9604-21d12faa981d"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"j0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1597009594452135,\n        \"min\": -3.368,\n        \"max\": 3.361,\n        \"num_unique_values\": 6648,\n        \"samples\": [\n          2.932,\n          1.854,\n          1.146\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"j1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0761275270622948,\n        \"min\": -3.278,\n        \"max\": 3.23,\n        \"num_unique_values\": 6377,\n        \"samples\": [\n          0.893,\n          -0.215,\n          -0.812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7320162544763793,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.076,\n          -0.193,\n          -0.654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cos(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7243537556275337,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.595,\n          -0.188,\n          0.154\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6381761933130115,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.656,\n          -0.066,\n          0.893\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sin(j1)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6576717070437431,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          0.802,\n          -0.446,\n          0.287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09538271391850628,\n        \"min\": -0.21,\n        \"max\": 0.21,\n        \"num_unique_values\": 421,\n        \"samples\": [\n          0.098,\n          0.147,\n          0.121\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09007539661699374,\n        \"min\": -0.21,\n        \"max\": 0.21,\n        \"num_unique_values\": 421,\n        \"samples\": [\n          0.038,\n          -0.172,\n          0.118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qw\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6785257863519805,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          -0.002,\n          0.5,\n          -0.529\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ft_qz\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6900927172973972,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2001,\n        \"samples\": [\n          0.127,\n          -0.519,\n          -0.023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-558be526-09f5-4688-a9de-805ae3a2125d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>j0</th>\n","      <th>j1</th>\n","      <th>cos(j0)</th>\n","      <th>cos(j1)</th>\n","      <th>sin(j0)</th>\n","      <th>sin(j1)</th>\n","      <th>ft_x</th>\n","      <th>ft_y</th>\n","      <th>ft_qw</th>\n","      <th>ft_qz</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.004</td>\n","      <td>0.021</td>\n","      <td>1.0</td>\n","      <td>1.000</td>\n","      <td>0.004</td>\n","      <td>0.021</td>\n","      <td>0.210</td>\n","      <td>0.003</td>\n","      <td>1.000</td>\n","      <td>0.013</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.006</td>\n","      <td>0.029</td>\n","      <td>1.0</td>\n","      <td>1.000</td>\n","      <td>0.006</td>\n","      <td>0.029</td>\n","      <td>0.210</td>\n","      <td>0.004</td>\n","      <td>1.000</td>\n","      <td>0.017</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.007</td>\n","      <td>0.022</td>\n","      <td>1.0</td>\n","      <td>1.000</td>\n","      <td>0.007</td>\n","      <td>0.022</td>\n","      <td>0.210</td>\n","      <td>0.004</td>\n","      <td>1.000</td>\n","      <td>0.014</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.008</td>\n","      <td>-0.033</td>\n","      <td>1.0</td>\n","      <td>0.999</td>\n","      <td>0.008</td>\n","      <td>-0.033</td>\n","      <td>0.210</td>\n","      <td>-0.002</td>\n","      <td>1.000</td>\n","      <td>-0.013</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.006</td>\n","      <td>-0.091</td>\n","      <td>1.0</td>\n","      <td>0.996</td>\n","      <td>-0.006</td>\n","      <td>-0.091</td>\n","      <td>0.209</td>\n","      <td>-0.011</td>\n","      <td>0.999</td>\n","      <td>-0.049</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-558be526-09f5-4688-a9de-805ae3a2125d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-558be526-09f5-4688-a9de-805ae3a2125d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-558be526-09f5-4688-a9de-805ae3a2125d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0ec09236-ce8c-4f6a-b125-e885af6771d0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ec09236-ce8c-4f6a-b125-e885af6771d0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0ec09236-ce8c-4f6a-b125-e885af6771d0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["      j0     j1  cos(j0)  cos(j1)  sin(j0)  sin(j1)   ft_x   ft_y  ft_qw  \\\n","0  0.004  0.021      1.0    1.000    0.004    0.021  0.210  0.003  1.000   \n","1  0.006  0.029      1.0    1.000    0.006    0.029  0.210  0.004  1.000   \n","2  0.007  0.022      1.0    1.000    0.007    0.022  0.210  0.004  1.000   \n","3  0.008 -0.033      1.0    0.999    0.008   -0.033  0.210 -0.002  1.000   \n","4 -0.006 -0.091      1.0    0.996   -0.006   -0.091  0.209 -0.011  0.999   \n","\n","   ft_qz  \n","0  0.013  \n","1  0.017  \n","2  0.014  \n","3 -0.013  \n","4 -0.049  "]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":265,"status":"ok","timestamp":1730906828618,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"FtE5HtnwFWpE","outputId":"3b8677e0-bfc6-4552-8aef-684d0526be9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["No missing values in the dataset.\n"]}],"source":["# Check for null values in each column\n","null_values = df.isnull().sum()\n","\n","null_columns = null_values[null_values > 0]\n","\n","if not null_columns.empty:\n","    print(\"Columns with missing values:\")\n","    print(null_columns)\n","else:\n","    print(\"No missing values in the dataset.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":4376,"status":"ok","timestamp":1732607837760,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"iAzca-UOcx6u","outputId":"e1a63c7c-9e74-4b2a-fbda-65b632ea4e44"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# compute heatmap\n","df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","plt.scatter(df_filtered['ft_x'], df_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')  # Mantieni proporzioni reali per x e y\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":1084,"status":"ok","timestamp":1732607999783,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"NirXwRVqe53h","outputId":"c579feb7-a529-4930-9ee5-80c058b707e5"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# compute the heatmap\n","heatmap, xedges, yedges = np.histogram2d(df_filtered['ft_x'], df_filtered['ft_y'], bins=50)\n","\n","# visualize heatmap\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"YfdIvckKG-s2"},"source":["## Creation of Dataset for Training Validation and Test\n","At the begin what will do is split the dataset in traing validation and test after i will use one file for traing/validation and another for test in order to see how model perform with data (position od finger tips) never seen before\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1733533454016,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"SOkHECCaHGka","outputId":"e43b7e0b-3718-4753-b8d8-b28a23619545"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training set size: 60000\n","Validation set size: 20000\n","Test set size: 20000\n"]}],"source":["# Select few columns\n","df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","# Define features (X) and target (Y)\n","X = df_filtered[['j0', 'j1']]\n","y = df_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"markdown","metadata":{"id":"_OlcYwEEGszD"},"source":["# Model\n"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":12,"status":"ok","timestamp":1733403027918,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"kUx9UifOD3O2"},"outputs":[],"source":["def evaluate_model(model, X_test, y_test):\n","    predictions = model.predict(X_test)\n","    rmse = mean_squared_error(y_test, predictions, squared=False)\n","    r2 = r2_score(y_test, predictions)\n","    return rmse, r2"]},{"cell_type":"markdown","metadata":{"id":"goWwFqCVGzBX"},"source":["## 1 Model Linear Regression"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1733403027918,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"yVxBX7_rFjsW","outputId":"fc8eb5b7-856b-4745-edbd-7f09b2f7b98f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MultiOutputRegressor(estimator=LinearRegression())"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MultiOutputRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.multioutput.MultiOutputRegressor.html\">?<span>Documentation for MultiOutputRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: LinearRegression</label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":7}],"source":["# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1733403027918,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"72QtH4DKMcpm","outputId":"4adf76eb-aa26-4f94-9897-aac5c8b85d12"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.0897855340821489, R2: 0.06741245276816066\n"]}],"source":["# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n"]},{"cell_type":"markdown","metadata":{"id":"c-mW0a2aQ89O"},"source":["The model has low errors on average (small MSE) but does not generalize well (low R2) to explain the variance in the data.\n","This combination indicate that model is underfitting so that mean Linear Regressin is not complex enough to capture these patterns."]},{"cell_type":"markdown","metadata":{"id":"sn2t9M0dSANL"},"source":["## 2 Model Decision Tree Regressor"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":13595,"status":"ok","timestamp":1733403041508,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"786J697rSAdg","outputId":"6f17685b-b7c7-4856-c832-36376dca4347"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={'max_depth': [5, 10, 20],\n","                         'splitter': ['best', 'random']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [5, 10, 20],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [5, 10, 20],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: DecisionTreeRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":9}],"source":["# test\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [5, 10, 20]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1733403041509,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"Kxhkv9DISAsx","outputId":"969057be-53a1-4faf-fd35-37445789ce23"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Best Params: {'max_depth': 20, 'splitter': 'best'}\n","Decision Tree RMSE: 0.0022453268128118657, R2: 0.9994150937809528\n"]}],"source":["# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree Best Params: {dt_grid.best_params_}\")\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"EDMGvW4BEXyA"},"source":["## 3 Model SVR"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":13823,"status":"ok","timestamp":1733403055327,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"8u0SchgXEj8Y","outputId":"a15b8cdf-a1ff-4bf8-d8c4-110e4a492009"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={'estimator__C': [0.1, 1, 10],\n","                         'estimator__epsilon': [0.01, 0.1, 1],\n","                         'estimator__kernel': ['linear', 'rbf'],\n","                         'estimator__max_iter': [50]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-3 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-3 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-3 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-3 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-3 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-3 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-3 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-3 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-3 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-3 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-3 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-3 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-3 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-3 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-3 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-3 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-3 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [50]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [50]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=SVR(C=1, epsilon=0.01, max_iter=50))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: SVR</label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=1, epsilon=0.01, max_iter=50)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SVR<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVR.html\">?<span>Documentation for SVR</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=1, epsilon=0.01, max_iter=50)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":11}],"source":["# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [50]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1733403055582,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"j7XUdg5lEwtr","outputId":"a92adff7-d8cc-476d-b2bc-87607723af46"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVR Best Params: {'estimator__C': 1, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 50}\n","SVR RMSE: 0.019846213881351233, R2: 0.9520348619612518\n"]}],"source":["# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"U9XmGyHjE89J"},"source":["## 4 Model Random Forest Regressor\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"BuTBtDBmFDOU","executionInfo":{"status":"ok","timestamp":1733403325185,"user_tz":-60,"elapsed":269608,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"7e6e66fb-b159-4006-9692-6125e2a535ee"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={'estimator__max_depth': [5, 12],\n","                         'estimator__n_estimators': [100, 150]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-4 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-4 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-4 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-4 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-4 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-4 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-4 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-4 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-4 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-4 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-4 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-4 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-4 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-4 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-4 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-4 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-4 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [5, 12],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [5, 12],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=RandomForestRegressor(max_depth=12,\n","                                                     n_estimators=150,\n","                                                     random_state=42))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=12, n_estimators=150, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=12, n_estimators=150, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":13}],"source":["# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [5, 12]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6NkLg2mAFHQh","executionInfo":{"status":"ok","timestamp":1733403326216,"user_tz":-60,"elapsed":1036,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"d242e6e8-62ac-4200-a457-50524bef820a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Best Params: {'estimator__max_depth': 12, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.005259835141469384, R2: 0.9967991344681727\n"]}],"source":["#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"eMhN83CfFR-E"},"source":["## 5 Model KNN regressor"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":8612,"status":"ok","timestamp":1733403334824,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"84VsiTOmFQ2J","outputId":"986a0c56-5c87-4d7c-9f44-e97e19d5a3e3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={'estimator__n_neighbors': [3, 5, 10],\n","                         'estimator__p': [1, 2],\n","                         'estimator__weights': ['uniform', 'distance']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-5 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-5 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-5 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-5 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-5 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-5 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-5 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-5 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-5 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-5 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-5 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-5 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-5 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-5 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-5 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-5 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-5 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-5 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-5 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-5 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=KNeighborsRegressor(n_neighbors=10,\n","                                                   weights=&#x27;distance&#x27;))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: KNeighborsRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;KNeighborsRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsRegressor.html\">?<span>Documentation for KNeighborsRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":15}],"source":["# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1733403335195,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"l2waOHdeFdVi","outputId":"026c8fec-900a-4200-ddea-5cb4d9baf863"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Best Params: {'estimator__n_neighbors': 10, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.0010309962429658718, R2: 0.9998762531205969\n"]}],"source":["#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"D4vGKG7jY4Uu"},"source":["## 6 Model NN Neural Network\n","This will be the actual model that i will use for train. More in detail\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1733533454016,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"1E4AAqhGa06p"},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1733533454016,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"cNsrP8jmJ2G0"},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 2  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7KGysCDgNqhV"},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001],\n","    'hidden_sizes': [[8, 16, 8], [8, 16, 32, 16, 8], [16, 32, 64, 32, 16]],\n","    'optimizer': ['Adam', 'SGD']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 50\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47238,"status":"ok","timestamp":1733221360044,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"UBVlTliyOJiS","outputId":"ffd9fb90-4fd4-4066-bfcb-0a494543f41e"},"outputs":[{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0263, Validation Loss: 0.0174\n","Epoch [2/50], Training Loss: 0.0173, Validation Loss: 0.0137\n","Epoch [3/50], Training Loss: 0.0136, Validation Loss: 0.0116\n","Epoch [4/50], Training Loss: 0.0115, Validation Loss: 0.0101\n","Epoch [5/50], Training Loss: 0.0100, Validation Loss: 0.0090\n","Epoch [6/50], Training Loss: 0.0090, Validation Loss: 0.0085\n","Epoch [7/50], Training Loss: 0.0085, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0086, Validation Loss: 0.0088\n","Epoch [9/50], Training Loss: 0.0089, Validation Loss: 0.0090\n","Epoch [10/50], Training Loss: 0.0090, Validation Loss: 0.0088\n","Epoch [11/50], Training Loss: 0.0088, Validation Loss: 0.0082\n","Epoch [12/50], Training Loss: 0.0083, Validation Loss: 0.0077\n","Epoch [13/50], Training Loss: 0.0077, Validation Loss: 0.0073\n","Epoch [14/50], Training Loss: 0.0073, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 35.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0071, Validation Loss: 0.0071\n","Epoch [16/50], Training Loss: 0.0071, Validation Loss: 0.0071\n","Epoch [17/50], Training Loss: 0.0071, Validation Loss: 0.0072\n","Epoch [18/50], Training Loss: 0.0072, Validation Loss: 0.0073\n","Epoch [19/50], Training Loss: 0.0073, Validation Loss: 0.0073\n","Epoch [20/50], Training Loss: 0.0073, Validation Loss: 0.0073\n","Epoch [21/50], Training Loss: 0.0073, Validation Loss: 0.0072\n","Epoch [22/50], Training Loss: 0.0071, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 34.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0069, Validation Loss: 0.0067\n","Epoch [24/50], Training Loss: 0.0067, Validation Loss: 0.0065\n","Epoch [25/50], Training Loss: 0.0065, Validation Loss: 0.0063\n","Epoch [26/50], Training Loss: 0.0063, Validation Loss: 0.0062\n","Epoch [27/50], Training Loss: 0.0062, Validation Loss: 0.0061\n","Epoch [28/50], Training Loss: 0.0061, Validation Loss: 0.0060\n","Epoch [29/50], Training Loss: 0.0060, Validation Loss: 0.0060\n","Epoch [30/50], Training Loss: 0.0060, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 34.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0060, Validation Loss: 0.0059\n","Epoch [32/50], Training Loss: 0.0059, Validation Loss: 0.0058\n","Epoch [33/50], Training Loss: 0.0058, Validation Loss: 0.0057\n","Epoch [34/50], Training Loss: 0.0057, Validation Loss: 0.0055\n","Epoch [35/50], Training Loss: 0.0056, Validation Loss: 0.0054\n","Epoch [36/50], Training Loss: 0.0054, Validation Loss: 0.0053\n","Epoch [37/50], Training Loss: 0.0053, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 32.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [39/50], Training Loss: 0.0051, Validation Loss: 0.0050\n","Epoch [40/50], Training Loss: 0.0050, Validation Loss: 0.0049\n","Epoch [41/50], Training Loss: 0.0049, Validation Loss: 0.0048\n","Epoch [42/50], Training Loss: 0.0048, Validation Loss: 0.0047\n","Epoch [43/50], Training Loss: 0.0047, Validation Loss: 0.0046\n","Epoch [44/50], Training Loss: 0.0046, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 33.25it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0045, Validation Loss: 0.0043\n","Epoch [46/50], Training Loss: 0.0043, Validation Loss: 0.0042\n","Epoch [47/50], Training Loss: 0.0042, Validation Loss: 0.0041\n","Epoch [48/50], Training Loss: 0.0041, Validation Loss: 0.0040\n","Epoch [49/50], Training Loss: 0.0040, Validation Loss: 0.0039\n","Epoch [50/50], Training Loss: 0.0039, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1002, Validation Loss: 0.0974\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0974, Validation Loss: 0.0947\n","Epoch [3/50], Training Loss: 0.0947, Validation Loss: 0.0921\n","Epoch [4/50], Training Loss: 0.0921, Validation Loss: 0.0896\n","Epoch [5/50], Training Loss: 0.0895, Validation Loss: 0.0871\n","Epoch [6/50], Training Loss: 0.0871, Validation Loss: 0.0848\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:01, 31.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0848, Validation Loss: 0.0825\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 30.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0825, Validation Loss: 0.0803\n","Epoch [9/50], Training Loss: 0.0803, Validation Loss: 0.0782\n","Epoch [10/50], Training Loss: 0.0781, Validation Loss: 0.0761\n","Epoch [11/50], Training Loss: 0.0761, Validation Loss: 0.0741\n","Epoch [12/50], Training Loss: 0.0741, Validation Loss: 0.0722\n","Epoch [13/50], Training Loss: 0.0722, Validation Loss: 0.0703\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 30.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0703, Validation Loss: 0.0685\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 30.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0685, Validation Loss: 0.0668\n","Epoch [16/50], Training Loss: 0.0668, Validation Loss: 0.0651\n","Epoch [17/50], Training Loss: 0.0651, Validation Loss: 0.0635\n","Epoch [18/50], Training Loss: 0.0634, Validation Loss: 0.0619\n","Epoch [19/50], Training Loss: 0.0619, Validation Loss: 0.0604\n","Epoch [20/50], Training Loss: 0.0603, Validation Loss: 0.0589\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 30.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0589, Validation Loss: 0.0575\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 30.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0574, Validation Loss: 0.0561\n","Epoch [23/50], Training Loss: 0.0561, Validation Loss: 0.0548\n","Epoch [24/50], Training Loss: 0.0547, Validation Loss: 0.0535\n","Epoch [25/50], Training Loss: 0.0534, Validation Loss: 0.0522\n","Epoch [26/50], Training Loss: 0.0522, Validation Loss: 0.0510\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 30.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0510, Validation Loss: 0.0498\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0498, Validation Loss: 0.0487\n","Epoch [29/50], Training Loss: 0.0487, Validation Loss: 0.0476\n","Epoch [30/50], Training Loss: 0.0476, Validation Loss: 0.0465\n","Epoch [31/50], Training Loss: 0.0465, Validation Loss: 0.0455\n","Epoch [32/50], Training Loss: 0.0455, Validation Loss: 0.0445\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0445, Validation Loss: 0.0435\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:01<00:00, 29.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0435, Validation Loss: 0.0426\n","Epoch [35/50], Training Loss: 0.0425, Validation Loss: 0.0416\n","Epoch [36/50], Training Loss: 0.0416, Validation Loss: 0.0408\n","Epoch [37/50], Training Loss: 0.0407, Validation Loss: 0.0399\n","Epoch [38/50], Training Loss: 0.0399, Validation Loss: 0.0391\n","Epoch [39/50], Training Loss: 0.0390, Validation Loss: 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:01<00:00, 29.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0382, Validation Loss: 0.0375\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:01<00:00, 30.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0375, Validation Loss: 0.0367\n","Epoch [42/50], Training Loss: 0.0367, Validation Loss: 0.0360\n","Epoch [43/50], Training Loss: 0.0360, Validation Loss: 0.0353\n","Epoch [44/50], Training Loss: 0.0352, Validation Loss: 0.0346\n","Epoch [45/50], Training Loss: 0.0346, Validation Loss: 0.0339\n","Epoch [46/50], Training Loss: 0.0339, Validation Loss: 0.0333\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 29.71it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0332, Validation Loss: 0.0326\n","Epoch [48/50], Training Loss: 0.0326, Validation Loss: 0.0320\n","Epoch [49/50], Training Loss: 0.0320, Validation Loss: 0.0315\n","Epoch [50/50], Training Loss: 0.0314, Validation Loss: 0.0309\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0084, Validation Loss: 0.0081\n","Epoch [2/50], Training Loss: 0.0081, Validation Loss: 0.0078\n","Epoch [3/50], Training Loss: 0.0078, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 36.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0076, Validation Loss: 0.0074\n","Epoch [5/50], Training Loss: 0.0074, Validation Loss: 0.0072\n","Epoch [6/50], Training Loss: 0.0072, Validation Loss: 0.0071\n","Epoch [7/50], Training Loss: 0.0071, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 32.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0070, Validation Loss: 0.0069\n","Epoch [9/50], Training Loss: 0.0069, Validation Loss: 0.0068\n","Epoch [10/50], Training Loss: 0.0068, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 32.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0066, Validation Loss: 0.0066\n","Epoch [12/50], Training Loss: 0.0065, Validation Loss: 0.0065\n","Epoch [13/50], Training Loss: 0.0064, Validation Loss: 0.0064\n","Epoch [14/50], Training Loss: 0.0063, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0062, Validation Loss: 0.0062\n","Epoch [16/50], Training Loss: 0.0061, Validation Loss: 0.0061\n","Epoch [17/50], Training Loss: 0.0061, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0060, Validation Loss: 0.0059\n","Epoch [19/50], Training Loss: 0.0059, Validation Loss: 0.0058\n","Epoch [20/50], Training Loss: 0.0058, Validation Loss: 0.0058\n","Epoch [21/50], Training Loss: 0.0058, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 33.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0057, Validation Loss: 0.0056\n","Epoch [23/50], Training Loss: 0.0056, Validation Loss: 0.0056\n","Epoch [24/50], Training Loss: 0.0056, Validation Loss: 0.0055\n","Epoch [25/50], Training Loss: 0.0055, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 34.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0054, Validation Loss: 0.0054\n","Epoch [27/50], Training Loss: 0.0054, Validation Loss: 0.0053\n","Epoch [28/50], Training Loss: 0.0053, Validation Loss: 0.0053\n","Epoch [29/50], Training Loss: 0.0053, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 34.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [31/50], Training Loss: 0.0051, Validation Loss: 0.0051\n","Epoch [32/50], Training Loss: 0.0051, Validation Loss: 0.0050\n","Epoch [33/50], Training Loss: 0.0050, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 33.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0050, Validation Loss: 0.0049\n","Epoch [35/50], Training Loss: 0.0049, Validation Loss: 0.0048\n","Epoch [36/50], Training Loss: 0.0048, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 32.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0048, Validation Loss: 0.0047\n","Epoch [38/50], Training Loss: 0.0047, Validation Loss: 0.0047\n","Epoch [39/50], Training Loss: 0.0047, Validation Loss: 0.0046\n","Epoch [40/50], Training Loss: 0.0046, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 32.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0046, Validation Loss: 0.0045\n","Epoch [42/50], Training Loss: 0.0045, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 30.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0045, Validation Loss: 0.0044\n","Epoch [44/50], Training Loss: 0.0044, Validation Loss: 0.0044\n","Epoch [45/50], Training Loss: 0.0044, Validation Loss: 0.0043\n","Epoch [46/50], Training Loss: 0.0043, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:01<00:00, 28.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0042, Validation Loss: 0.0042\n","Epoch [48/50], Training Loss: 0.0042, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 31.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0041, Validation Loss: 0.0041\n","Epoch [50/50], Training Loss: 0.0041, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1113, Validation Loss: 0.1112\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:01, 29.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.1108, Validation Loss: 0.1107\n","Epoch [3/50], Training Loss: 0.1103, Validation Loss: 0.1101\n","Epoch [4/50], Training Loss: 0.1097, Validation Loss: 0.1096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:01, 27.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.1092, Validation Loss: 0.1091\n","Epoch [6/50], Training Loss: 0.1087, Validation Loss: 0.1086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:01, 27.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.1082, Validation Loss: 0.1081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 27.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.1077, Validation Loss: 0.1076\n","Epoch [9/50], Training Loss: 0.1072, Validation Loss: 0.1071\n","Epoch [10/50], Training Loss: 0.1067, Validation Loss: 0.1066\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.1062, Validation Loss: 0.1061\n","Epoch [12/50], Training Loss: 0.1057, Validation Loss: 0.1056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 28.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.1052, Validation Loss: 0.1051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 28.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.1047, Validation Loss: 0.1046\n","Epoch [15/50], Training Loss: 0.1042, Validation Loss: 0.1041\n","Epoch [16/50], Training Loss: 0.1038, Validation Loss: 0.1037\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.1033, Validation Loss: 0.1032\n","Epoch [18/50], Training Loss: 0.1028, Validation Loss: 0.1027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  38%|███▊      | 19/50 [00:00<00:01, 28.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.1023, Validation Loss: 0.1023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  38%|███▊      | 19/50 [00:00<00:01, 28.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.1019, Validation Loss: 0.1018\n","Epoch [21/50], Training Loss: 0.1014, Validation Loss: 0.1013\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:00<00:01, 25.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.1009, Validation Loss: 0.1009\n","Epoch [23/50], Training Loss: 0.1005, Validation Loss: 0.1004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:00<00:01, 25.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.1000, Validation Loss: 0.0999\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 25.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0996, Validation Loss: 0.0995\n","Epoch [26/50], Training Loss: 0.0991, Validation Loss: 0.0990\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:00, 24.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0987, Validation Loss: 0.0986\n","Epoch [28/50], Training Loss: 0.0982, Validation Loss: 0.0981\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0978, Validation Loss: 0.0977\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0973, Validation Loss: 0.0973\n","Epoch [31/50], Training Loss: 0.0969, Validation Loss: 0.0968\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  62%|██████▏   | 31/50 [00:01<00:00, 24.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0965, Validation Loss: 0.0964\n","Epoch [33/50], Training Loss: 0.0960, Validation Loss: 0.0960\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 23.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0956, Validation Loss: 0.0955\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 23.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0952, Validation Loss: 0.0951\n","Epoch [36/50], Training Loss: 0.0947, Validation Loss: 0.0947\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 22.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0943, Validation Loss: 0.0943\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 22.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0939, Validation Loss: 0.0939\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 22.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0935, Validation Loss: 0.0934\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0931, Validation Loss: 0.0930\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:01<00:00, 19.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0927, Validation Loss: 0.0926\n","Epoch [42/50], Training Loss: 0.0923, Validation Loss: 0.0922\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:01<00:00, 19.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0919, Validation Loss: 0.0918\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:01<00:00, 19.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0914, Validation Loss: 0.0914\n","Epoch [45/50], Training Loss: 0.0910, Validation Loss: 0.0910\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 19.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0906, Validation Loss: 0.0906\n","Epoch [47/50], Training Loss: 0.0903, Validation Loss: 0.0902\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 19.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0899, Validation Loss: 0.0898\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 23.26it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0895, Validation Loss: 0.0894\n","Epoch [50/50], Training Loss: 0.0891, Validation Loss: 0.0890\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0787, Validation Loss: 0.0621\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:04, 11.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0625, Validation Loss: 0.0498\n","Epoch [3/50], Training Loss: 0.0502, Validation Loss: 0.0412\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:03, 12.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0415, Validation Loss: 0.0337\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:03, 13.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0340, Validation Loss: 0.0264\n","Epoch [6/50], Training Loss: 0.0266, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:03, 13.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0190, Validation Loss: 0.0125\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0126, Validation Loss: 0.0089\n","Epoch [9/50], Training Loss: 0.0090, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  20%|██        | 10/50 [00:00<00:02, 13.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0100, Validation Loss: 0.0133\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0131, Validation Loss: 0.0138\n","Epoch [12/50], Training Loss: 0.0136, Validation Loss: 0.0123\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:01<00:02, 14.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0121, Validation Loss: 0.0104\n","Epoch [14/50], Training Loss: 0.0103, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:01<00:02, 14.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0090, Validation Loss: 0.0084\n","Epoch [16/50], Training Loss: 0.0084, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:01<00:02, 15.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0083, Validation Loss: 0.0084\n","Epoch [18/50], Training Loss: 0.0084, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:01<00:02, 15.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0085, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:01<00:01, 15.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [21/50], Training Loss: 0.0087, Validation Loss: 0.0086\n","Epoch [22/50], Training Loss: 0.0087, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:01<00:01, 15.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  52%|█████▏    | 26/50 [00:01<00:01, 15.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0086, Validation Loss: 0.0084\n","Epoch [25/50], Training Loss: 0.0084, Validation Loss: 0.0082\n","Epoch [26/50], Training Loss: 0.0083, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:02<00:01, 13.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0081, Validation Loss: 0.0079\n","Epoch [28/50], Training Loss: 0.0080, Validation Loss: 0.0078\n","Epoch [29/50], Training Loss: 0.0079, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:02<00:01, 13.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0078, Validation Loss: 0.0078\n","Epoch [31/50], Training Loss: 0.0078, Validation Loss: 0.0078\n","Epoch [32/50], Training Loss: 0.0078, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:02<00:01, 13.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0078, Validation Loss: 0.0078\n","Epoch [34/50], Training Loss: 0.0078, Validation Loss: 0.0078\n","Epoch [35/50], Training Loss: 0.0078, Validation Loss: 0.0077\n","Epoch [36/50], Training Loss: 0.0077, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  76%|███████▌  | 38/50 [00:02<00:00, 14.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0077, Validation Loss: 0.0076\n","Epoch [38/50], Training Loss: 0.0076, Validation Loss: 0.0075\n","Epoch [39/50], Training Loss: 0.0075, Validation Loss: 0.0075\n","Epoch [40/50], Training Loss: 0.0075, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:03<00:00, 14.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0074, Validation Loss: 0.0074\n","Epoch [42/50], Training Loss: 0.0074, Validation Loss: 0.0073\n","Epoch [43/50], Training Loss: 0.0074, Validation Loss: 0.0073\n","Epoch [44/50], Training Loss: 0.0073, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:03<00:00, 15.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0073, Validation Loss: 0.0072\n","Epoch [46/50], Training Loss: 0.0072, Validation Loss: 0.0072\n","Epoch [47/50], Training Loss: 0.0072, Validation Loss: 0.0071\n","Epoch [48/50], Training Loss: 0.0071, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:03<00:00, 14.38it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0071, Validation Loss: 0.0070\n","Epoch [50/50], Training Loss: 0.0070, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0246, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:03, 14.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0243, Validation Loss: 0.0239\n","Epoch [3/50], Training Loss: 0.0240, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:03, 13.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0237, Validation Loss: 0.0233\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:03, 13.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0234, Validation Loss: 0.0230\n","Epoch [6/50], Training Loss: 0.0231, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:02, 14.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0228, Validation Loss: 0.0224\n","Epoch [8/50], Training Loss: 0.0225, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:02, 14.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0222, Validation Loss: 0.0219\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:02, 13.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0219, Validation Loss: 0.0216\n","Epoch [11/50], Training Loss: 0.0217, Validation Loss: 0.0214\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:02, 13.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0214, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:02, 13.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0212, Validation Loss: 0.0209\n","Epoch [14/50], Training Loss: 0.0209, Validation Loss: 0.0206\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:02, 13.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0207, Validation Loss: 0.0204\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:01<00:02, 13.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0204, Validation Loss: 0.0201\n","Epoch [17/50], Training Loss: 0.0202, Validation Loss: 0.0199\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:01<00:02, 13.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0199, Validation Loss: 0.0197\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0197, Validation Loss: 0.0194\n","Epoch [20/50], Training Loss: 0.0195, Validation Loss: 0.0192\n","Epoch [21/50], Training Loss: 0.0193, Validation Loss: 0.0190"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:01<00:01, 14.56it/s]"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch [22/50], Training Loss: 0.0191, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 14.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0188, Validation Loss: 0.0186\n","Epoch [24/50], Training Loss: 0.0186, Validation Loss: 0.0184\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:01<00:01, 15.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0184, Validation Loss: 0.0182\n","Epoch [26/50], Training Loss: 0.0182, Validation Loss: 0.0180\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:01, 15.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0180, Validation Loss: 0.0178\n","Epoch [28/50], Training Loss: 0.0179, Validation Loss: 0.0176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:02<00:01, 15.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0177, Validation Loss: 0.0174\n","Epoch [30/50], Training Loss: 0.0175, Validation Loss: 0.0173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:02<00:01, 15.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0173, Validation Loss: 0.0171\n","Epoch [32/50], Training Loss: 0.0171, Validation Loss: 0.0169\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:02<00:01, 15.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0170, Validation Loss: 0.0167\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:02<00:01, 14.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0168, Validation Loss: 0.0166\n","Epoch [35/50], Training Loss: 0.0166, Validation Loss: 0.0164\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:02<00:00, 14.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0165, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:02<00:00, 13.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0163, Validation Loss: 0.0161\n","Epoch [38/50], Training Loss: 0.0161, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:02<00:00, 13.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0160, Validation Loss: 0.0158\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:02<00:00, 13.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0158, Validation Loss: 0.0157\n","Epoch [41/50], Training Loss: 0.0157, Validation Loss: 0.0155\n","Epoch [42/50], Training Loss: 0.0156, Validation Loss: 0.0154\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:03<00:00, 13.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0154, Validation Loss: 0.0152\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:03<00:00, 14.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0153, Validation Loss: 0.0151\n","Epoch [45/50], Training Loss: 0.0151, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:03<00:00, 14.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0150, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  96%|█████████▌| 48/50 [00:03<00:00, 13.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0149, Validation Loss: 0.0147\n","Epoch [48/50], Training Loss: 0.0148, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:03<00:00, 14.08it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0146, Validation Loss: 0.0145\n","Epoch [50/50], Training Loss: 0.0145, Validation Loss: 0.0144\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:03, 15.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0618, Validation Loss: 0.0600\n","Epoch [2/50], Training Loss: 0.0603, Validation Loss: 0.0585\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:02, 15.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0588, Validation Loss: 0.0571\n","Epoch [4/50], Training Loss: 0.0574, Validation Loss: 0.0556\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0559, Validation Loss: 0.0542\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 15.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0545, Validation Loss: 0.0528\n","Epoch [7/50], Training Loss: 0.0531, Validation Loss: 0.0514\n","Epoch [8/50], Training Loss: 0.0517, Validation Loss: 0.0500\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 15.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0503, Validation Loss: 0.0487\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  20%|██        | 10/50 [00:00<00:02, 14.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0489, Validation Loss: 0.0473\n","Epoch [11/50], Training Loss: 0.0476, Validation Loss: 0.0459\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:02, 13.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0462, Validation Loss: 0.0446\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:02, 13.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0448, Validation Loss: 0.0432\n","Epoch [14/50], Training Loss: 0.0434, Validation Loss: 0.0418\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:01<00:02, 13.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0421, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:01<00:02, 13.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0407, Validation Loss: 0.0391\n","Epoch [17/50], Training Loss: 0.0393, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:01<00:02, 12.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0379, Validation Loss: 0.0363\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:01<00:02, 13.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0365, Validation Loss: 0.0349\n","Epoch [20/50], Training Loss: 0.0351, Validation Loss: 0.0336\n","Epoch [21/50], Training Loss: 0.0338, Validation Loss: 0.0322\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:01<00:01, 15.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0324, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:01<00:01, 15.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0310, Validation Loss: 0.0294\n","Epoch [24/50], Training Loss: 0.0296, Validation Loss: 0.0280\n","Epoch [25/50], Training Loss: 0.0282, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  52%|█████▏    | 26/50 [00:01<00:01, 15.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0268, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:01<00:01, 16.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0254, Validation Loss: 0.0238\n","Epoch [28/50], Training Loss: 0.0239, Validation Loss: 0.0222\n","Epoch [29/50], Training Loss: 0.0223, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:01<00:01, 17.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0208, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:02<00:01, 17.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0193, Validation Loss: 0.0177\n","Epoch [32/50], Training Loss: 0.0178, Validation Loss: 0.0162\n","Epoch [33/50], Training Loss: 0.0163, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  68%|██████▊   | 34/50 [00:02<00:00, 17.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0149, Validation Loss: 0.0135\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:02<00:00, 18.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0136, Validation Loss: 0.0123\n","Epoch [36/50], Training Loss: 0.0124, Validation Loss: 0.0112\n","Epoch [37/50], Training Loss: 0.0113, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  76%|███████▌  | 38/50 [00:02<00:00, 18.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0103, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:02<00:00, 17.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0095, Validation Loss: 0.0089\n","Epoch [40/50], Training Loss: 0.0089, Validation Loss: 0.0085\n","Epoch [41/50], Training Loss: 0.0085, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:02<00:00, 17.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0082, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:02<00:00, 16.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0082, Validation Loss: 0.0083\n","Epoch [44/50], Training Loss: 0.0083, Validation Loss: 0.0085\n","Epoch [45/50], Training Loss: 0.0085, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  92%|█████████▏| 46/50 [00:02<00:00, 16.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0087, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:03<00:00, 16.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0090, Validation Loss: 0.0091\n","Epoch [48/50], Training Loss: 0.0091, Validation Loss: 0.0092\n","Epoch [49/50], Training Loss: 0.0092, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:03<00:00, 15.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0092, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:02, 19.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0400, Validation Loss: 0.0399\n","Epoch [2/50], Training Loss: 0.0398, Validation Loss: 0.0398\n","Epoch [3/50], Training Loss: 0.0397, Validation Loss: 0.0397\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:02, 19.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0396, Validation Loss: 0.0396\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:02, 18.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0395, Validation Loss: 0.0395\n","Epoch [6/50], Training Loss: 0.0394, Validation Loss: 0.0394\n","Epoch [7/50], Training Loss: 0.0393, Validation Loss: 0.0393\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:02, 17.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0392, Validation Loss: 0.0392\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:02, 16.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0391, Validation Loss: 0.0391\n","Epoch [10/50], Training Loss: 0.0390, Validation Loss: 0.0390\n","Epoch [11/50], Training Loss: 0.0389, Validation Loss: 0.0389\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:02, 16.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0388, Validation Loss: 0.0388\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:02, 16.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0387, Validation Loss: 0.0386\n","Epoch [14/50], Training Loss: 0.0386, Validation Loss: 0.0385\n","Epoch [15/50], Training Loss: 0.0385, Validation Loss: 0.0384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:01, 17.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0383, Validation Loss: 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:01<00:01, 17.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0382, Validation Loss: 0.0382\n","Epoch [18/50], Training Loss: 0.0381, Validation Loss: 0.0381\n","Epoch [19/50], Training Loss: 0.0380, Validation Loss: 0.0380\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:01<00:01, 18.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0379, Validation Loss: 0.0379\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:01<00:01, 18.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0378, Validation Loss: 0.0378\n","Epoch [22/50], Training Loss: 0.0377, Validation Loss: 0.0377\n","Epoch [23/50], Training Loss: 0.0376, Validation Loss: 0.0376\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 17.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0375, Validation Loss: 0.0375\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0374, Validation Loss: 0.0374\n","Epoch [26/50], Training Loss: 0.0373, Validation Loss: 0.0373\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:01, 16.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0372, Validation Loss: 0.0372\n","Epoch [28/50], Training Loss: 0.0371, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:01<00:01, 16.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0370, Validation Loss: 0.0370\n","Epoch [30/50], Training Loss: 0.0369, Validation Loss: 0.0369\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:01<00:01, 16.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0368, Validation Loss: 0.0368\n","Epoch [32/50], Training Loss: 0.0367, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 16.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0366, Validation Loss: 0.0366\n","Epoch [34/50], Training Loss: 0.0365, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:02<00:00, 17.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0364, Validation Loss: 0.0364\n","Epoch [36/50], Training Loss: 0.0363, Validation Loss: 0.0363\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0362, Validation Loss: 0.0362\n","Epoch [38/50], Training Loss: 0.0361, Validation Loss: 0.0361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:02<00:00, 18.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0360, Validation Loss: 0.0360\n","Epoch [40/50], Training Loss: 0.0360, Validation Loss: 0.0359\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:02<00:00, 17.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0359, Validation Loss: 0.0359\n","Epoch [42/50], Training Loss: 0.0358, Validation Loss: 0.0358\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0357, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 16.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0356, Validation Loss: 0.0356\n","Epoch [45/50], Training Loss: 0.0355, Validation Loss: 0.0355\n","Epoch [46/50], Training Loss: 0.0354, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 16.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0353, Validation Loss: 0.0353\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 17.10it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0352, Validation Loss: 0.0352\n","Epoch [49/50], Training Loss: 0.0351, Validation Loss: 0.0351\n","Epoch [50/50], Training Loss: 0.0350, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:05,  8.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0424, Validation Loss: 0.0165\n","Epoch [2/50], Training Loss: 0.0165, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:05,  8.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0145, Validation Loss: 0.0104\n","Epoch [4/50], Training Loss: 0.0104, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:05,  7.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [6/50], Training Loss: 0.0088, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:01<00:05,  7.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0084, Validation Loss: 0.0077\n","Epoch [8/50], Training Loss: 0.0077, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:01<00:04,  8.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0077, Validation Loss: 0.0078\n","Epoch [10/50], Training Loss: 0.0078, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:01<00:04,  8.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0074, Validation Loss: 0.0070\n","Epoch [12/50], Training Loss: 0.0070, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:01<00:04,  8.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0067, Validation Loss: 0.0066\n","Epoch [14/50], Training Loss: 0.0066, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 16/50 [00:01<00:04,  8.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0064, Validation Loss: 0.0060\n","Epoch [16/50], Training Loss: 0.0060, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:02<00:03,  8.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0055, Validation Loss: 0.0052\n","Epoch [18/50], Training Loss: 0.0051, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:02<00:03,  8.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0049, Validation Loss: 0.0045\n","Epoch [20/50], Training Loss: 0.0045, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 22/50 [00:02<00:03,  8.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0040, Validation Loss: 0.0038\n","Epoch [22/50], Training Loss: 0.0038, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:02<00:03,  8.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0036, Validation Loss: 0.0034\n","Epoch [24/50], Training Loss: 0.0034, Validation Loss: 0.0032\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:03<00:03,  7.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0032, Validation Loss: 0.0031\n","Epoch [26/50], Training Loss: 0.0031, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 28/50 [00:03<00:02,  8.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0030, Validation Loss: 0.0028\n","Epoch [28/50], Training Loss: 0.0028, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:03<00:02,  7.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0026, Validation Loss: 0.0025\n","Epoch [30/50], Training Loss: 0.0025, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:03<00:02,  8.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0023, Validation Loss: 0.0021\n","Epoch [32/50], Training Loss: 0.0020, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 34/50 [00:04<00:01,  8.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0019, Validation Loss: 0.0017\n","Epoch [34/50], Training Loss: 0.0017, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:04<00:01,  8.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0015, Validation Loss: 0.0014\n","Epoch [36/50], Training Loss: 0.0014, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 38/50 [00:04<00:01,  8.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0012, Validation Loss: 0.0011\n","Epoch [38/50], Training Loss: 0.0011, Validation Loss: 0.0009\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:04<00:01,  8.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0009, Validation Loss: 0.0008\n","Epoch [40/50], Training Loss: 0.0008, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:05<00:00,  8.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0007, Validation Loss: 0.0007\n","Epoch [42/50], Training Loss: 0.0007, Validation Loss: 0.0006\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:05<00:00,  8.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0006, Validation Loss: 0.0006\n","Epoch [44/50], Training Loss: 0.0006, Validation Loss: 0.0007\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:05<00:00,  6.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0007, Validation Loss: 0.0006\n","Epoch [46/50], Training Loss: 0.0006, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:06<00:00,  6.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0004, Validation Loss: 0.0005\n","Epoch [48/50], Training Loss: 0.0005, Validation Loss: 0.0005\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:06<00:00,  7.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0005, Validation Loss: 0.0004\n","Epoch [50/50], Training Loss: 0.0004, Validation Loss: 0.0004\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:07,  6.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0090, Validation Loss: 0.0089\n","Epoch [2/50], Training Loss: 0.0090, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:06,  6.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0090, Validation Loss: 0.0089\n","Epoch [4/50], Training Loss: 0.0089, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:06,  6.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0089, Validation Loss: 0.0089\n","Epoch [6/50], Training Loss: 0.0089, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:01<00:06,  6.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0089, Validation Loss: 0.0089\n","Epoch [8/50], Training Loss: 0.0089, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:01<00:06,  6.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0089, Validation Loss: 0.0088\n","Epoch [10/50], Training Loss: 0.0089, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:01<00:05,  6.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0088, Validation Loss: 0.0088\n","Epoch [12/50], Training Loss: 0.0088, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:02<00:05,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0088, Validation Loss: 0.0088\n","Epoch [14/50], Training Loss: 0.0088, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:02<00:05,  6.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0088, Validation Loss: 0.0088\n","Epoch [16/50], Training Loss: 0.0088, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 18/50 [00:02<00:04,  6.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0088, Validation Loss: 0.0088\n","Epoch [18/50], Training Loss: 0.0088, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:02<00:04,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0088, Validation Loss: 0.0087\n","Epoch [20/50], Training Loss: 0.0088, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:03<00:04,  6.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [22/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:03<00:03,  6.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [24/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:03<00:03,  6.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [26/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 28/50 [00:04<00:03,  6.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [28/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 30/50 [00:04<00:03,  6.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [30/50], Training Loss: 0.0087, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:04<00:02,  6.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0087, Validation Loss: 0.0086\n","Epoch [32/50], Training Loss: 0.0087, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0087, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:05<00:02,  5.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [35/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 37/50 [00:05<00:01,  6.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [37/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  78%|███████▊  | 39/50 [00:05<00:01,  6.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [39/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:06<00:01,  6.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [41/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 43/50 [00:06<00:01,  6.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [43/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 45/50 [00:06<00:00,  6.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [45/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 47/50 [00:07<00:00,  5.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [47/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0086, Validation Loss: 0.0085\n","Epoch [49/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:07<00:00,  6.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   2%|▏         | 1/50 [00:00<00:05,  9.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0461, Validation Loss: 0.0441\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:05,  8.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0438, Validation Loss: 0.0418\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:05,  8.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0415, Validation Loss: 0.0396\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:05,  7.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0393, Validation Loss: 0.0374\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:00<00:06,  7.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0371, Validation Loss: 0.0353\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:05,  7.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0350, Validation Loss: 0.0333\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 7/50 [00:00<00:05,  7.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0331, Validation Loss: 0.0316\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:01<00:05,  8.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0314, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 9/50 [00:01<00:04,  8.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0298, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:01<00:04,  8.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0282, Validation Loss: 0.0268\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  22%|██▏       | 11/50 [00:01<00:04,  8.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0266, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:01<00:04,  8.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0249, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  26%|██▌       | 13/50 [00:01<00:04,  7.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0233, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:01<00:04,  7.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0216, Validation Loss: 0.0202\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 15/50 [00:01<00:04,  7.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0201, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 16/50 [00:02<00:04,  7.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0186, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 17/50 [00:02<00:04,  8.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0173, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:02<00:03,  8.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0162, Validation Loss: 0.0153\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  38%|███▊      | 19/50 [00:02<00:03,  8.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0152, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:02<00:03,  8.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0144, Validation Loss: 0.0139\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 21/50 [00:02<00:03,  7.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0138, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 22/50 [00:02<00:03,  7.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0133, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  46%|████▌     | 23/50 [00:02<00:03,  7.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0128, Validation Loss: 0.0125\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:03<00:03,  7.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0124, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  50%|█████     | 25/50 [00:03<00:03,  8.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0120, Validation Loss: 0.0117\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:03<00:02,  8.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0116, Validation Loss: 0.0113\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 27/50 [00:03<00:02,  8.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0112, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 28/50 [00:03<00:02,  8.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0109, Validation Loss: 0.0106\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 29/50 [00:03<00:02,  8.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0106, Validation Loss: 0.0103\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:03<00:02,  7.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0103, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  62%|██████▏   | 31/50 [00:03<00:02,  8.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0100, Validation Loss: 0.0099\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:03<00:02,  8.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  66%|██████▌   | 33/50 [00:04<00:01,  8.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 34/50 [00:04<00:01,  8.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0095, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 35/50 [00:04<00:01,  8.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0094, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:04<00:01,  8.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0094, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  74%|███████▍  | 37/50 [00:04<00:01,  8.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0093, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 38/50 [00:04<00:01,  8.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0093, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 39/50 [00:04<00:01,  8.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0092, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:04<00:01,  8.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0092, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 41/50 [00:05<00:01,  8.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0091, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:05<00:00,  8.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0090, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 43/50 [00:05<00:00,  8.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0089, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:05<00:00,  8.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0088, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  90%|█████████ | 45/50 [00:05<00:00,  8.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:05<00:00,  8.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0085, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  94%|█████████▍| 47/50 [00:05<00:00,  7.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0084, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:05<00:00,  7.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0083, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 49/50 [00:06<00:00,  7.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0082, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:06<00:00,  8.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0081, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   2%|▏         | 1/50 [00:00<00:05,  8.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:05,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:05,  8.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:05,  8.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  10%|█         | 5/50 [00:00<00:05,  8.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0098, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:05,  8.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:05,  8.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:04,  8.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 9/50 [00:01<00:04,  8.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:01<00:04,  8.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  22%|██▏       | 11/50 [00:01<00:04,  8.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:01<00:04,  8.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 13/50 [00:01<00:04,  8.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:04,  8.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 15/50 [00:01<00:04,  8.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:01<00:03,  8.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 17/50 [00:02<00:03,  8.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 18/50 [00:02<00:03,  8.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 19/50 [00:02<00:03,  8.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:02<00:03,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 21/50 [00:02<00:03,  8.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:02<00:03,  8.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 23/50 [00:02<00:03,  8.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:02<00:03,  8.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 25/50 [00:02<00:03,  8.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:03<00:03,  7.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 27/50 [00:03<00:02,  7.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 28/50 [00:03<00:02,  7.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 29/50 [00:03<00:02,  7.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 30/50 [00:03<00:03,  6.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0097, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 31/50 [00:03<00:02,  6.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:04<00:02,  6.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  66%|██████▌   | 33/50 [00:04<00:02,  6.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 34/50 [00:04<00:02,  7.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:04<00:02,  6.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 36/50 [00:04<00:02,  6.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 37/50 [00:04<00:01,  6.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  76%|███████▌  | 38/50 [00:04<00:01,  6.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  78%|███████▊  | 39/50 [00:05<00:01,  6.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:05<00:01,  7.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:05<00:01,  7.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  84%|████████▍ | 42/50 [00:05<00:01,  6.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 43/50 [00:05<00:01,  6.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 44/50 [00:05<00:00,  6.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0096, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 45/50 [00:05<00:00,  6.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0096, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:06<00:00,  7.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0096, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 47/50 [00:06<00:00,  7.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0096, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  96%|█████████▌| 48/50 [00:06<00:00,  7.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0096, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  98%|█████████▊| 49/50 [00:06<00:00,  6.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0096, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:06<00:00,  7.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0096, Validation Loss: 0.0095\n","Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [16, 32, 64, 32, 16]\n","Optimizer: Adam\n","Best Validation Loss: 0.0003670802398119122\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'RMSprop':\n","        optimizer = optim.RMSprop(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"SMALL_best_model_info.pt\"))\n","\n","# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":381,"status":"ok","timestamp":1733221360414,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9hhXRqalRSs5","outputId":"9721e3cb-2d2c-4bfc-b049-17efd483cd33"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot Training and Validation Loss for the Best Model\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":225,"status":"ok","timestamp":1733499502484,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"F9YBdi4wRZd_","outputId":"4e15e5b5-c014-4fc1-b924-c0fde1d468a1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.01925758411469932\n","Test R^2 Score: 0.9570597410202026\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/SMALL_best_model_info.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"lZ5hgHt5nOEN"},"source":["# Comparison Jacobian\n","calculation of the Jacobian matrix and comparison of learned J with analytical J"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1733403335196,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"qh0061Obnt0A"},"outputs":[],"source":["def FK(model, theta):\n","    t = theta.view(1, 2)\n","    out = model(t)\n","    out = out.view(2)\n","    return out"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1733403335196,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"QmyCdmJknRJq"},"outputs":[],"source":["def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(x):\n","        return FK(model, x)\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, x)\n","\n","    return jacobian"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1733403335196,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"xohPzmdf4DSQ"},"outputs":[],"source":["def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        # Differenze finite centrali\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1733403335197,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"jejLWOeY3am_"},"outputs":[],"source":["# Analytical Jacobian\n","def analytical_jacobian(joint_angles):\n","    j0, j1 = joint_angles[0], joint_angles[1]\n","    j0 = j0.item()\n","    j1 = j1.item()\n","\n","    # Calculate partial derivatives\n","    dx_dj0 = -L1 * np.sin(j0) - L2 * np.sin(j0 + j1)\n","    dx_dj1 = -L2 * np.sin(j0 + j1)\n","    dy_dj0 = L1 * np.cos(j0) + L2 * np.cos(j0 + j1)\n","    dy_dj1 = L2 * np.cos(j0 + j1)\n","\n","    # Construct the Jacobian matrix\n","    J_analytical = np.array([[dx_dj0, dx_dj1], [dy_dj0, dy_dj1]])\n","    return J_analytical\n"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":235,"status":"ok","timestamp":1733403511374,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"n4hhY2lry2TV","outputId":"b6707d3b-11ea-467b-f9fc-2ade8bc7f1ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[0.000 -0.000]\n"," [0.014 -0.006]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.086 -0.006]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.100 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.087 -0.080]\n"," [0.109 0.002]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.013 0.020]\n"," [0.009 0.002]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.029 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.071 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.938 -0.542]\n"," [0.640 0.225]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.838 -0.442]\n"," [0.540 0.225]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.108 -0.119]\n"," [0.178 0.006]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.008 -0.019]\n"," [0.078 0.006]]\n","------------------------------------------------------------------------------------------\n"]}],"source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/SMALL_best_model_info.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2)], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"sgKnV33BGgqr"},"source":["## Check with metrics"]},{"cell_type":"markdown","metadata":{"id":"eMwcUHIcC2YM"},"source":["what I have done in this case is take all possible value of angles of joint in order and for each of them i compute the Jacobian by using the trained model and by analytic method in order and after that I used"]},{"cell_type":"code","source":["joint_angles = torch.tensor(X_test[['j0', 'j1']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","# Function for compute the Frobenius Norm\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]"],"metadata":{"id":"V6O0Ub9p4H2W","executionInfo":{"status":"ok","timestamp":1733403612393,"user_tz":-60,"elapsed":250,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"VNNM12kF-d3n","executionInfo":{"status":"ok","timestamp":1733403614076,"user_tz":-60,"elapsed":1065,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"cf81f62b-4764-4833-f2e1-5eb7213db79f"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"vJLKJtu-4aGw","executionInfo":{"status":"ok","timestamp":1733403616253,"user_tz":-60,"elapsed":903,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"182568a0-23bb-46b0-87e2-8e7007299ebb"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"2h5JPqlnAYOD","executionInfo":{"status":"ok","timestamp":1733403622498,"user_tz":-60,"elapsed":1128,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"620a143f-a5ed-4397-c76b-192b71c5dc51"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"iL0Lz9RS4kFo","executionInfo":{"status":"ok","timestamp":1733403626961,"user_tz":-60,"elapsed":1095,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"12171e40-041b-493d-b97e-9c837c8a6f23"},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"exw8a2BNI-rE"},"source":["# Check of Inverse Kinematics\n","Compute the Inverse Kinematics using two algorithms Levenberg-Marquadt and Newton-Raphson.\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":299,"status":"ok","timestamp":1733151717544,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"zm5GsPraR638","outputId":"f2109f64-aa54-4052-cd0d-8408d22b2851"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["NeuralNetwork(\n","  (layers): ModuleList(\n","    (0): Linear(in_features=2, out_features=16, bias=True)\n","    (1): Linear(in_features=16, out_features=32, bias=True)\n","    (2): Linear(in_features=32, out_features=64, bias=True)\n","    (3): Linear(in_features=64, out_features=32, bias=True)\n","    (4): Linear(in_features=32, out_features=16, bias=True)\n","    (5): Linear(in_features=16, out_features=2, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":28}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/SMALL_best_model_info.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PvbH7hc2RZ2w"},"outputs":[],"source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DNsh_CNLSIR_"},"outputs":[],"source":["def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u4tyLY2sSWzX"},"outputs":[],"source":["def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":323,"status":"ok","timestamp":1733151742454,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"msQ8KOKbSBkz","outputId":"07411d9b-0d12-4378-c46a-2293e98a48ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([-0.1430,  0.0490])\n","Newton-Raphson Method:\n","Target joints Newton-Raphson: tensor([-34.2023,  25.8520])\n","Newton-Raphson Error: 1.592752170154199e-07\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([2.3384, 0.9490])\n","Levenberg-Marquardt Error: 9.641104406910017e-05\n"," \n","--------------------------------------\n","Comparison target: tensor([-0.1430,  0.0490]) Value computed by Newton-Raphson Method:  tensor([-0.1430,  0.0490])\n","Comparison target: tensor([-0.1430,  0.0490]) Value computed by Levenberg Marquardt:  tensor([-0.1429,  0.0490])\n"]}],"source":["initial_joints = torch.tensor([0.0, np.pi/4], requires_grad=True)\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.5, 0.5]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CqAbe5l8d_aC","executionInfo":{"status":"ok","timestamp":1733151787404,"user_tz":-60,"elapsed":1342,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"8c94e5f1-39b9-4117-80ac-7d4efdc445bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([-0.1430,  0.0490])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: torch.linalg.solve: The solver failed because the input matrix is singular.\n","Target joints Newton-Raphson: tensor([-10.5531,  31.0307])\n","Newton-Raphson Error: 0.14681225123543162\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([2.2189, 1.1916])\n","Levenberg-Marquardt Error: 9.835205608472102e-05\n","--------------------------------------\n","Comparison target: tensor([-0.1430,  0.0490]) Value computed by Newton-Raphson Method:  tensor([-0.0043,  0.0008], dtype=torch.float64)\n","Comparison target: tensor([-0.1430,  0.0490]) Value computed by Levenberg-Marquardt Method:  tensor([-0.1429,  0.0490], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","metadata":{"id":"XovB--J4EC3F"},"source":["# 100K Part 2\n","In Part 1 we have train and test the model by splitting the same .csv file but because the samples of dataset are taken randomly can happen that the same samples can appear both in train and test dataset for this reason in this part i will train the model with one .csv file (seed: 2000) and test with onther one (seed: 3000).\n","I will use the same libraries of part 1 and the same model"]},{"cell_type":"markdown","metadata":{"id":"NzueB-mBFSb_"},"source":["## Dataset"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"wEMtkY1PETeB","executionInfo":{"status":"ok","timestamp":1733533456278,"user_tz":-60,"elapsed":1856,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["df_train = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2_train.csv\",sep=';')\n","df_test = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2_test.csv\",sep=';')"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"5jSj1cbFFs1p","executionInfo":{"status":"ok","timestamp":1733533456278,"user_tz":-60,"elapsed":6,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["df_train_filtered = df_train[['j0', 'j1', 'ft_x', 'ft_y']]\n","df_test_filtered = df_test[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","X_train = df_train_filtered[['j0', 'j1']]\n","y_train = df_train_filtered[['ft_x', 'ft_y']]\n","\n","X_test = df_test_filtered[['j0', 'j1']]\n","y_test = df_test_filtered[['ft_x', 'ft_y']]\n","\n","# Split of train for have also validation\n","X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"LOM4gVoGPPlS"},"source":["## 1 Model Linear Regression"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":367,"status":"ok","timestamp":1733152187161,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"6C_7OnBVPPAu","outputId":"75c2060c-71fa-4df4-da38-7ff697d4e203"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MultiOutputRegressor(estimator=LinearRegression())"],"text/html":["<style>#sk-container-id-9 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-9 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-9 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-9 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-9 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-9 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-9 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-9 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-9 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-9 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-9 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-9 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-9 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-9 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-9 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-9 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-9 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-9 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-9 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-9 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-9 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-29\" type=\"checkbox\" ><label for=\"sk-estimator-id-29\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MultiOutputRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.multioutput.MultiOutputRegressor.html\">?<span>Documentation for MultiOutputRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=LinearRegression())</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-30\" type=\"checkbox\" ><label for=\"sk-estimator-id-30\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: LinearRegression</label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":48}],"source":["# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1733152187161,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"yKSgzgHhPWTA","outputId":"3cfcd6ee-64f4-4cae-8e01-b098acb2effb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.08907681842354814, R2: 0.06955168693594055\n"]}],"source":["# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"osO6T_W5Vve4"},"source":["## 2 Decsion tree Regressor"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"elapsed":6091,"status":"ok","timestamp":1733152193249,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"afrTxKICVvqt","outputId":"ab836d3a-3804-43c6-9919-e2c4d17e48e0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={'max_depth': [5, 10, 20],\n","                         'splitter': ['best', 'random']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-10 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-10 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-10 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-10 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-10 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-10 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-10 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-10 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-10 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-10 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-10 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-10 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-10 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-10 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-10 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-10 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-10 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-10 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-10 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-10 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-10 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-10 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-10 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-10 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-10 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-10 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-10 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-10 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-10 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-10 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-10 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-10 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-10 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-10 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-10 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-10 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [5, 10, 20],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={&#x27;max_depth&#x27;: [5, 10, 20],\n","                         &#x27;splitter&#x27;: [&#x27;best&#x27;, &#x27;random&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: DecisionTreeRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" ><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor(max_depth=20)</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":50}],"source":["# train\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [5, 10, 20]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1733152193249,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"yooHnygxVvta","outputId":"875f0ae0-0953-43db-8c17-c78fe5e59f70"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Best Params: {'max_depth': 20, 'splitter': 'best'}\n","Decision Tree RMSE: 0.001796615119614652, R2: 0.9996188869993533\n"]}],"source":["# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree Best Params: {dt_grid.best_params_}\")\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"gSFv4O3qPW8w"},"source":["## 3 Model SVR"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":19862,"status":"ok","timestamp":1733152213108,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"QPKrBypFPXbK","outputId":"6adaf945-0739-4b24-f64e-f5317bd71731"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={'estimator__C': [0.1, 1, 10],\n","                         'estimator__epsilon': [0.01, 0.1, 1],\n","                         'estimator__kernel': ['linear', 'rbf'],\n","                         'estimator__max_iter': [50]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-11 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-11 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-11 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-11 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-11 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-11 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-11 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-11 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-11 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-11 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-11 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-11 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-11 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-11 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-11 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-11 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-11 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-11 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-11 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-11 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-11 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-11 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-11 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-11 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-11 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-11 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-11 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-11 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-11 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-11 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-11 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-11 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-11 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-11 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-11 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-11 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [50]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-35\" type=\"checkbox\" ><label for=\"sk-estimator-id-35\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=MultiOutputRegressor(estimator=SVR()), n_jobs=-1,\n","             param_grid={&#x27;estimator__C&#x27;: [0.1, 1, 10],\n","                         &#x27;estimator__epsilon&#x27;: [0.01, 0.1, 1],\n","                         &#x27;estimator__kernel&#x27;: [&#x27;linear&#x27;, &#x27;rbf&#x27;],\n","                         &#x27;estimator__max_iter&#x27;: [50]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-36\" type=\"checkbox\" ><label for=\"sk-estimator-id-36\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=SVR(C=10, epsilon=0.01, max_iter=50))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: SVR</label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=10, epsilon=0.01, max_iter=50)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SVR<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVR.html\">?<span>Documentation for SVR</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SVR(C=10, epsilon=0.01, max_iter=50)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":52}],"source":["# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [50]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":758,"status":"ok","timestamp":1733152214876,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"bVCSkLBbPXnS","outputId":"1a27630f-bd5c-4180-8fcb-f1e74b462460"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVR Best Params: {'estimator__C': 10, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 50}\n","SVR RMSE: 0.018647361850532257, R2: 0.9584274773489254\n"]}],"source":["# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"waGH04QFPX4C"},"source":["## 4 Model Random Forest regressor"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":349291,"status":"ok","timestamp":1733152564162,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"-dfiJriSPYGE","outputId":"7e4fd6a3-74e5-424f-a6c4-fa1bc0a4f25b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={'estimator__max_depth': [5, 12],\n","                         'estimator__n_estimators': [100, 150]},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-12 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-12 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-12 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-12 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-12 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-12 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-12 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-12 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-12 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-12 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-12 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-12 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-12 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-12 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-12 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-12 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-12 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-12 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-12 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-12 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-12 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-12 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-12 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-12 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-12 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-12 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-12 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-12 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-12 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-12 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-12 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-12 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-12 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-12 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-12 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-12 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [5, 12],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=RandomForestRegressor(random_state=42)),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__max_depth&#x27;: [5, 12],\n","                         &#x27;estimator__n_estimators&#x27;: [100, 150]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=RandomForestRegressor(max_depth=12,\n","                                                     n_estimators=150,\n","                                                     random_state=42))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=12, n_estimators=150, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=12, n_estimators=150, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":54}],"source":["# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [5, 12]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5185,"status":"ok","timestamp":1733152569337,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"7aV6rg9JPYKg","outputId":"379c8906-9edc-4619-a20b-417ff6d7f306"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Best Params: {'estimator__max_depth': 12, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.005439199923384231, R2: 0.9964997986657675\n"]}],"source":["#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")\n"]},{"cell_type":"markdown","metadata":{"id":"mADr8pA6PYXl"},"source":["## 5 Model KNN regressor"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":11900,"status":"ok","timestamp":1733152581232,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"5oodku6EPYhL","outputId":"a289588b-14a3-4482-e293-7d0b738f7b52"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={'estimator__n_neighbors': [3, 5, 10],\n","                         'estimator__p': [1, 2],\n","                         'estimator__weights': ['uniform', 'distance']},\n","             scoring='neg_mean_squared_error')"],"text/html":["<style>#sk-container-id-13 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-13 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-13 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-13 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-13 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-13 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-13 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-13 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-13 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-13 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-13 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-13 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-13 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-13 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-13 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-13 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-13 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-13 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-13 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-13 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-13 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-13 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-13 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-13 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-13 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-13 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-13 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-13 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-13 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-13 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-13 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-13 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-13 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-13 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-13 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-13 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-43\" type=\"checkbox\" ><label for=\"sk-estimator-id-43\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=MultiOutputRegressor(estimator=KNeighborsRegressor()),\n","             n_jobs=-1,\n","             param_grid={&#x27;estimator__n_neighbors&#x27;: [3, 5, 10],\n","                         &#x27;estimator__p&#x27;: [1, 2],\n","                         &#x27;estimator__weights&#x27;: [&#x27;uniform&#x27;, &#x27;distance&#x27;]},\n","             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-44\" type=\"checkbox\" ><label for=\"sk-estimator-id-44\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: MultiOutputRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>MultiOutputRegressor(estimator=KNeighborsRegressor(n_neighbors=10,\n","                                                   weights=&#x27;distance&#x27;))</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-45\" type=\"checkbox\" ><label for=\"sk-estimator-id-45\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: KNeighborsRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-46\" type=\"checkbox\" ><label for=\"sk-estimator-id-46\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;KNeighborsRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsRegressor.html\">?<span>Documentation for KNeighborsRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsRegressor(n_neighbors=10, weights=&#x27;distance&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":56}],"source":["# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1550,"status":"ok","timestamp":1733152582766,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"ek-WLMq5PYks","outputId":"7e9ea6c7-48fb-4c1e-8602-92a4059ad5c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Best Params: {'estimator__n_neighbors': 10, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.000840636317624405, R2: 0.9999159945347904\n"]}],"source":["#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")"]},{"cell_type":"markdown","metadata":{"id":"RPEfj3v7HKu3"},"source":["## 6 Model NN"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"gDMNE1t9Cpiw","executionInfo":{"status":"ok","timestamp":1733533456579,"user_tz":-60,"elapsed":306,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 2  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)  # No activation for the output layer\n","        return x"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"KwtpncmcHKYn","executionInfo":{"status":"ok","timestamp":1733533456581,"user_tz":-60,"elapsed":5,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"17zS8_OFehVP"},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001, 0.0001],\n","    'hidden_sizes': [[8, 16, 8], [8, 16, 32, 16, 8], [16, 32, 64, 32, 16]],\n","    'optimizer': ['Adam', 'SGD', 'RMSprop']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 50\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":168768,"status":"ok","timestamp":1733152751524,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"v1cKJllCHtHN","outputId":"d1d14030-71f9-4fdf-88de-f87c35196759"},"outputs":[{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0611, Validation Loss: 0.0418\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:04, 11.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0417, Validation Loss: 0.0300\n","Epoch [3/50], Training Loss: 0.0299, Validation Loss: 0.0231\n","Epoch [4/50], Training Loss: 0.0231, Validation Loss: 0.0204\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:03, 14.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0204, Validation Loss: 0.0193\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 16.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0194, Validation Loss: 0.0183\n","Epoch [7/50], Training Loss: 0.0184, Validation Loss: 0.0167\n","Epoch [8/50], Training Loss: 0.0168, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 16.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0146, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0122, Validation Loss: 0.0101\n","Epoch [11/50], Training Loss: 0.0101, Validation Loss: 0.0086\n","Epoch [12/50], Training Loss: 0.0086, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:02, 17.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0077, Validation Loss: 0.0073\n","Epoch [14/50], Training Loss: 0.0072, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  30%|███       | 15/50 [00:00<00:01, 19.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0069, Validation Loss: 0.0066\n","Epoch [16/50], Training Loss: 0.0066, Validation Loss: 0.0064\n","Epoch [17/50], Training Loss: 0.0064, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:01<00:01, 20.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0063, Validation Loss: 0.0063\n","Epoch [19/50], Training Loss: 0.0062, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:01<00:01, 21.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0062, Validation Loss: 0.0062\n","Epoch [21/50], Training Loss: 0.0061, Validation Loss: 0.0060\n","Epoch [22/50], Training Loss: 0.0060, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:01<00:01, 22.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0058, Validation Loss: 0.0057\n","Epoch [24/50], Training Loss: 0.0056, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:00, 23.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0055, Validation Loss: 0.0053\n","Epoch [26/50], Training Loss: 0.0053, Validation Loss: 0.0051\n","Epoch [27/50], Training Loss: 0.0051, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:00, 23.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0050, Validation Loss: 0.0049\n","Epoch [29/50], Training Loss: 0.0048, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:01<00:00, 22.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0047, Validation Loss: 0.0046\n","Epoch [31/50], Training Loss: 0.0046, Validation Loss: 0.0045\n","Epoch [32/50], Training Loss: 0.0045, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:01<00:00, 21.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0044, Validation Loss: 0.0043\n","Epoch [34/50], Training Loss: 0.0043, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 21.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0042, Validation Loss: 0.0041\n","Epoch [36/50], Training Loss: 0.0041, Validation Loss: 0.0040\n","Epoch [37/50], Training Loss: 0.0040, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 21.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0039, Validation Loss: 0.0038\n","Epoch [39/50], Training Loss: 0.0038, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  78%|███████▊  | 39/50 [00:02<00:00, 20.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0037, Validation Loss: 0.0036\n","Epoch [41/50], Training Loss: 0.0036, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:02<00:00, 19.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0035, Validation Loss: 0.0034\n","Epoch [43/50], Training Loss: 0.0034, Validation Loss: 0.0034\n","Epoch [44/50], Training Loss: 0.0033, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  90%|█████████ | 45/50 [00:02<00:00, 21.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0033, Validation Loss: 0.0032\n","Epoch [46/50], Training Loss: 0.0032, Validation Loss: 0.0032\n","Epoch [47/50], Training Loss: 0.0031, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:02<00:00, 22.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0031, Validation Loss: 0.0030\n","Epoch [49/50], Training Loss: 0.0030, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:02<00:00, 20.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0029, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0194, Validation Loss: 0.0192\n","Epoch [2/50], Training Loss: 0.0191, Validation Loss: 0.0190\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 22.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0189, Validation Loss: 0.0187\n","Epoch [4/50], Training Loss: 0.0186, Validation Loss: 0.0185\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 22.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0184, Validation Loss: 0.0182\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:02, 21.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0182, Validation Loss: 0.0180\n","Epoch [7/50], Training Loss: 0.0180, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 22.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0177, Validation Loss: 0.0176\n","Epoch [9/50], Training Loss: 0.0175, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 22.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0173, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 23.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0171, Validation Loss: 0.0170\n","Epoch [12/50], Training Loss: 0.0170, Validation Loss: 0.0168\n","Epoch [13/50], Training Loss: 0.0168, Validation Loss: 0.0167\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0166, Validation Loss: 0.0165\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 23.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0164, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 23.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0163, Validation Loss: 0.0162\n","Epoch [17/50], Training Loss: 0.0161, Validation Loss: 0.0160\n","Epoch [18/50], Training Loss: 0.0159, Validation Loss: 0.0159\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 23.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0158, Validation Loss: 0.0157\n","Epoch [20/50], Training Loss: 0.0156, Validation Loss: 0.0156\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:01, 24.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0155, Validation Loss: 0.0154\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:01, 24.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0154, Validation Loss: 0.0153\n","Epoch [23/50], Training Loss: 0.0152, Validation Loss: 0.0152\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 23.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0151, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 23.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0150, Validation Loss: 0.0149\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:01<00:01, 20.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0148, Validation Loss: 0.0148\n","Epoch [27/50], Training Loss: 0.0147, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:01<00:01, 20.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0146, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:01<00:01, 20.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0145, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:01<00:01, 19.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0144, Validation Loss: 0.0144\n","Epoch [31/50], Training Loss: 0.0143, Validation Loss: 0.0142\n","Epoch [32/50], Training Loss: 0.0142, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 20.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0141, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 20.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0140, Validation Loss: 0.0140\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:01<00:00, 20.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0139, Validation Loss: 0.0139\n","Epoch [36/50], Training Loss: 0.0138, Validation Loss: 0.0138\n","Epoch [37/50], Training Loss: 0.0137, Validation Loss: 0.0137\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:01<00:00, 20.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0136, Validation Loss: 0.0136\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:01<00:00, 21.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0136, Validation Loss: 0.0135\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:01<00:00, 22.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0135, Validation Loss: 0.0135\n","Epoch [41/50], Training Loss: 0.0134, Validation Loss: 0.0134\n","Epoch [42/50], Training Loss: 0.0133, Validation Loss: 0.0133\n","Epoch [43/50], Training Loss: 0.0132, Validation Loss: 0.0132\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:01<00:00, 22.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0132, Validation Loss: 0.0132\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  96%|█████████▌| 48/50 [00:02<00:00, 22.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0131, Validation Loss: 0.0131\n","Epoch [46/50], Training Loss: 0.0130, Validation Loss: 0.0130\n","Epoch [47/50], Training Loss: 0.0130, Validation Loss: 0.0130\n","Epoch [48/50], Training Loss: 0.0129, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  96%|█████████▌| 48/50 [00:02<00:00, 22.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0128, Validation Loss: 0.0128\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 21.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0128, Validation Loss: 0.0128\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:02, 22.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0936, Validation Loss: 0.8157\n","Epoch [2/50], Training Loss: 0.8204, Validation Loss: 0.0400\n","Epoch [3/50], Training Loss: 0.0400, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:02, 22.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0257, Validation Loss: 0.0184\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:02, 22.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0184, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:01, 23.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0145, Validation Loss: 0.0121\n","Epoch [7/50], Training Loss: 0.0121, Validation Loss: 0.0106\n","Epoch [8/50], Training Loss: 0.0105, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:01, 23.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0095, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:01, 23.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0088, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:01, 23.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0082, Validation Loss: 0.0079\n","Epoch [12/50], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [13/50], Training Loss: 0.0076, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  30%|███       | 15/50 [00:00<00:01, 24.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [15/50], Training Loss: 0.0071, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  30%|███       | 15/50 [00:00<00:01, 24.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0069, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:01, 22.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0068, Validation Loss: 0.0067\n","Epoch [18/50], Training Loss: 0.0066, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:01, 22.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0065, Validation Loss: 0.0065\n","Epoch [20/50], Training Loss: 0.0064, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:01, 22.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0063, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:01<00:01, 22.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0062, Validation Loss: 0.0062\n","Epoch [23/50], Training Loss: 0.0061, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:01<00:01, 21.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0061, Validation Loss: 0.0060\n","Epoch [25/50], Training Loss: 0.0060, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:01<00:01, 21.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0059, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:01<00:01, 21.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0058, Validation Loss: 0.0058\n","Epoch [28/50], Training Loss: 0.0057, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:01<00:01, 21.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0057, Validation Loss: 0.0056\n","Epoch [30/50], Training Loss: 0.0056, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:01<00:00, 21.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0055, Validation Loss: 0.0055\n","Epoch [32/50], Training Loss: 0.0054, Validation Loss: 0.0054\n","Epoch [33/50], Training Loss: 0.0054, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:01<00:00, 21.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0053, Validation Loss: 0.0053\n","Epoch [35/50], Training Loss: 0.0052, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:01<00:00, 22.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [37/50], Training Loss: 0.0051, Validation Loss: 0.0051\n","Epoch [38/50], Training Loss: 0.0050, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0050, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:01<00:00, 21.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0049, Validation Loss: 0.0049\n","Epoch [41/50], Training Loss: 0.0049, Validation Loss: 0.0048\n","Epoch [42/50], Training Loss: 0.0048, Validation Loss: 0.0048\n","Epoch [43/50], Training Loss: 0.0047, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:01<00:00, 21.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0047, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0046, Validation Loss: 0.0046\n","Epoch [46/50], Training Loss: 0.0046, Validation Loss: 0.0046\n","Epoch [47/50], Training Loss: 0.0045, Validation Loss: 0.0045\n","Epoch [48/50], Training Loss: 0.0045, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0044, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:02<00:00, 22.25it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0044, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 24.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0264, Validation Loss: 0.0249\n","Epoch [2/50], Training Loss: 0.0248, Validation Loss: 0.0234\n","Epoch [3/50], Training Loss: 0.0233, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 24.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0219, Validation Loss: 0.0208\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 24.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0207, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:01, 23.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0195, Validation Loss: 0.0186\n","Epoch [7/50], Training Loss: 0.0185, Validation Loss: 0.0177\n","Epoch [8/50], Training Loss: 0.0176, Validation Loss: 0.0169\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 24.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0168, Validation Loss: 0.0162\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:01, 24.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0161, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 22.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0155, Validation Loss: 0.0150\n","Epoch [12/50], Training Loss: 0.0149, Validation Loss: 0.0145\n","Epoch [13/50], Training Loss: 0.0144, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 22.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0140, Validation Loss: 0.0137\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  30%|███       | 15/50 [00:00<00:01, 22.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0136, Validation Loss: 0.0133\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:01, 21.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0133, Validation Loss: 0.0129\n","Epoch [17/50], Training Loss: 0.0129, Validation Loss: 0.0126\n","Epoch [18/50], Training Loss: 0.0125, Validation Loss: 0.0122\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:01, 21.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0122, Validation Loss: 0.0119\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:01, 21.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0118, Validation Loss: 0.0115\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0115, Validation Loss: 0.0111\n","Epoch [22/50], Training Loss: 0.0111, Validation Loss: 0.0108\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:01<00:01, 20.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0107, Validation Loss: 0.0104\n","Epoch [24/50], Training Loss: 0.0104, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:01<00:01, 20.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0100, Validation Loss: 0.0097\n","Epoch [26/50], Training Loss: 0.0097, Validation Loss: 0.0094\n","Epoch [27/50], Training Loss: 0.0094, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:01<00:01, 20.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0091, Validation Loss: 0.0088\n","Epoch [29/50], Training Loss: 0.0088, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:01<00:00, 21.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0085, Validation Loss: 0.0083\n","Epoch [31/50], Training Loss: 0.0082, Validation Loss: 0.0080\n","Epoch [32/50], Training Loss: 0.0080, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:01<00:00, 21.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0078, Validation Loss: 0.0076\n","Epoch [34/50], Training Loss: 0.0075, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 21.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0074, Validation Loss: 0.0072\n","Epoch [36/50], Training Loss: 0.0072, Validation Loss: 0.0071\n","Epoch [37/50], Training Loss: 0.0071, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0069, Validation Loss: 0.0068\n","Epoch [39/50], Training Loss: 0.0068, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0067, Validation Loss: 0.0066\n","Epoch [41/50], Training Loss: 0.0066, Validation Loss: 0.0066\n","Epoch [42/50], Training Loss: 0.0065, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:01<00:00, 23.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0065, Validation Loss: 0.0064\n","Epoch [44/50], Training Loss: 0.0064, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  90%|█████████ | 45/50 [00:02<00:00, 22.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0063, Validation Loss: 0.0063\n","Epoch [46/50], Training Loss: 0.0063, Validation Loss: 0.0063\n","Epoch [47/50], Training Loss: 0.0062, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:02<00:00, 23.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0062, Validation Loss: 0.0062\n","Epoch [49/50], Training Loss: 0.0062, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:02<00:00, 22.30it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0061, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0251, Validation Loss: 0.0251\n","Epoch [2/50], Training Loss: 0.0250, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 22.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0250, Validation Loss: 0.0250\n","Epoch [4/50], Training Loss: 0.0249, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 22.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0249, Validation Loss: 0.0249\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:02, 20.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0248, Validation Loss: 0.0249\n","Epoch [7/50], Training Loss: 0.0248, Validation Loss: 0.0248\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 21.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0247, Validation Loss: 0.0248\n","Epoch [9/50], Training Loss: 0.0247, Validation Loss: 0.0248\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 21.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0246, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 20.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0246, Validation Loss: 0.0247\n","Epoch [12/50], Training Loss: 0.0246, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 20.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0245, Validation Loss: 0.0246\n","Epoch [14/50], Training Loss: 0.0245, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 20.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0244, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 20.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0244, Validation Loss: 0.0244\n","Epoch [17/50], Training Loss: 0.0243, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 20.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0243, Validation Loss: 0.0244\n","Epoch [19/50], Training Loss: 0.0242, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 20.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0242, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:01<00:01, 20.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0242, Validation Loss: 0.0242\n","Epoch [22/50], Training Loss: 0.0241, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 21.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0241, Validation Loss: 0.0241\n","Epoch [24/50], Training Loss: 0.0240, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 21.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0240, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0239, Validation Loss: 0.0240\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:01<00:01, 20.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0239, Validation Loss: 0.0240\n","Epoch [28/50], Training Loss: 0.0239, Validation Loss: 0.0239\n","Epoch [29/50], Training Loss: 0.0238, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:01<00:00, 21.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0238, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:01<00:00, 21.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0237, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 20.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0237, Validation Loss: 0.0238\n","Epoch [33/50], Training Loss: 0.0237, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 20.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0236, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 20.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0236, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0235, Validation Loss: 0.0236\n","Epoch [37/50], Training Loss: 0.0235, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0234, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:01<00:00, 19.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0234, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:02<00:00, 19.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0234, Validation Loss: 0.0234\n","Epoch [41/50], Training Loss: 0.0233, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:02<00:00, 19.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0233, Validation Loss: 0.0233\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:02<00:00, 19.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0232, Validation Loss: 0.0233\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:02<00:00, 19.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0232, Validation Loss: 0.0233\n","Epoch [45/50], Training Loss: 0.0232, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 19.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0231, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0231, Validation Loss: 0.0231\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 20.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0230, Validation Loss: 0.0231\n","Epoch [49/50], Training Loss: 0.0230, Validation Loss: 0.0231\n","Epoch [50/50], Training Loss: 0.0230, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0595, Validation Loss: 0.0421\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:02, 20.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0420, Validation Loss: 0.0317\n","Epoch [3/50], Training Loss: 0.0316, Validation Loss: 0.0233\n","Epoch [4/50], Training Loss: 0.0232, Validation Loss: 0.0196\n","Epoch [5/50], Training Loss: 0.0195, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:02, 20.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0177, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:00<00:02, 20.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0167, Validation Loss: 0.0161\n","Epoch [8/50], Training Loss: 0.0160, Validation Loss: 0.0155\n","Epoch [9/50], Training Loss: 0.0154, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:00<00:02, 20.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0149, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:01, 20.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0144, Validation Loss: 0.0141\n","Epoch [12/50], Training Loss: 0.0140, Validation Loss: 0.0138\n","Epoch [13/50], Training Loss: 0.0137, Validation Loss: 0.0134\n","Epoch [14/50], Training Loss: 0.0133, Validation Loss: 0.0131\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:01, 20.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0130, Validation Loss: 0.0128\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:00<00:01, 18.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0128, Validation Loss: 0.0126\n","Epoch [17/50], Training Loss: 0.0125, Validation Loss: 0.0123\n","Epoch [18/50], Training Loss: 0.0122, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:01<00:01, 17.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0120, Validation Loss: 0.0118\n","Epoch [20/50], Training Loss: 0.0118, Validation Loss: 0.0116\n","Epoch [21/50], Training Loss: 0.0116, Validation Loss: 0.0114\n","Epoch [22/50], Training Loss: 0.0114, Validation Loss: 0.0113\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:01<00:01, 18.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0112, Validation Loss: 0.0111\n","Epoch [24/50], Training Loss: 0.0110, Validation Loss: 0.0109\n","Epoch [25/50], Training Loss: 0.0108, Validation Loss: 0.0107\n","Epoch [26/50], Training Loss: 0.0107, Validation Loss: 0.0106\n","Epoch [27/50], Training Loss: 0.0105, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:01<00:00, 20.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0103, Validation Loss: 0.0103\n","Epoch [29/50], Training Loss: 0.0102, Validation Loss: 0.0101\n","Epoch [30/50], Training Loss: 0.0101, Validation Loss: 0.0100\n","Epoch [31/50], Training Loss: 0.0099, Validation Loss: 0.0099\n","Epoch [32/50], Training Loss: 0.0098, Validation Loss: 0.0098\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:01<00:00, 19.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0097, Validation Loss: 0.0097\n","Epoch [34/50], Training Loss: 0.0096, Validation Loss: 0.0095\n","Epoch [35/50], Training Loss: 0.0095, Validation Loss: 0.0094\n","Epoch [36/50], Training Loss: 0.0094, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:02<00:00, 18.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0093, Validation Loss: 0.0092\n","Epoch [38/50], Training Loss: 0.0092, Validation Loss: 0.0092\n","Epoch [39/50], Training Loss: 0.0091, Validation Loss: 0.0091\n","Epoch [40/50], Training Loss: 0.0090, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:02<00:00, 15.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0089, Validation Loss: 0.0089\n","Epoch [42/50], Training Loss: 0.0088, Validation Loss: 0.0088\n","Epoch [43/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  94%|█████████▍| 47/50 [00:02<00:00, 15.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [45/50], Training Loss: 0.0086, Validation Loss: 0.0086\n","Epoch [46/50], Training Loss: 0.0085, Validation Loss: 0.0085\n","Epoch [47/50], Training Loss: 0.0085, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:02<00:00, 18.08it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0084, Validation Loss: 0.0084\n","Epoch [49/50], Training Loss: 0.0083, Validation Loss: 0.0083\n","Epoch [50/50], Training Loss: 0.0083, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1432, Validation Loss: 0.1430\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:02, 18.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.1429, Validation Loss: 0.1427\n","Epoch [3/50], Training Loss: 0.1425, Validation Loss: 0.1423\n","Epoch [4/50], Training Loss: 0.1422, Validation Loss: 0.1420\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:02, 18.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.1418, Validation Loss: 0.1416\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 18.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.1414, Validation Loss: 0.1413\n","Epoch [7/50], Training Loss: 0.1411, Validation Loss: 0.1409\n","Epoch [8/50], Training Loss: 0.1407, Validation Loss: 0.1405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:02, 18.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.1404, Validation Loss: 0.1402\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:02, 17.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.1400, Validation Loss: 0.1399\n","Epoch [11/50], Training Loss: 0.1397, Validation Loss: 0.1395\n","Epoch [12/50], Training Loss: 0.1393, Validation Loss: 0.1392\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:02, 17.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.1390, Validation Loss: 0.1388\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:01, 19.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.1387, Validation Loss: 0.1385\n","Epoch [15/50], Training Loss: 0.1383, Validation Loss: 0.1381\n","Epoch [16/50], Training Loss: 0.1380, Validation Loss: 0.1378\n","Epoch [17/50], Training Loss: 0.1376, Validation Loss: 0.1375\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:01<00:01, 17.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.1373, Validation Loss: 0.1371\n","Epoch [19/50], Training Loss: 0.1370, Validation Loss: 0.1368\n","Epoch [20/50], Training Loss: 0.1366, Validation Loss: 0.1365\n","Epoch [21/50], Training Loss: 0.1363, Validation Loss: 0.1361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  50%|█████     | 25/50 [00:01<00:01, 16.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.1360, Validation Loss: 0.1358\n","Epoch [23/50], Training Loss: 0.1357, Validation Loss: 0.1355\n","Epoch [24/50], Training Loss: 0.1353, Validation Loss: 0.1352\n","Epoch [25/50], Training Loss: 0.1350, Validation Loss: 0.1348\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  58%|█████▊    | 29/50 [00:01<00:01, 16.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.1347, Validation Loss: 0.1345\n","Epoch [27/50], Training Loss: 0.1344, Validation Loss: 0.1342\n","Epoch [28/50], Training Loss: 0.1341, Validation Loss: 0.1339\n","Epoch [29/50], Training Loss: 0.1337, Validation Loss: 0.1336\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:01<00:00, 17.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.1334, Validation Loss: 0.1333\n","Epoch [31/50], Training Loss: 0.1331, Validation Loss: 0.1329\n","Epoch [32/50], Training Loss: 0.1328, Validation Loss: 0.1326\n","Epoch [33/50], Training Loss: 0.1325, Validation Loss: 0.1323\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:02<00:00, 18.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.1322, Validation Loss: 0.1320\n","Epoch [35/50], Training Loss: 0.1319, Validation Loss: 0.1317\n","Epoch [36/50], Training Loss: 0.1316, Validation Loss: 0.1314\n","Epoch [37/50], Training Loss: 0.1313, Validation Loss: 0.1311\n","Epoch [38/50], Training Loss: 0.1310, Validation Loss: 0.1308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:02<00:00, 19.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.1307, Validation Loss: 0.1305\n","Epoch [40/50], Training Loss: 0.1304, Validation Loss: 0.1302\n","Epoch [41/50], Training Loss: 0.1301, Validation Loss: 0.1299\n","Epoch [42/50], Training Loss: 0.1298, Validation Loss: 0.1296\n","Epoch [43/50], Training Loss: 0.1295, Validation Loss: 0.1293\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:02<00:00, 19.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.1292, Validation Loss: 0.1290\n","Epoch [45/50], Training Loss: 0.1289, Validation Loss: 0.1287\n","Epoch [46/50], Training Loss: 0.1286, Validation Loss: 0.1284\n","Epoch [47/50], Training Loss: 0.1283, Validation Loss: 0.1282\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:02<00:00, 18.13it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.1280, Validation Loss: 0.1279\n","Epoch [49/50], Training Loss: 0.1277, Validation Loss: 0.1276\n","Epoch [50/50], Training Loss: 0.1274, Validation Loss: 0.1273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 21.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [3/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [4/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [5/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:02, 21.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 20.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [8/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [9/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [10/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  18%|█▊        | 9/50 [00:00<00:01, 20.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 20.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [13/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [14/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [15/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:01, 20.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [18/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [19/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:01, 20.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:01<00:01, 20.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [22/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [23/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:01<00:01, 19.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [26/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:01<00:01, 17.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:01<00:01, 16.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [29/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:01<00:01, 16.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [32/50], Training Loss: 0.0146, Validation Loss: 0.0147\n","Epoch [33/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:01<00:00, 16.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0146, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:02<00:00, 16.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0146, Validation Loss: 0.0146\n","Epoch [36/50], Training Loss: 0.0146, Validation Loss: 0.0146\n","Epoch [37/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:02<00:00, 16.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:02<00:00, 16.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [40/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [41/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:02<00:00, 17.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:02<00:00, 17.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [44/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [45/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:02<00:00, 17.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  96%|█████████▌| 48/50 [00:02<00:00, 17.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [48/50], Training Loss: 0.0145, Validation Loss: 0.0146\n","Epoch [49/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:02<00:00, 18.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0145, Validation Loss: 0.0146\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:02, 18.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0845, Validation Loss: 0.0825\n","Epoch [2/50], Training Loss: 0.0824, Validation Loss: 0.0811\n","Epoch [3/50], Training Loss: 0.0810, Validation Loss: 0.0799\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:02, 17.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0798, Validation Loss: 0.0788\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:02, 17.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0788, Validation Loss: 0.0779\n","Epoch [6/50], Training Loss: 0.0778, Validation Loss: 0.0771\n","Epoch [7/50], Training Loss: 0.0770, Validation Loss: 0.0763\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:02, 19.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0762, Validation Loss: 0.0756\n","Epoch [9/50], Training Loss: 0.0755, Validation Loss: 0.0749\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:01, 19.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0748, Validation Loss: 0.0742\n","Epoch [11/50], Training Loss: 0.0742, Validation Loss: 0.0736\n","Epoch [12/50], Training Loss: 0.0736, Validation Loss: 0.0730\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:01, 19.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0730, Validation Loss: 0.0725\n","Epoch [14/50], Training Loss: 0.0724, Validation Loss: 0.0719\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:01, 19.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0718, Validation Loss: 0.0714\n","Epoch [16/50], Training Loss: 0.0713, Validation Loss: 0.0708\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:01, 20.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0707, Validation Loss: 0.0703\n","Epoch [18/50], Training Loss: 0.0702, Validation Loss: 0.0698\n","Epoch [19/50], Training Loss: 0.0697, Validation Loss: 0.0693\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:01<00:01, 20.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0692, Validation Loss: 0.0688\n","Epoch [21/50], Training Loss: 0.0688, Validation Loss: 0.0684\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:01<00:01, 20.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0683, Validation Loss: 0.0679\n","Epoch [23/50], Training Loss: 0.0678, Validation Loss: 0.0675\n","Epoch [24/50], Training Loss: 0.0674, Validation Loss: 0.0670\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  50%|█████     | 25/50 [00:01<00:01, 19.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0669, Validation Loss: 0.0666\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:01<00:01, 19.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0665, Validation Loss: 0.0662\n","Epoch [27/50], Training Loss: 0.0661, Validation Loss: 0.0658\n","Epoch [28/50], Training Loss: 0.0657, Validation Loss: 0.0654\n","Epoch [29/50], Training Loss: 0.0653, Validation Loss: 0.0650\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:01<00:00, 20.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0649, Validation Loss: 0.0646\n","Epoch [31/50], Training Loss: 0.0645, Validation Loss: 0.0642\n","Epoch [32/50], Training Loss: 0.0641, Validation Loss: 0.0638\n","Epoch [33/50], Training Loss: 0.0637, Validation Loss: 0.0634\n","Epoch [34/50], Training Loss: 0.0633, Validation Loss: 0.0630\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:01<00:00, 20.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0629, Validation Loss: 0.0627\n","Epoch [36/50], Training Loss: 0.0626, Validation Loss: 0.0623\n","Epoch [37/50], Training Loss: 0.0622, Validation Loss: 0.0619\n","Epoch [38/50], Training Loss: 0.0618, Validation Loss: 0.0616\n","Epoch [39/50], Training Loss: 0.0615, Validation Loss: 0.0612\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:02<00:00, 21.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0611, Validation Loss: 0.0609\n","Epoch [41/50], Training Loss: 0.0608, Validation Loss: 0.0605\n","Epoch [42/50], Training Loss: 0.0604, Validation Loss: 0.0602\n","Epoch [43/50], Training Loss: 0.0601, Validation Loss: 0.0598\n","Epoch [44/50], Training Loss: 0.0598, Validation Loss: 0.0595\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  98%|█████████▊| 49/50 [00:02<00:00, 21.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0594, Validation Loss: 0.0592\n","Epoch [46/50], Training Loss: 0.0591, Validation Loss: 0.0588\n","Epoch [47/50], Training Loss: 0.0588, Validation Loss: 0.0585\n","Epoch [48/50], Training Loss: 0.0584, Validation Loss: 0.0582\n","Epoch [49/50], Training Loss: 0.0581, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:02<00:00, 20.29it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0578, Validation Loss: 0.0576\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   2%|▏         | 1/50 [00:00<00:09,  5.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0745, Validation Loss: 0.0636\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:06,  7.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0636, Validation Loss: 0.0560\n","Epoch [3/50], Training Loss: 0.0560, Validation Loss: 0.0490\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:05,  8.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0490, Validation Loss: 0.0425\n","Epoch [5/50], Training Loss: 0.0424, Validation Loss: 0.0363\n","Epoch [6/50], Training Loss: 0.0363, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  18%|█▊        | 9/50 [00:01<00:04,  9.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0308, Validation Loss: 0.0257\n","Epoch [8/50], Training Loss: 0.0257, Validation Loss: 0.0209\n","Epoch [9/50], Training Loss: 0.0209, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  22%|██▏       | 11/50 [00:01<00:04,  9.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0166, Validation Loss: 0.0131\n","Epoch [11/50], Training Loss: 0.0131, Validation Loss: 0.0105\n","Epoch [12/50], Training Loss: 0.0105, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  30%|███       | 15/50 [00:01<00:03, 10.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [14/50], Training Loss: 0.0083, Validation Loss: 0.0090\n","Epoch [15/50], Training Loss: 0.0089, Validation Loss: 0.0095\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:01<00:03, 10.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0094, Validation Loss: 0.0095\n","Epoch [17/50], Training Loss: 0.0094, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0093, Validation Loss: 0.0093\n","Epoch [19/50], Training Loss: 0.0092, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:02<00:02,  9.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0092, Validation Loss: 0.0092\n","Epoch [21/50], Training Loss: 0.0092, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  46%|████▌     | 23/50 [00:02<00:02,  9.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0091, Validation Loss: 0.0090\n","Epoch [23/50], Training Loss: 0.0089, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  50%|█████     | 25/50 [00:02<00:02,  9.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0087, Validation Loss: 0.0085\n","Epoch [25/50], Training Loss: 0.0084, Validation Loss: 0.0082\n","Epoch [26/50], Training Loss: 0.0082, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:02<00:02,  9.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [28/50], Training Loss: 0.0076, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:03<00:01,  9.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [30/50], Training Loss: 0.0071, Validation Loss: 0.0068\n","Epoch [31/50], Training Loss: 0.0068, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:03<00:01,  8.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0065, Validation Loss: 0.0063\n","Epoch [33/50], Training Loss: 0.0063, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:03<00:01,  8.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0061, Validation Loss: 0.0059\n","Epoch [35/50], Training Loss: 0.0059, Validation Loss: 0.0058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:04<00:01,  8.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0058, Validation Loss: 0.0057\n","Epoch [37/50], Training Loss: 0.0057, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  78%|███████▊  | 39/50 [00:04<00:01,  7.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0056, Validation Loss: 0.0056\n","Epoch [39/50], Training Loss: 0.0055, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:04<00:01,  8.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0054, Validation Loss: 0.0053\n","Epoch [41/50], Training Loss: 0.0053, Validation Loss: 0.0052\n","Epoch [42/50], Training Loss: 0.0051, Validation Loss: 0.0051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:04<00:00,  9.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0051, Validation Loss: 0.0051\n","Epoch [44/50], Training Loss: 0.0050, Validation Loss: 0.0050\n","Epoch [45/50], Training Loss: 0.0050, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0050, Validation Loss: 0.0050\n","Epoch [47/50], Training Loss: 0.0050, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:05<00:00,  9.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0049, Validation Loss: 0.0049\n","Epoch [49/50], Training Loss: 0.0049, Validation Loss: 0.0048\n","Epoch [50/50], Training Loss: 0.0048, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:04, 11.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0422, Validation Loss: 0.0414\n","Epoch [2/50], Training Loss: 0.0413, Validation Loss: 0.0406\n","Epoch [3/50], Training Loss: 0.0405, Validation Loss: 0.0398\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:03, 11.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0398, Validation Loss: 0.0391\n","Epoch [5/50], Training Loss: 0.0390, Validation Loss: 0.0383\n","Epoch [6/50], Training Loss: 0.0383, Validation Loss: 0.0376\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:03, 10.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0376, Validation Loss: 0.0369\n","Epoch [8/50], Training Loss: 0.0368, Validation Loss: 0.0362\n","Epoch [9/50], Training Loss: 0.0362, Validation Loss: 0.0355\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0355, Validation Loss: 0.0349\n","Epoch [11/50], Training Loss: 0.0348, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:03, 10.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0342, Validation Loss: 0.0336\n","Epoch [13/50], Training Loss: 0.0336, Validation Loss: 0.0330\n","Epoch [14/50], Training Loss: 0.0330, Validation Loss: 0.0324\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:01<00:02, 11.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0324, Validation Loss: 0.0318\n","Epoch [16/50], Training Loss: 0.0318, Validation Loss: 0.0313\n","Epoch [17/50], Training Loss: 0.0312, Validation Loss: 0.0307\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:01<00:02, 11.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0307, Validation Loss: 0.0302\n","Epoch [19/50], Training Loss: 0.0301, Validation Loss: 0.0296\n","Epoch [20/50], Training Loss: 0.0296, Validation Loss: 0.0291\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:02<00:02, 11.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0291, Validation Loss: 0.0286\n","Epoch [22/50], Training Loss: 0.0286, Validation Loss: 0.0281\n","Epoch [23/50], Training Loss: 0.0281, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:02<00:01, 12.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0276, Validation Loss: 0.0272\n","Epoch [25/50], Training Loss: 0.0271, Validation Loss: 0.0267\n","Epoch [26/50], Training Loss: 0.0267, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:02<00:01, 11.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0262, Validation Loss: 0.0259\n","Epoch [28/50], Training Loss: 0.0258, Validation Loss: 0.0254\n","Epoch [29/50], Training Loss: 0.0254, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:02<00:01, 11.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0250, Validation Loss: 0.0246\n","Epoch [31/50], Training Loss: 0.0246, Validation Loss: 0.0242\n","Epoch [32/50], Training Loss: 0.0242, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:03<00:01, 11.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0238, Validation Loss: 0.0235\n","Epoch [34/50], Training Loss: 0.0234, Validation Loss: 0.0231\n","Epoch [35/50], Training Loss: 0.0230, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:03<00:01, 11.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0227, Validation Loss: 0.0224\n","Epoch [37/50], Training Loss: 0.0223, Validation Loss: 0.0220\n","Epoch [38/50], Training Loss: 0.0220, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:03<00:00, 11.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0217, Validation Loss: 0.0214\n","Epoch [40/50], Training Loss: 0.0213, Validation Loss: 0.0211\n","Epoch [41/50], Training Loss: 0.0210, Validation Loss: 0.0208\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:03<00:00, 11.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0207, Validation Loss: 0.0205\n","Epoch [43/50], Training Loss: 0.0204, Validation Loss: 0.0202\n","Epoch [44/50], Training Loss: 0.0201, Validation Loss: 0.0199\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:04<00:00, 11.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0198, Validation Loss: 0.0196\n","Epoch [46/50], Training Loss: 0.0195, Validation Loss: 0.0193\n","Epoch [47/50], Training Loss: 0.0193, Validation Loss: 0.0190\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:04<00:00, 11.46it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0190, Validation Loss: 0.0188\n","Epoch [49/50], Training Loss: 0.0187, Validation Loss: 0.0185\n","Epoch [50/50], Training Loss: 0.0185, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:04, 10.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0140, Validation Loss: 0.1466\n","Epoch [2/50], Training Loss: 0.1470, Validation Loss: 0.0178\n","Epoch [3/50], Training Loss: 0.0178, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:04, 10.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0088, Validation Loss: 0.0085\n","Epoch [5/50], Training Loss: 0.0084, Validation Loss: 0.0084\n","Epoch [6/50], Training Loss: 0.0084, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:00<00:03, 11.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0083, Validation Loss: 0.0083\n","Epoch [8/50], Training Loss: 0.0083, Validation Loss: 0.0082\n","Epoch [9/50], Training Loss: 0.0082, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:01<00:03, 11.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0081, Validation Loss: 0.0081\n","Epoch [11/50], Training Loss: 0.0080, Validation Loss: 0.0081\n","Epoch [12/50], Training Loss: 0.0081, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:01<00:03, 10.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0081, Validation Loss: 0.0079\n","Epoch [14/50], Training Loss: 0.0079, Validation Loss: 0.0079\n","Epoch [15/50], Training Loss: 0.0078, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:01<00:02, 11.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0078, Validation Loss: 0.0079\n","Epoch [17/50], Training Loss: 0.0078, Validation Loss: 0.0077\n","Epoch [18/50], Training Loss: 0.0077, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:01<00:02, 11.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0077, Validation Loss: 0.0076\n","Epoch [20/50], Training Loss: 0.0076, Validation Loss: 0.0076\n","Epoch [21/50], Training Loss: 0.0075, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:02<00:02, 10.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0074, Validation Loss: 0.0074\n","Epoch [23/50], Training Loss: 0.0074, Validation Loss: 0.0073\n","Epoch [24/50], Training Loss: 0.0072, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:02<00:02, 10.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [26/50], Training Loss: 0.0070, Validation Loss: 0.0070\n","Epoch [27/50], Training Loss: 0.0070, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  60%|██████    | 30/50 [00:02<00:01, 11.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0068, Validation Loss: 0.0067\n","Epoch [29/50], Training Loss: 0.0067, Validation Loss: 0.0065\n","Epoch [30/50], Training Loss: 0.0065, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:02<00:01, 10.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0064, Validation Loss: 0.0063\n","Epoch [32/50], Training Loss: 0.0062, Validation Loss: 0.0064\n","Epoch [33/50], Training Loss: 0.0063, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:03<00:01, 11.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0066, Validation Loss: 0.0064\n","Epoch [35/50], Training Loss: 0.0064, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:03<00:01, 10.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0064, Validation Loss: 0.0058\n","Epoch [37/50], Training Loss: 0.0057, Validation Loss: 0.0059\n","Epoch [38/50], Training Loss: 0.0058, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  80%|████████  | 40/50 [00:03<00:00, 11.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0053, Validation Loss: 0.0052\n","Epoch [40/50], Training Loss: 0.0052, Validation Loss: 0.0055\n","Epoch [41/50], Training Loss: 0.0054, Validation Loss: 0.0058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:04<00:00, 11.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0058, Validation Loss: 0.0053\n","Epoch [43/50], Training Loss: 0.0053, Validation Loss: 0.0055\n","Epoch [44/50], Training Loss: 0.0055, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:04<00:00, 11.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0046, Validation Loss: 0.0044\n","Epoch [46/50], Training Loss: 0.0044, Validation Loss: 0.0040\n","Epoch [47/50], Training Loss: 0.0039, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:04<00:00, 11.01it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0038, Validation Loss: 0.0039\n","Epoch [49/50], Training Loss: 0.0039, Validation Loss: 0.0053\n","Epoch [50/50], Training Loss: 0.0053, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:04, 10.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0392, Validation Loss: 0.0379\n","Epoch [2/50], Training Loss: 0.0379, Validation Loss: 0.0367\n","Epoch [3/50], Training Loss: 0.0367, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:04, 10.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0356, Validation Loss: 0.0347\n","Epoch [5/50], Training Loss: 0.0347, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  14%|█▍        | 7/50 [00:00<00:05,  8.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0338, Validation Loss: 0.0329\n","Epoch [7/50], Training Loss: 0.0329, Validation Loss: 0.0321\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  20%|██        | 10/50 [00:01<00:04,  8.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0321, Validation Loss: 0.0313\n","Epoch [9/50], Training Loss: 0.0313, Validation Loss: 0.0305\n","Epoch [10/50], Training Loss: 0.0305, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  26%|██▌       | 13/50 [00:01<00:04,  9.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0297, Validation Loss: 0.0290\n","Epoch [12/50], Training Loss: 0.0290, Validation Loss: 0.0283\n","Epoch [13/50], Training Loss: 0.0283, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  30%|███       | 15/50 [00:01<00:03,  9.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0276, Validation Loss: 0.0270\n","Epoch [15/50], Training Loss: 0.0270, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:01<00:03,  9.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0263, Validation Loss: 0.0257\n","Epoch [17/50], Training Loss: 0.0257, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:02<00:03,  9.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0251, Validation Loss: 0.0246\n","Epoch [19/50], Training Loss: 0.0245, Validation Loss: 0.0240\n","Epoch [20/50], Training Loss: 0.0240, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:02<00:03,  9.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0235, Validation Loss: 0.0230\n","Epoch [22/50], Training Loss: 0.0230, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:02<00:03,  8.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0225, Validation Loss: 0.0220\n","Epoch [24/50], Training Loss: 0.0220, Validation Loss: 0.0215\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  52%|█████▏    | 26/50 [00:02<00:02,  8.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0215, Validation Loss: 0.0210\n","Epoch [26/50], Training Loss: 0.0210, Validation Loss: 0.0206\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:03<00:02,  7.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0206, Validation Loss: 0.0201\n","Epoch [28/50], Training Loss: 0.0201, Validation Loss: 0.0197\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:03<00:02,  8.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0197, Validation Loss: 0.0193\n","Epoch [30/50], Training Loss: 0.0193, Validation Loss: 0.0189\n","Epoch [31/50], Training Loss: 0.0188, Validation Loss: 0.0185\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  68%|██████▊   | 34/50 [00:03<00:01,  9.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0184, Validation Loss: 0.0181\n","Epoch [33/50], Training Loss: 0.0180, Validation Loss: 0.0177\n","Epoch [34/50], Training Loss: 0.0176, Validation Loss: 0.0173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:03<00:01,  9.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0173, Validation Loss: 0.0169\n","Epoch [36/50], Training Loss: 0.0169, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0165, Validation Loss: 0.0162\n","Epoch [38/50], Training Loss: 0.0162, Validation Loss: 0.0159\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:04<00:01,  9.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0158, Validation Loss: 0.0155\n","Epoch [40/50], Training Loss: 0.0155, Validation Loss: 0.0152\n","Epoch [41/50], Training Loss: 0.0152, Validation Loss: 0.0149\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:04<00:00, 10.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0149, Validation Loss: 0.0146\n","Epoch [43/50], Training Loss: 0.0146, Validation Loss: 0.0143\n","Epoch [44/50], Training Loss: 0.0143, Validation Loss: 0.0140\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  92%|█████████▏| 46/50 [00:05<00:00, 10.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0140, Validation Loss: 0.0138\n","Epoch [46/50], Training Loss: 0.0138, Validation Loss: 0.0135\n","Epoch [47/50], Training Loss: 0.0135, Validation Loss: 0.0133\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:05<00:00,  9.37it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0133, Validation Loss: 0.0131\n","Epoch [49/50], Training Loss: 0.0130, Validation Loss: 0.0128\n","Epoch [50/50], Training Loss: 0.0128, Validation Loss: 0.0126\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:04, 10.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0323, Validation Loss: 0.0323\n","Epoch [2/50], Training Loss: 0.0322, Validation Loss: 0.0322\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:04, 10.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0321, Validation Loss: 0.0321\n","Epoch [4/50], Training Loss: 0.0321, Validation Loss: 0.0321\n","Epoch [5/50], Training Loss: 0.0320, Validation Loss: 0.0320\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0319, Validation Loss: 0.0319\n","Epoch [7/50], Training Loss: 0.0318, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:03, 10.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0317, Validation Loss: 0.0317\n","Epoch [9/50], Training Loss: 0.0317, Validation Loss: 0.0317\n","Epoch [10/50], Training Loss: 0.0316, Validation Loss: 0.0316\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:01<00:03,  9.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0315, Validation Loss: 0.0315\n","Epoch [12/50], Training Loss: 0.0314, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:01<00:03,  9.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0313, Validation Loss: 0.0313\n","Epoch [14/50], Training Loss: 0.0313, Validation Loss: 0.0313\n","Epoch [15/50], Training Loss: 0.0312, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:01<00:03, 10.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0311, Validation Loss: 0.0311\n","Epoch [17/50], Training Loss: 0.0310, Validation Loss: 0.0310\n","Epoch [18/50], Training Loss: 0.0310, Validation Loss: 0.0310\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:01<00:02, 10.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0309, Validation Loss: 0.0309\n","Epoch [20/50], Training Loss: 0.0308, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0307, Validation Loss: 0.0307\n","Epoch [22/50], Training Loss: 0.0307, Validation Loss: 0.0307\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:02<00:02, 10.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0306, Validation Loss: 0.0306\n","Epoch [24/50], Training Loss: 0.0305, Validation Loss: 0.0305\n","Epoch [25/50], Training Loss: 0.0304, Validation Loss: 0.0304\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:02<00:02,  9.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0304, Validation Loss: 0.0304\n","Epoch [27/50], Training Loss: 0.0303, Validation Loss: 0.0303\n","Epoch [28/50], Training Loss: 0.0302, Validation Loss: 0.0302\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  62%|██████▏   | 31/50 [00:03<00:01, 10.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0301, Validation Loss: 0.0301\n","Epoch [30/50], Training Loss: 0.0301, Validation Loss: 0.0301\n","Epoch [31/50], Training Loss: 0.0300, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:03<00:01, 10.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0299, Validation Loss: 0.0299\n","Epoch [33/50], Training Loss: 0.0298, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:03<00:01, 10.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0298, Validation Loss: 0.0298\n","Epoch [35/50], Training Loss: 0.0297, Validation Loss: 0.0297\n","Epoch [36/50], Training Loss: 0.0296, Validation Loss: 0.0296\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:03<00:01, 10.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0296, Validation Loss: 0.0296\n","Epoch [38/50], Training Loss: 0.0295, Validation Loss: 0.0295\n","Epoch [39/50], Training Loss: 0.0294, Validation Loss: 0.0294\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:04<00:00, 10.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0293, Validation Loss: 0.0293\n","Epoch [41/50], Training Loss: 0.0293, Validation Loss: 0.0293\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:04<00:00, 10.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0292, Validation Loss: 0.0292\n","Epoch [43/50], Training Loss: 0.0291, Validation Loss: 0.0291\n","Epoch [44/50], Training Loss: 0.0291, Validation Loss: 0.0291\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  94%|█████████▍| 47/50 [00:04<00:00, 10.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0290, Validation Loss: 0.0290\n","Epoch [46/50], Training Loss: 0.0289, Validation Loss: 0.0289\n","Epoch [47/50], Training Loss: 0.0288, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:04<00:00, 10.18it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0288, Validation Loss: 0.0288\n","Epoch [49/50], Training Loss: 0.0287, Validation Loss: 0.0287\n","Epoch [50/50], Training Loss: 0.0286, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:05,  8.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0668, Validation Loss: 0.0515\n","Epoch [2/50], Training Loss: 0.0515, Validation Loss: 0.0429\n","Epoch [3/50], Training Loss: 0.0429, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:05,  8.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0364, Validation Loss: 0.0318\n","Epoch [5/50], Training Loss: 0.0318, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:05,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0289, Validation Loss: 0.0265\n","Epoch [7/50], Training Loss: 0.0265, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:01<00:04,  9.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0235, Validation Loss: 0.0203\n","Epoch [9/50], Training Loss: 0.0203, Validation Loss: 0.0170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:01<00:03,  9.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0169, Validation Loss: 0.0140\n","Epoch [11/50], Training Loss: 0.0140, Validation Loss: 0.0117\n","Epoch [12/50], Training Loss: 0.0116, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:01<00:03, 10.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0101, Validation Loss: 0.0093\n","Epoch [14/50], Training Loss: 0.0092, Validation Loss: 0.0090\n","Epoch [15/50], Training Loss: 0.0090, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:01<00:03, 10.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0089, Validation Loss: 0.0086\n","Epoch [17/50], Training Loss: 0.0086, Validation Loss: 0.0083\n","Epoch [18/50], Training Loss: 0.0082, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:02<00:02, 10.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0079, Validation Loss: 0.0078\n","Epoch [20/50], Training Loss: 0.0077, Validation Loss: 0.0076\n","Epoch [21/50], Training Loss: 0.0076, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:02<00:02, 10.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0074, Validation Loss: 0.0073\n","Epoch [23/50], Training Loss: 0.0073, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  50%|█████     | 25/50 [00:02<00:02,  9.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0071, Validation Loss: 0.0071\n","Epoch [25/50], Training Loss: 0.0070, Validation Loss: 0.0070\n","Epoch [26/50], Training Loss: 0.0069, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:02<00:02, 10.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0068, Validation Loss: 0.0067\n","Epoch [28/50], Training Loss: 0.0067, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  62%|██████▏   | 31/50 [00:03<00:01, 10.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0066, Validation Loss: 0.0065\n","Epoch [30/50], Training Loss: 0.0064, Validation Loss: 0.0064\n","Epoch [31/50], Training Loss: 0.0063, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:03<00:01,  9.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0062, Validation Loss: 0.0062\n","Epoch [33/50], Training Loss: 0.0061, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:03<00:01,  8.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0060, Validation Loss: 0.0059\n","Epoch [35/50], Training Loss: 0.0059, Validation Loss: 0.0058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:03<00:01,  9.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0057, Validation Loss: 0.0056\n","Epoch [37/50], Training Loss: 0.0056, Validation Loss: 0.0055\n","Epoch [38/50], Training Loss: 0.0055, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  80%|████████  | 40/50 [00:04<00:01,  9.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0053, Validation Loss: 0.0053\n","Epoch [40/50], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [41/50], Training Loss: 0.0051, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:04<00:00, 10.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0050, Validation Loss: 0.0049\n","Epoch [43/50], Training Loss: 0.0049, Validation Loss: 0.0048\n","Epoch [44/50], Training Loss: 0.0048, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:04<00:00, 10.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0047, Validation Loss: 0.0046\n","Epoch [46/50], Training Loss: 0.0046, Validation Loss: 0.0045\n","Epoch [47/50], Training Loss: 0.0045, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:05<00:00,  9.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0044, Validation Loss: 0.0043\n","Epoch [49/50], Training Loss: 0.0043, Validation Loss: 0.0042\n","Epoch [50/50], Training Loss: 0.0042, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:04, 11.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1552, Validation Loss: 0.1547\n","Epoch [2/50], Training Loss: 0.1548, Validation Loss: 0.1543\n","Epoch [3/50], Training Loss: 0.1543, Validation Loss: 0.1539\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:04, 11.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.1539, Validation Loss: 0.1535\n","Epoch [5/50], Training Loss: 0.1535, Validation Loss: 0.1531\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:03, 10.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.1531, Validation Loss: 0.1526\n","Epoch [7/50], Training Loss: 0.1527, Validation Loss: 0.1522\n","Epoch [8/50], Training Loss: 0.1523, Validation Loss: 0.1518\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  20%|██        | 10/50 [00:01<00:03, 10.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.1519, Validation Loss: 0.1514\n","Epoch [10/50], Training Loss: 0.1515, Validation Loss: 0.1510\n","Epoch [11/50], Training Loss: 0.1511, Validation Loss: 0.1506\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:01<00:03, 11.18it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.1507, Validation Loss: 0.1502\n","Epoch [13/50], Training Loss: 0.1503, Validation Loss: 0.1498\n","Epoch [14/50], Training Loss: 0.1499, Validation Loss: 0.1494\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:01<00:03, 10.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.1495, Validation Loss: 0.1490\n","Epoch [16/50], Training Loss: 0.1491, Validation Loss: 0.1486\n","Epoch [17/50], Training Loss: 0.1487, Validation Loss: 0.1482\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:01<00:02, 10.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.1483, Validation Loss: 0.1478\n","Epoch [19/50], Training Loss: 0.1479, Validation Loss: 0.1475\n","Epoch [20/50], Training Loss: 0.1475, Validation Loss: 0.1471\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:02<00:02, 10.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.1471, Validation Loss: 0.1467\n","Epoch [22/50], Training Loss: 0.1467, Validation Loss: 0.1463\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:02<00:02, 10.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.1463, Validation Loss: 0.1459\n","Epoch [24/50], Training Loss: 0.1460, Validation Loss: 0.1455\n","Epoch [25/50], Training Loss: 0.1456, Validation Loss: 0.1451\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:02<00:02, 10.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.1452, Validation Loss: 0.1448\n","Epoch [27/50], Training Loss: 0.1448, Validation Loss: 0.1444\n","Epoch [28/50], Training Loss: 0.1444, Validation Loss: 0.1440\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:02<00:01, 10.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.1440, Validation Loss: 0.1436\n","Epoch [30/50], Training Loss: 0.1437, Validation Loss: 0.1432\n","Epoch [31/50], Training Loss: 0.1433, Validation Loss: 0.1429\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  68%|██████▊   | 34/50 [00:03<00:01, 10.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.1429, Validation Loss: 0.1425\n","Epoch [33/50], Training Loss: 0.1425, Validation Loss: 0.1421\n","Epoch [34/50], Training Loss: 0.1422, Validation Loss: 0.1417\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:03<00:01, 11.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.1418, Validation Loss: 0.1414\n","Epoch [36/50], Training Loss: 0.1414, Validation Loss: 0.1410\n","Epoch [37/50], Training Loss: 0.1411, Validation Loss: 0.1406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:03<00:00, 10.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.1407, Validation Loss: 0.1403\n","Epoch [39/50], Training Loss: 0.1403, Validation Loss: 0.1399\n","Epoch [40/50], Training Loss: 0.1399, Validation Loss: 0.1395\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:03<00:00, 11.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.1396, Validation Loss: 0.1391\n","Epoch [42/50], Training Loss: 0.1392, Validation Loss: 0.1388\n","Epoch [43/50], Training Loss: 0.1388, Validation Loss: 0.1384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  92%|█████████▏| 46/50 [00:04<00:00, 11.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.1385, Validation Loss: 0.1380\n","Epoch [45/50], Training Loss: 0.1381, Validation Loss: 0.1377\n","Epoch [46/50], Training Loss: 0.1377, Validation Loss: 0.1373\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:04<00:00, 11.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.1374, Validation Loss: 0.1369\n","Epoch [48/50], Training Loss: 0.1370, Validation Loss: 0.1366\n","Epoch [49/50], Training Loss: 0.1366, Validation Loss: 0.1362\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:04<00:00, 10.90it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.1363, Validation Loss: 0.1359\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:03, 12.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1182, Validation Loss: 0.1182\n","Epoch [2/50], Training Loss: 0.1181, Validation Loss: 0.1182\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   4%|▍         | 2/50 [00:00<00:03, 12.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.1181, Validation Loss: 0.1182\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:03, 12.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.1181, Validation Loss: 0.1181\n","Epoch [5/50], Training Loss: 0.1181, Validation Loss: 0.1181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:03, 12.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.1180, Validation Loss: 0.1181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:03, 11.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.1180, Validation Loss: 0.1181\n","Epoch [8/50], Training Loss: 0.1180, Validation Loss: 0.1180\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:03, 11.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.1180, Validation Loss: 0.1180\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:03, 11.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.1179, Validation Loss: 0.1180\n","Epoch [11/50], Training Loss: 0.1179, Validation Loss: 0.1180\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:01<00:03, 10.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.1179, Validation Loss: 0.1179\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:03, 11.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.1178, Validation Loss: 0.1179\n","Epoch [14/50], Training Loss: 0.1178, Validation Loss: 0.1179\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:01<00:03, 11.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.1178, Validation Loss: 0.1179\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:01<00:03, 10.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.1178, Validation Loss: 0.1178\n","Epoch [17/50], Training Loss: 0.1177, Validation Loss: 0.1178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:01<00:02, 11.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.1177, Validation Loss: 0.1178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:01<00:02, 11.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.1177, Validation Loss: 0.1178\n","Epoch [20/50], Training Loss: 0.1177, Validation Loss: 0.1177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:01<00:02, 11.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.1176, Validation Loss: 0.1177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:01<00:02, 10.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.1176, Validation Loss: 0.1177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:02<00:02, 10.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.1176, Validation Loss: 0.1176\n","Epoch [24/50], Training Loss: 0.1176, Validation Loss: 0.1176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:02<00:02, 10.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.1175, Validation Loss: 0.1176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:02<00:02, 11.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.1175, Validation Loss: 0.1176\n","Epoch [27/50], Training Loss: 0.1175, Validation Loss: 0.1175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:02<00:01, 11.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.1175, Validation Loss: 0.1175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:02<00:01, 11.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.1174, Validation Loss: 0.1175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:02<00:01, 10.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.1174, Validation Loss: 0.1175\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:02<00:01, 10.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.1174, Validation Loss: 0.1174\n","Epoch [32/50], Training Loss: 0.1173, Validation Loss: 0.1174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:03<00:01, 10.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.1173, Validation Loss: 0.1174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  68%|██████▊   | 34/50 [00:03<00:01, 10.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.1173, Validation Loss: 0.1174\n","Epoch [35/50], Training Loss: 0.1173, Validation Loss: 0.1173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:03<00:01, 10.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.1172, Validation Loss: 0.1173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:03<00:01, 11.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.1172, Validation Loss: 0.1173\n","Epoch [38/50], Training Loss: 0.1172, Validation Loss: 0.1173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:03<00:01, 11.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.1172, Validation Loss: 0.1172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:03<00:00, 11.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.1171, Validation Loss: 0.1172\n","Epoch [41/50], Training Loss: 0.1171, Validation Loss: 0.1172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:04<00:00, 10.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.1171, Validation Loss: 0.1172\n","Epoch [43/50], Training Loss: 0.1171, Validation Loss: 0.1171\n","Epoch [44/50], Training Loss: 0.1170, Validation Loss: 0.1171\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  92%|█████████▏| 46/50 [00:04<00:00, 11.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.1170, Validation Loss: 0.1171\n","Epoch [46/50], Training Loss: 0.1170, Validation Loss: 0.1170\n","Epoch [47/50], Training Loss: 0.1170, Validation Loss: 0.1170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  96%|█████████▌| 48/50 [00:04<00:00, 10.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.1169, Validation Loss: 0.1170\n","Epoch [49/50], Training Loss: 0.1169, Validation Loss: 0.1170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:04<00:00, 10.87it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.1169, Validation Loss: 0.1169\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   2%|▏         | 1/50 [00:00<00:05,  9.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0383, Validation Loss: 0.0366\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:05,  9.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0366, Validation Loss: 0.0355\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:05,  8.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0354, Validation Loss: 0.0346\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:05,  9.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0345, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:04,  9.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0337, Validation Loss: 0.0331\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:04,  8.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0331, Validation Loss: 0.0325\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:05,  8.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0324, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:00<00:04,  8.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0319, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:01<00:04,  8.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0313, Validation Loss: 0.0309\n","Epoch [10/50], Training Loss: 0.0309, Validation Loss: 0.0305\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:01<00:04,  8.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0304, Validation Loss: 0.0300\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:01<00:04,  8.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0300, Validation Loss: 0.0296\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  26%|██▌       | 13/50 [00:01<00:04,  8.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0296, Validation Loss: 0.0293\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:01<00:04,  8.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0292, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  30%|███       | 15/50 [00:01<00:04,  8.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0288, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:01<00:03,  8.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0285, Validation Loss: 0.0282\n","Epoch [17/50], Training Loss: 0.0281, Validation Loss: 0.0279\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:01<00:03,  9.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0278, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:02<00:03,  9.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0275, Validation Loss: 0.0273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:02<00:03,  9.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0272, Validation Loss: 0.0270\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:02<00:03,  8.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0269, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:02<00:03,  8.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0267, Validation Loss: 0.0264\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:02<00:03,  8.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0264, Validation Loss: 0.0262\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:02<00:03,  8.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0261, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  50%|█████     | 25/50 [00:02<00:02,  8.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0259, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:02<00:02,  8.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0256, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:03<00:02,  8.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0254, Validation Loss: 0.0252\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:03<00:02,  7.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0251, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:03<00:02,  7.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0249, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  60%|██████    | 30/50 [00:03<00:02,  7.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0247, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  62%|██████▏   | 31/50 [00:03<00:02,  8.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0244, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:03<00:02,  8.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0242, Validation Loss: 0.0241\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:03<00:01,  8.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0240, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:04<00:01,  8.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0238, Validation Loss: 0.0237\n","Epoch [35/50], Training Loss: 0.0236, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:04<00:01,  9.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0234, Validation Loss: 0.0233\n","Epoch [37/50], Training Loss: 0.0232, Validation Loss: 0.0231\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:04<00:01,  8.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0230, Validation Loss: 0.0229\n","Epoch [39/50], Training Loss: 0.0228, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0226, Validation Loss: 0.0225\n","Epoch [41/50], Training Loss: 0.0225, Validation Loss: 0.0223\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:04<00:00,  9.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0223, Validation Loss: 0.0222\n","Epoch [43/50], Training Loss: 0.0221, Validation Loss: 0.0220\n","Epoch [44/50], Training Loss: 0.0220, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:05<00:00,  9.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0218, Validation Loss: 0.0217\n","Epoch [46/50], Training Loss: 0.0216, Validation Loss: 0.0215\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:05<00:00,  7.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0215, Validation Loss: 0.0214\n","Epoch [48/50], Training Loss: 0.0213, Validation Loss: 0.0212\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:05<00:00,  8.66it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0212, Validation Loss: 0.0211\n","Epoch [50/50], Training Loss: 0.0210, Validation Loss: 0.0209\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   2%|▏         | 1/50 [00:00<00:18,  2.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0448, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:15,  3.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0212, Validation Loss: 0.0098\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:15,  3.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0098, Validation Loss: 0.0180\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:01<00:13,  3.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0180, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:01<00:12,  3.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0104, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:01<00:11,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0081, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 7/50 [00:01<00:11,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0091, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:02<00:11,  3.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0099, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 9/50 [00:02<00:11,  3.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0099, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:02<00:11,  3.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0093, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  22%|██▏       | 11/50 [00:03<00:10,  3.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0084, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:03<00:10,  3.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0078, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  26%|██▌       | 13/50 [00:03<00:10,  3.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0076, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:03<00:09,  3.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0078, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 15/50 [00:04<00:09,  3.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0078, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 16/50 [00:04<00:09,  3.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0076, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 17/50 [00:04<00:09,  3.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0072, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:05<00:08,  3.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0070, Validation Loss: 0.0068\n","Epoch [19/50], Training Loss: 0.0068, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:05<00:07,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0066, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 22/50 [00:05<00:06,  4.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0064, Validation Loss: 0.0062\n","Epoch [22/50], Training Loss: 0.0062, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:06<00:05,  5.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0061, Validation Loss: 0.0060\n","Epoch [24/50], Training Loss: 0.0060, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:06<00:04,  5.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0059, Validation Loss: 0.0058\n","Epoch [26/50], Training Loss: 0.0058, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 27/50 [00:06<00:04,  5.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0055, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 29/50 [00:07<00:04,  5.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0053, Validation Loss: 0.0052\n","Epoch [29/50], Training Loss: 0.0051, Validation Loss: 0.0051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:07<00:04,  4.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0051, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:07<00:03,  4.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0050, Validation Loss: 0.0048\n","Epoch [32/50], Training Loss: 0.0048, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 34/50 [00:08<00:03,  4.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0045, Validation Loss: 0.0044\n","Epoch [34/50], Training Loss: 0.0044, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 35/50 [00:08<00:03,  4.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0043, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  74%|███████▍  | 37/50 [00:08<00:02,  4.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0042, Validation Loss: 0.0040\n","Epoch [37/50], Training Loss: 0.0040, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 39/50 [00:09<00:02,  5.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0038, Validation Loss: 0.0037\n","Epoch [39/50], Training Loss: 0.0037, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 41/50 [00:09<00:01,  5.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0036, Validation Loss: 0.0034\n","Epoch [41/50], Training Loss: 0.0034, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 43/50 [00:09<00:01,  5.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0032, Validation Loss: 0.0031\n","Epoch [43/50], Training Loss: 0.0031, Validation Loss: 0.0029\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:10<00:01,  5.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0029, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:10<00:00,  5.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0027, Validation Loss: 0.0026\n","Epoch [46/50], Training Loss: 0.0026, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:10<00:00,  5.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0024, Validation Loss: 0.0023\n","Epoch [48/50], Training Loss: 0.0023, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 49/50 [00:11<00:00,  5.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0021, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:11<00:00,  4.38it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0020, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   2%|▏         | 1/50 [00:00<00:09,  4.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0290, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:09,  4.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0285, Validation Loss: 0.0281\n","Epoch [3/50], Training Loss: 0.0280, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  10%|█         | 5/50 [00:00<00:08,  5.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0275, Validation Loss: 0.0271\n","Epoch [5/50], Training Loss: 0.0271, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 7/50 [00:01<00:07,  5.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0266, Validation Loss: 0.0262\n","Epoch [7/50], Training Loss: 0.0262, Validation Loss: 0.0258\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:01<00:07,  5.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0257, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 9/50 [00:01<00:07,  5.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0253, Validation Loss: 0.0250\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:02<00:08,  5.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0249, Validation Loss: 0.0245\n","Epoch [11/50], Training Loss: 0.0245, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 13/50 [00:02<00:07,  4.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0241, Validation Loss: 0.0238\n","Epoch [13/50], Training Loss: 0.0237, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 15/50 [00:02<00:06,  5.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0233, Validation Loss: 0.0230\n","Epoch [15/50], Training Loss: 0.0230, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:03<00:06,  4.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0226, Validation Loss: 0.0223\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 17/50 [00:03<00:06,  4.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0223, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 18/50 [00:03<00:06,  4.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0219, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 19/50 [00:03<00:06,  4.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0216, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:04<00:06,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0213, Validation Loss: 0.0210\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 21/50 [00:04<00:06,  4.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0210, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:04<00:06,  4.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0207, Validation Loss: 0.0204\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 23/50 [00:04<00:06,  4.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0204, Validation Loss: 0.0201\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:05<00:06,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0201, Validation Loss: 0.0199\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 25/50 [00:05<00:06,  3.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0198, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:05<00:06,  3.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0195, Validation Loss: 0.0193\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 27/50 [00:05<00:06,  3.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0192, Validation Loss: 0.0191\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 28/50 [00:06<00:05,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0190, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 29/50 [00:06<00:05,  3.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0187, Validation Loss: 0.0185\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 31/50 [00:06<00:04,  4.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0185, Validation Loss: 0.0183\n","Epoch [31/50], Training Loss: 0.0182, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:07<00:04,  4.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0180, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  66%|██████▌   | 33/50 [00:07<00:03,  4.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0178, Validation Loss: 0.0176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 34/50 [00:07<00:03,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0175, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:07<00:03,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0173, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 36/50 [00:08<00:03,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0171, Validation Loss: 0.0170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 37/50 [00:08<00:03,  3.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0169, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  76%|███████▌  | 38/50 [00:08<00:03,  3.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0167, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  78%|███████▊  | 39/50 [00:08<00:02,  3.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0165, Validation Loss: 0.0164\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:09<00:02,  3.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0163, Validation Loss: 0.0162\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:09<00:02,  3.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0161, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  84%|████████▍ | 42/50 [00:09<00:02,  3.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0159, Validation Loss: 0.0158\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 43/50 [00:10<00:01,  3.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0158, Validation Loss: 0.0156\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 44/50 [00:10<00:01,  3.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0156, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 45/50 [00:10<00:01,  3.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0154, Validation Loss: 0.0153\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:10<00:01,  3.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0152, Validation Loss: 0.0152\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 47/50 [00:11<00:00,  3.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0151, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  96%|█████████▌| 48/50 [00:11<00:00,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0149, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  98%|█████████▊| 49/50 [00:11<00:00,  3.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0148, Validation Loss: 0.0147\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:11<00:00,  4.23it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0146, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   2%|▏         | 1/50 [00:00<00:12,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0567, Validation Loss: 2.4874\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:12,  3.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 2.4954, Validation Loss: 0.0664\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:10,  4.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0663, Validation Loss: 0.0424\n","Epoch [4/50], Training Loss: 0.0424, Validation Loss: 0.0366\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  10%|█         | 5/50 [00:01<00:10,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0365, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:01<00:10,  4.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0318, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:01<00:10,  4.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0245, Validation Loss: 0.0169\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:02<00:09,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0168, Validation Loss: 0.0105\n","Epoch [9/50], Training Loss: 0.0105, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:02<00:08,  4.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0082, Validation Loss: 0.0080\n","Epoch [11/50], Training Loss: 0.0080, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  26%|██▌       | 13/50 [00:02<00:07,  5.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0080, Validation Loss: 0.0085\n","Epoch [13/50], Training Loss: 0.0084, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:03<00:07,  4.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0082, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:03<00:07,  4.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0084, Validation Loss: 0.0079\n","Epoch [16/50], Training Loss: 0.0079, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:03<00:06,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0079, Validation Loss: 0.0078\n","Epoch [18/50], Training Loss: 0.0077, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  40%|████      | 20/50 [00:04<00:05,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0076, Validation Loss: 0.0077\n","Epoch [20/50], Training Loss: 0.0076, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:04<00:05,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0078, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:04<00:05,  4.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0078, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:04<00:05,  4.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0080, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  50%|█████     | 25/50 [00:05<00:05,  4.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0077, Validation Loss: 0.0077\n","Epoch [25/50], Training Loss: 0.0077, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:05<00:04,  5.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0075, Validation Loss: 0.0075\n","Epoch [27/50], Training Loss: 0.0074, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:05<00:04,  5.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0073, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:06<00:04,  4.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0073, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  60%|██████    | 30/50 [00:06<00:04,  4.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0073, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0072, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:06<00:03,  4.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0072, Validation Loss: 0.0072\n","Epoch [33/50], Training Loss: 0.0072, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  70%|███████   | 35/50 [00:07<00:02,  5.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0071, Validation Loss: 0.0072\n","Epoch [35/50], Training Loss: 0.0072, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:07<00:02,  5.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0071, Validation Loss: 0.0073\n","Epoch [37/50], Training Loss: 0.0072, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:07<00:02,  5.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0072, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:08<00:02,  4.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0073, Validation Loss: 0.0072\n","Epoch [40/50], Training Loss: 0.0071, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:08<00:01,  4.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0072, Validation Loss: 0.0071\n","Epoch [42/50], Training Loss: 0.0070, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:08<00:01,  4.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0070, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0069, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:09<00:00,  4.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0069, Validation Loss: 0.0069\n","Epoch [46/50], Training Loss: 0.0069, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:10<00:00,  5.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0069, Validation Loss: 0.0068\n","Epoch [48/50], Training Loss: 0.0068, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  98%|█████████▊| 49/50 [00:10<00:00,  4.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0068, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:10<00:00,  4.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0068, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:09,  5.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0505, Validation Loss: 0.0472\n","Epoch [2/50], Training Loss: 0.0471, Validation Loss: 0.0441\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:08,  5.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0440, Validation Loss: 0.0410\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:00<00:08,  5.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0409, Validation Loss: 0.0381\n","Epoch [5/50], Training Loss: 0.0379, Validation Loss: 0.0352\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 7/50 [00:01<00:08,  4.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0350, Validation Loss: 0.0326\n","Epoch [7/50], Training Loss: 0.0325, Validation Loss: 0.0304\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:01<00:09,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0302, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  18%|█▊        | 9/50 [00:01<00:10,  3.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0282, Validation Loss: 0.0264\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:02<00:09,  4.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0263, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  22%|██▏       | 11/50 [00:02<00:09,  4.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0244, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:02<00:09,  3.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0227, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  26%|██▌       | 13/50 [00:02<00:09,  4.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0210, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:03<00:08,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0194, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  30%|███       | 15/50 [00:03<00:08,  4.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0180, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 16/50 [00:03<00:08,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0166, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  34%|███▍      | 17/50 [00:04<00:08,  3.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0154, Validation Loss: 0.0145\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:04<00:08,  3.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0144, Validation Loss: 0.0137\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  38%|███▊      | 19/50 [00:04<00:08,  3.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0136, Validation Loss: 0.0130\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:04<00:08,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0129, Validation Loss: 0.0125\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  42%|████▏     | 21/50 [00:05<00:08,  3.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0125, Validation Loss: 0.0123\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 22/50 [00:05<00:08,  3.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0122, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  46%|████▌     | 23/50 [00:05<00:08,  3.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0120, Validation Loss: 0.0120\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:06<00:07,  3.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0119, Validation Loss: 0.0119\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  50%|█████     | 25/50 [00:06<00:06,  3.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0118, Validation Loss: 0.0118\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:06<00:06,  3.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0117, Validation Loss: 0.0116\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  54%|█████▍    | 27/50 [00:06<00:05,  3.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0115, Validation Loss: 0.0113\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  56%|█████▌    | 28/50 [00:07<00:05,  3.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0112, Validation Loss: 0.0110\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 29/50 [00:07<00:05,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0109, Validation Loss: 0.0106\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:07<00:05,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0106, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  62%|██████▏   | 31/50 [00:07<00:05,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0102, Validation Loss: 0.0099\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:08<00:04,  3.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0098, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  66%|██████▌   | 33/50 [00:08<00:04,  3.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0095, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 34/50 [00:08<00:03,  4.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0092, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 35/50 [00:08<00:03,  4.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0090, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:09<00:03,  4.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0088, Validation Loss: 0.0087\n","Epoch [37/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 38/50 [00:09<00:02,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0085, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 39/50 [00:09<00:02,  4.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0084, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:09<00:02,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0083, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 41/50 [00:10<00:01,  4.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0082, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:10<00:01,  4.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0081, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 43/50 [00:10<00:01,  4.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0079, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:10<00:01,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0078, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  90%|█████████ | 45/50 [00:11<00:01,  3.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0077, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:11<00:01,  3.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0076, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0075, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 49/50 [00:12<00:00,  4.47it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0074, Validation Loss: 0.0074\n","Epoch [49/50], Training Loss: 0.0074, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:12<00:00,  4.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0073, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0394, Validation Loss: 0.0393\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   2%|▏         | 1/50 [00:00<00:09,  5.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0393, Validation Loss: 0.0392\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:08,  5.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0392, Validation Loss: 0.0391\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0391, Validation Loss: 0.0390\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:01<00:08,  5.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0390, Validation Loss: 0.0390\n","Epoch [6/50], Training Loss: 0.0390, Validation Loss: 0.0389\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:01<00:07,  5.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0389, Validation Loss: 0.0388\n","Epoch [8/50], Training Loss: 0.0388, Validation Loss: 0.0387\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 9/50 [00:01<00:07,  5.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0387, Validation Loss: 0.0386\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:01<00:07,  5.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0386, Validation Loss: 0.0385\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  22%|██▏       | 11/50 [00:02<00:07,  4.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0385, Validation Loss: 0.0384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:02<00:07,  4.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0384, Validation Loss: 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:02<00:07,  5.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0383, Validation Loss: 0.0382\n","Epoch [14/50], Training Loss: 0.0382, Validation Loss: 0.0381\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 15/50 [00:02<00:06,  5.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0381, Validation Loss: 0.0380\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:03<00:06,  4.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0380, Validation Loss: 0.0379\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 17/50 [00:03<00:06,  4.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0379, Validation Loss: 0.0379\n","Epoch [18/50], Training Loss: 0.0379, Validation Loss: 0.0378\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 19/50 [00:03<00:06,  4.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0378, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 21/50 [00:04<00:05,  5.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0377, Validation Loss: 0.0376\n","Epoch [21/50], Training Loss: 0.0376, Validation Loss: 0.0375\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:04<00:05,  4.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0375, Validation Loss: 0.0374\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 23/50 [00:04<00:05,  4.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0374, Validation Loss: 0.0373\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 25/50 [00:04<00:05,  4.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0373, Validation Loss: 0.0372\n","Epoch [25/50], Training Loss: 0.0372, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:05<00:04,  5.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0371, Validation Loss: 0.0371\n","Epoch [27/50], Training Loss: 0.0371, Validation Loss: 0.0370\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 29/50 [00:05<00:04,  5.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0370, Validation Loss: 0.0369\n","Epoch [29/50], Training Loss: 0.0369, Validation Loss: 0.0368\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 30/50 [00:05<00:03,  5.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0368, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 31/50 [00:06<00:03,  4.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0367, Validation Loss: 0.0366\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  66%|██████▌   | 33/50 [00:06<00:03,  5.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0366, Validation Loss: 0.0365\n","Epoch [33/50], Training Loss: 0.0365, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:06<00:02,  5.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0365, Validation Loss: 0.0364\n","Epoch [35/50], Training Loss: 0.0364, Validation Loss: 0.0363\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  72%|███████▏  | 36/50 [00:07<00:02,  5.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0363, Validation Loss: 0.0362\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 37/50 [00:07<00:02,  4.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0362, Validation Loss: 0.0361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  78%|███████▊  | 39/50 [00:07<00:02,  5.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0361, Validation Loss: 0.0360\n","Epoch [39/50], Training Loss: 0.0360, Validation Loss: 0.0360\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:07<00:01,  5.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0359, Validation Loss: 0.0359\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:08<00:01,  4.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0359, Validation Loss: 0.0358\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  86%|████████▌ | 43/50 [00:08<00:01,  4.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0358, Validation Loss: 0.0357\n","Epoch [43/50], Training Loss: 0.0357, Validation Loss: 0.0356\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  90%|█████████ | 45/50 [00:08<00:00,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0356, Validation Loss: 0.0355\n","Epoch [45/50], Training Loss: 0.0355, Validation Loss: 0.0355\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:09<00:00,  5.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0354, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 47/50 [00:09<00:00,  4.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0354, Validation Loss: 0.0353\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  96%|█████████▌| 48/50 [00:09<00:00,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0353, Validation Loss: 0.0352\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  98%|█████████▊| 49/50 [00:09<00:00,  4.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0352, Validation Loss: 0.0351\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:10<00:00,  4.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0351, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   2%|▏         | 1/50 [00:00<00:14,  3.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0258, Validation Loss: 0.0174\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:13,  3.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0173, Validation Loss: 0.0110\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:12,  3.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0109, Validation Loss: 0.0098\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   8%|▊         | 4/50 [00:01<00:11,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0097, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  10%|█         | 5/50 [00:01<00:10,  4.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0092, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:01<00:10,  4.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0087, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:01<00:10,  3.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0084, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:02<00:10,  3.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0079, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:02<00:11,  3.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0076, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  20%|██        | 10/50 [00:02<00:10,  3.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0073, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:02<00:09,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0071, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:03<00:09,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0070, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  26%|██▌       | 13/50 [00:03<00:09,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0068, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:03<00:09,  3.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0069, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  30%|███       | 15/50 [00:03<00:08,  3.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0063, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:04<00:08,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0061, Validation Loss: 0.0058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:04<00:09,  3.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0058, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:04<00:09,  3.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0057, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:05<00:08,  3.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0054, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  40%|████      | 20/50 [00:05<00:07,  3.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0054, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:05<00:07,  3.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0051, Validation Loss: 0.0051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:05<00:07,  3.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0051, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:06<00:07,  3.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0048, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:06<00:06,  3.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0047, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  50%|█████     | 25/50 [00:06<00:06,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0044, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:06<00:06,  3.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0043, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:07<00:06,  3.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0043, Validation Loss: 0.0044\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:07<00:06,  3.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0044, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:07<00:06,  3.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0046, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                             "]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0054, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  62%|██████▏   | 31/50 [00:08<00:04,  3.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0038, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:08<00:04,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0035, Validation Loss: 0.0032\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:08<00:04,  4.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0032, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:08<00:03,  4.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0030, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  70%|███████   | 35/50 [00:09<00:03,  4.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0030, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:09<00:03,  4.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0033, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:09<00:03,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0037, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:09<00:02,  4.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0036, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:10<00:02,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0033, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  80%|████████  | 40/50 [00:10<00:02,  4.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0027, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:10<00:01,  4.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0024, Validation Loss: 0.0023\n","Epoch [42/50], Training Loss: 0.0023, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:10<00:01,  4.58it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0022, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:11<00:01,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0022, Validation Loss: 0.0024\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                             "]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0024, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  94%|█████████▍| 47/50 [00:11<00:00,  5.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0027, Validation Loss: 0.0036\n","Epoch [47/50], Training Loss: 0.0036, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:11<00:00,  5.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0025, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:12<00:00,  4.04it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0023, Validation Loss: 0.0019\n","Epoch [50/50], Training Loss: 0.0019, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   4%|▍         | 2/50 [00:00<00:09,  5.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0395, Validation Loss: 0.0393\n","Epoch [2/50], Training Loss: 0.0393, Validation Loss: 0.0391\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:09,  5.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0391, Validation Loss: 0.0390\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:09,  4.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0389, Validation Loss: 0.0388\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:01<00:09,  4.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0388, Validation Loss: 0.0386\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0386, Validation Loss: 0.0384\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  14%|█▍        | 7/50 [00:01<00:09,  4.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0384, Validation Loss: 0.0383\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:01<00:09,  4.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0383, Validation Loss: 0.0381\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:02<00:08,  4.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0381, Validation Loss: 0.0380\n","Epoch [10/50], Training Loss: 0.0380, Validation Loss: 0.0378\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:02<00:07,  5.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0378, Validation Loss: 0.0377\n","Epoch [12/50], Training Loss: 0.0377, Validation Loss: 0.0375\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:02<00:06,  5.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0375, Validation Loss: 0.0374\n","Epoch [14/50], Training Loss: 0.0374, Validation Loss: 0.0372\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  32%|███▏      | 16/50 [00:03<00:06,  5.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0372, Validation Loss: 0.0371\n","Epoch [16/50], Training Loss: 0.0371, Validation Loss: 0.0369\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:03<00:05,  5.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0369, Validation Loss: 0.0368\n","Epoch [18/50], Training Loss: 0.0368, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:03<00:05,  5.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0366, Validation Loss: 0.0365\n","Epoch [20/50], Training Loss: 0.0365, Validation Loss: 0.0364\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  44%|████▍     | 22/50 [00:04<00:05,  5.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0364, Validation Loss: 0.0362\n","Epoch [22/50], Training Loss: 0.0362, Validation Loss: 0.0361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  46%|████▌     | 23/50 [00:04<00:05,  5.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0361, Validation Loss: 0.0359\n","Epoch [24/50], Training Loss: 0.0359, Validation Loss: 0.0358\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  50%|█████     | 25/50 [00:04<00:04,  5.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0358, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:05<00:04,  4.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0356, Validation Loss: 0.0355\n","Epoch [27/50], Training Loss: 0.0355, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  58%|█████▊    | 29/50 [00:05<00:04,  5.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0354, Validation Loss: 0.0352\n","Epoch [29/50], Training Loss: 0.0352, Validation Loss: 0.0351\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:05<00:03,  5.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0351, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:06<00:03,  5.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0350, Validation Loss: 0.0349\n","Epoch [32/50], Training Loss: 0.0348, Validation Loss: 0.0347\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0347, Validation Loss: 0.0346\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  68%|██████▊   | 34/50 [00:06<00:03,  4.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0346, Validation Loss: 0.0345\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 35/50 [00:06<00:03,  4.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0345, Validation Loss: 0.0344\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:07<00:02,  4.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0344, Validation Loss: 0.0343\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  74%|███████▍  | 37/50 [00:07<00:02,  4.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0342, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  76%|███████▌  | 38/50 [00:07<00:02,  4.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0341, Validation Loss: 0.0340\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  78%|███████▊  | 39/50 [00:07<00:02,  4.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0340, Validation Loss: 0.0339\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:08<00:02,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0339, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  82%|████████▏ | 41/50 [00:08<00:02,  3.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0338, Validation Loss: 0.0337\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:08<00:02,  3.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0337, Validation Loss: 0.0336\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  86%|████████▌ | 43/50 [00:08<00:01,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0336, Validation Loss: 0.0335\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:09<00:01,  4.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0335, Validation Loss: 0.0334\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  90%|█████████ | 45/50 [00:09<00:01,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0334, Validation Loss: 0.0333\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:09<00:01,  3.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0333, Validation Loss: 0.0332\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  94%|█████████▍| 47/50 [00:09<00:00,  3.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0332, Validation Loss: 0.0331\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  96%|█████████▌| 48/50 [00:10<00:00,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0331, Validation Loss: 0.0330\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  98%|█████████▊| 49/50 [00:10<00:00,  3.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0330, Validation Loss: 0.0329\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:10<00:00,  4.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0329, Validation Loss: 0.0328\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   6%|▌         | 3/50 [00:00<00:09,  4.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:09,  4.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:01<00:09,  4.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 7/50 [00:01<00:08,  4.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  16%|█▌        | 8/50 [00:01<00:08,  4.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  18%|█▊        | 9/50 [00:01<00:08,  4.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  20%|██        | 10/50 [00:02<00:09,  4.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  22%|██▏       | 11/50 [00:02<00:09,  4.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:02<00:09,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 13/50 [00:02<00:09,  3.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:03<00:09,  3.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  30%|███       | 15/50 [00:03<00:08,  3.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  32%|███▏      | 16/50 [00:03<00:08,  4.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  34%|███▍      | 17/50 [00:03<00:08,  3.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 18/50 [00:04<00:08,  3.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0160, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  38%|███▊      | 19/50 [00:04<00:07,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:04<00:07,  4.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  42%|████▏     | 21/50 [00:04<00:06,  4.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  44%|████▍     | 22/50 [00:05<00:06,  4.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  46%|████▌     | 23/50 [00:05<00:07,  3.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:05<00:06,  3.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  50%|█████     | 25/50 [00:05<00:06,  3.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:06<00:05,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 27/50 [00:06<00:05,  3.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  56%|█████▌    | 28/50 [00:06<00:05,  3.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  60%|██████    | 30/50 [00:07<00:04,  4.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  62%|██████▏   | 31/50 [00:07<00:04,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0160, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:07<00:04,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  66%|██████▌   | 33/50 [00:07<00:04,  3.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:08<00:03,  4.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  74%|███████▍  | 37/50 [00:08<00:03,  4.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  76%|███████▌  | 38/50 [00:09<00:02,  4.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:09<00:02,  4.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [40/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:09<00:01,  4.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [42/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  88%|████████▊ | 44/50 [00:10<00:01,  5.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [44/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:10<00:00,  5.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [46/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  94%|█████████▍| 47/50 [00:11<00:00,  5.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [48/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  98%|█████████▊| 49/50 [00:11<00:00,  4.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0159, Validation Loss: 0.0160\n","Epoch [50/50], Training Loss: 0.0159, Validation Loss: 0.0160\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:11<00:00,  4.35it/s]\n","Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   4%|▍         | 2/50 [00:00<00:10,  4.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0560, Validation Loss: 0.0512\n","Epoch [2/50], Training Loss: 0.0511, Validation Loss: 0.0480\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:09,  5.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0479, Validation Loss: 0.0455\n","Epoch [4/50], Training Loss: 0.0454, Validation Loss: 0.0435\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0434, Validation Loss: 0.0417\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:01<00:08,  4.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0416, Validation Loss: 0.0402\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:01<00:09,  4.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0401, Validation Loss: 0.0389\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:01<00:09,  4.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0388, Validation Loss: 0.0376\n","Epoch [9/50], Training Loss: 0.0375, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:02<00:08,  4.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0364, Validation Loss: 0.0354\n","Epoch [11/50], Training Loss: 0.0353, Validation Loss: 0.0344\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  26%|██▌       | 13/50 [00:02<00:07,  5.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0342, Validation Loss: 0.0334\n","Epoch [13/50], Training Loss: 0.0332, Validation Loss: 0.0324\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  30%|███       | 15/50 [00:03<00:06,  5.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0323, Validation Loss: 0.0315\n","Epoch [15/50], Training Loss: 0.0314, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:03<00:06,  5.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0305, Validation Loss: 0.0297\n","Epoch [17/50], Training Loss: 0.0296, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0288, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  40%|████      | 20/50 [00:03<00:05,  5.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0280, Validation Loss: 0.0273\n","Epoch [20/50], Training Loss: 0.0272, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:04<00:05,  5.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0264, Validation Loss: 0.0258\n","Epoch [22/50], Training Loss: 0.0257, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:04<00:05,  5.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0250, Validation Loss: 0.0244\n","Epoch [24/50], Training Loss: 0.0243, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:05<00:04,  5.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0236, Validation Loss: 0.0231\n","Epoch [26/50], Training Loss: 0.0230, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:05<00:04,  5.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0223, Validation Loss: 0.0218\n","Epoch [28/50], Training Loss: 0.0217, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  60%|██████    | 30/50 [00:05<00:03,  5.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0211, Validation Loss: 0.0207\n","Epoch [30/50], Training Loss: 0.0206, Validation Loss: 0.0201\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:06<00:03,  5.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0200, Validation Loss: 0.0196\n","Epoch [32/50], Training Loss: 0.0195, Validation Loss: 0.0191\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:06<00:03,  5.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0190, Validation Loss: 0.0186\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:06<00:03,  4.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0185, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  70%|███████   | 35/50 [00:06<00:03,  4.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0180, Validation Loss: 0.0177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:07<00:03,  4.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0175, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:07<00:03,  4.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0171, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:07<00:02,  4.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0166, Validation Loss: 0.0163\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:07<00:02,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0162, Validation Loss: 0.0159\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  80%|████████  | 40/50 [00:08<00:02,  4.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0158, Validation Loss: 0.0155\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:08<00:02,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0154, Validation Loss: 0.0151\n","Epoch [42/50], Training Loss: 0.0150, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0147, Validation Loss: 0.0144\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:09<00:01,  4.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0143, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  90%|█████████ | 45/50 [00:09<00:01,  4.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0140, Validation Loss: 0.0137\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:09<00:00,  4.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0136, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  94%|█████████▍| 47/50 [00:09<00:00,  4.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0133, Validation Loss: 0.0131\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:10<00:00,  3.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0130, Validation Loss: 0.0128\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  98%|█████████▊| 49/50 [00:10<00:00,  4.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0127, Validation Loss: 0.0125\n","Epoch [50/50], Training Loss: 0.0124, Validation Loss: 0.0123\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:10<00:00,  4.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Best Model Parameters:\n","Learning Rate: 0.001\n","Hidden Layer Sizes: [16, 32, 64, 32, 16]\n","Optimizer: RMSprop\n","Best Validation Loss: 0.001745629939250648\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'RMSprop':\n","        optimizer = optim.RMSprop(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"2_SMALL_best_model_info_train_set_separated.pt\"))\n","\n","# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":398,"status":"ok","timestamp":1733152751914,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"NCGXouwvIGfe","outputId":"825cac0d-4bab-4457-84e3-6c53330d4bc1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plot Training and Validation Loss for the Best Model\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1278,"status":"ok","timestamp":1733533468701,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"cGeOn4GRIYOc","outputId":"de562355-62cc-47c4-f182-39b84a6f7755"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.04188415646057013\n","Test R^2 Score: 0.7913484573364258\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/2_SMALL_best_model_info_train_set_separated.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"rVWMY76FYXMu"},"source":["# 10K"]},{"cell_type":"markdown","metadata":{"id":"gs6EGZDuF0QO"},"source":["## Dataset"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":234,"status":"ok","timestamp":1733533478248,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"w1a69_qJctLD","outputId":"d9d34c37-fed7-4067-803f-037ebe026ca8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset Shape before: (100000, 4)\n","Dataset Shape after: (10000, 4)\n","Training set size: 6000\n","Validation set size: 2000\n","Test set size: 2000\n"]}],"source":["# Create a Reduced Dataset\n","df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2.csv\",sep=';')\n","df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","# Calculate the number of rows to keep (10% of the original dataset)\n","n_keep = int(len(df_filtered) * 0.1)\n","\n","# Randomly sample 10% of the rows\n","df_reduced_filtered = df_filtered.sample(n=n_keep, random_state=42)\n","\n","# Reset the index\n","df_reduced_filtered.reset_index(drop=True, inplace=True)\n","\n","print(f\"Dataset Shape before: {df_filtered.shape}\")\n","print(f\"Dataset Shape after: {df_reduced_filtered.shape}\")\n","\n","# Define features (X) and target (Y)\n","X = df_reduced_filtered[['j0', 'j1']]\n","y = df_reduced_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":1181,"status":"ok","timestamp":1733221923304,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"ef_VAoM-ebrb","outputId":"c0fd975c-da2d-48fc-d776-8b680578791c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.scatter(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')  # Mantieni proporzioni reali per x e y\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":1146,"status":"ok","timestamp":1732607961774,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"rRiEvGztezeT","outputId":"9e0a4e40-54e1-42e1-805a-b09f834ee880"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["heatmap, xedges, yedges = np.histogram2d(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], bins=50)\n","\n","# Visualizzazione della heatmap\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"]},{"cell_type":"code","execution_count":56,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":46558,"status":"ok","timestamp":1733403690856,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"5RepXybof8ga","outputId":"32b2a673-7048-41be-ad71-e2c72a9c9c8a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.09032278851584771, R2: 0.07540580398396973\n"," \n","--------------------------------------------------------------\n"," \n","Decision Tree RMSE: 0.006919474731408673, R2: 0.9945755163684518\n"," \n","--------------------------------------------------------------\n"," \n","SVR Best Params: {'estimator__C': 10, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 50}\n","SVR RMSE: 0.02130585636849095, R2: 0.9453800078924595\n"," \n","--------------------------------------------------------------\n"," \n","Random Forest Best Params: {'estimator__max_depth': 12, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.006686051075909381, R2: 0.9948322512878129\n"," \n","--------------------------------------------------------------\n"," \n","KNN Best Params: {'estimator__n_neighbors': 10, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.0029650642957182775, R2: 0.9990011191398983\n"," \n","--------------------------------------------------------------\n"," \n"]}],"source":["#-------------------------Linear Regression-------------------------\n","\n","# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)\n","\n","# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# ----------------------Decision tree regressor-------------------------\n","\n","# train\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [5, 10, 20]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)\n","\n","# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# -----------------------------SVR-----------------------------\n","\n","# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [50]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)\n","\n","\n","# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#---------------------------Random Forest--------------------------\n","\n","# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [5, 12]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)\n","\n","\n","#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#------------------------------------KNN---------------------------------------\n","\n","# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)\n","\n","#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"bCONCwZUEOuY","executionInfo":{"status":"ok","timestamp":1733533483889,"user_tz":-60,"elapsed":414,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"U2IXcG1YATH9","executionInfo":{"status":"ok","timestamp":1733533483889,"user_tz":-60,"elapsed":4,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 2  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M_Z-bWUMBSYU"},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001, 0.0001],\n","    'hidden_sizes': [[8, 8], [8, 16, 8], [8, 16, 32, 16, 8]],\n","    'optimizer': ['Adam', 'SGD', 'RMSprop']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 50\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42439,"status":"ok","timestamp":1733152912044,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"xrIgaO-TBY6o","outputId":"08cc0734-41ca-4471-d99e-6ac708c3ab5f"},"outputs":[{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0483, Validation Loss: 0.0298\n","Epoch [2/50], Training Loss: 0.0294, Validation Loss: 0.0206\n","Epoch [3/50], Training Loss: 0.0202, Validation Loss: 0.0186\n","Epoch [4/50], Training Loss: 0.0183, Validation Loss: 0.0186\n","Epoch [5/50], Training Loss: 0.0183, Validation Loss: 0.0176\n","Epoch [6/50], Training Loss: 0.0173, Validation Loss: 0.0154\n","Epoch [7/50], Training Loss: 0.0151, Validation Loss: 0.0127\n","Epoch [8/50], Training Loss: 0.0125, Validation Loss: 0.0104\n","Epoch [9/50], Training Loss: 0.0103, Validation Loss: 0.0091\n","Epoch [10/50], Training Loss: 0.0090, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=Adam:  18%|█▊        | 9/50 [00:00<00:00, 77.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0086, Validation Loss: 0.0089\n","Epoch [12/50], Training Loss: 0.0088, Validation Loss: 0.0092\n","Epoch [13/50], Training Loss: 0.0091, Validation Loss: 0.0092\n","Epoch [14/50], Training Loss: 0.0092, Validation Loss: 0.0090\n","Epoch [15/50], Training Loss: 0.0090, Validation Loss: 0.0085\n","Epoch [16/50], Training Loss: 0.0086, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=Adam:  50%|█████     | 25/50 [00:00<00:00, 73.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0081, Validation Loss: 0.0076\n","Epoch [18/50], Training Loss: 0.0077, Validation Loss: 0.0074\n","Epoch [19/50], Training Loss: 0.0075, Validation Loss: 0.0072\n","Epoch [20/50], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [21/50], Training Loss: 0.0072, Validation Loss: 0.0069\n","Epoch [22/50], Training Loss: 0.0070, Validation Loss: 0.0067\n","Epoch [23/50], Training Loss: 0.0067, Validation Loss: 0.0064\n","Epoch [24/50], Training Loss: 0.0064, Validation Loss: 0.0062\n","Epoch [25/50], Training Loss: 0.0061, Validation Loss: 0.0061\n","Epoch [26/50], Training Loss: 0.0060, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=Adam:  50%|█████     | 25/50 [00:00<00:00, 73.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0059, Validation Loss: 0.0061\n","Epoch [28/50], Training Loss: 0.0059, Validation Loss: 0.0060\n","Epoch [29/50], Training Loss: 0.0058, Validation Loss: 0.0059\n","Epoch [30/50], Training Loss: 0.0057, Validation Loss: 0.0057\n","Epoch [31/50], Training Loss: 0.0055, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0053, Validation Loss: 0.0053\n","Epoch [33/50], Training Loss: 0.0052, Validation Loss: 0.0052\n","Epoch [34/50], Training Loss: 0.0051, Validation Loss: 0.0052\n","Epoch [35/50], Training Loss: 0.0051, Validation Loss: 0.0052\n","Epoch [36/50], Training Loss: 0.0050, Validation Loss: 0.0051\n","Epoch [37/50], Training Loss: 0.0050, Validation Loss: 0.0050\n","Epoch [38/50], Training Loss: 0.0049, Validation Loss: 0.0049\n","Epoch [39/50], Training Loss: 0.0048, Validation Loss: 0.0047\n","Epoch [40/50], Training Loss: 0.0046, Validation Loss: 0.0046\n","Epoch [41/50], Training Loss: 0.0045, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0044, Validation Loss: 0.0045\n","Epoch [43/50], Training Loss: 0.0043, Validation Loss: 0.0044\n","Epoch [44/50], Training Loss: 0.0043, Validation Loss: 0.0044\n","Epoch [45/50], Training Loss: 0.0042, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 71.62it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0042, Validation Loss: 0.0042\n","Epoch [47/50], Training Loss: 0.0041, Validation Loss: 0.0041\n","Epoch [48/50], Training Loss: 0.0040, Validation Loss: 0.0040\n","Epoch [49/50], Training Loss: 0.0039, Validation Loss: 0.0040\n","Epoch [50/50], Training Loss: 0.0039, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.2085, Validation Loss: 0.1899\n","Epoch [2/50], Training Loss: 0.1940, Validation Loss: 0.1770\n","Epoch [3/50], Training Loss: 0.1808, Validation Loss: 0.1652\n","Epoch [4/50], Training Loss: 0.1688, Validation Loss: 0.1544\n","Epoch [5/50], Training Loss: 0.1577, Validation Loss: 0.1445\n","Epoch [6/50], Training Loss: 0.1476, Validation Loss: 0.1354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 85.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.1383, Validation Loss: 0.1271\n","Epoch [8/50], Training Loss: 0.1298, Validation Loss: 0.1194\n","Epoch [9/50], Training Loss: 0.1219, Validation Loss: 0.1123\n","Epoch [10/50], Training Loss: 0.1147, Validation Loss: 0.1058\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 85.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.1080, Validation Loss: 0.0998\n","Epoch [12/50], Training Loss: 0.1019, Validation Loss: 0.0943\n","Epoch [13/50], Training Loss: 0.0962, Validation Loss: 0.0891\n","Epoch [14/50], Training Loss: 0.0909, Validation Loss: 0.0844\n","Epoch [15/50], Training Loss: 0.0861, Validation Loss: 0.0800\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 85.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0816, Validation Loss: 0.0760\n","Epoch [17/50], Training Loss: 0.0774, Validation Loss: 0.0722\n","Epoch [18/50], Training Loss: 0.0736, Validation Loss: 0.0687\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0700, Validation Loss: 0.0655\n","Epoch [20/50], Training Loss: 0.0667, Validation Loss: 0.0625\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0636, Validation Loss: 0.0597\n","Epoch [22/50], Training Loss: 0.0608, Validation Loss: 0.0572\n","Epoch [23/50], Training Loss: 0.0581, Validation Loss: 0.0548\n","Epoch [24/50], Training Loss: 0.0557, Validation Loss: 0.0525\n","Epoch [25/50], Training Loss: 0.0534, Validation Loss: 0.0505\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 59.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0512, Validation Loss: 0.0485\n","Epoch [27/50], Training Loss: 0.0493, Validation Loss: 0.0467\n","Epoch [28/50], Training Loss: 0.0474, Validation Loss: 0.0450\n","Epoch [29/50], Training Loss: 0.0457, Validation Loss: 0.0435\n","Epoch [30/50], Training Loss: 0.0441, Validation Loss: 0.0420\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 58.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0426, Validation Loss: 0.0407\n","Epoch [32/50], Training Loss: 0.0412, Validation Loss: 0.0394\n","Epoch [33/50], Training Loss: 0.0399, Validation Loss: 0.0382\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 58.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0387, Validation Loss: 0.0371\n","Epoch [35/50], Training Loss: 0.0375, Validation Loss: 0.0361\n","Epoch [36/50], Training Loss: 0.0365, Validation Loss: 0.0351\n","Epoch [37/50], Training Loss: 0.0355, Validation Loss: 0.0342\n","Epoch [38/50], Training Loss: 0.0346, Validation Loss: 0.0333\n","Epoch [39/50], Training Loss: 0.0337, Validation Loss: 0.0325\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0329, Validation Loss: 0.0318\n","Epoch [41/50], Training Loss: 0.0321, Validation Loss: 0.0311\n","Epoch [42/50], Training Loss: 0.0314, Validation Loss: 0.0305\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0307, Validation Loss: 0.0298\n","Epoch [44/50], Training Loss: 0.0301, Validation Loss: 0.0293\n","Epoch [45/50], Training Loss: 0.0295, Validation Loss: 0.0287\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 60.79it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0290, Validation Loss: 0.0282\n","Epoch [47/50], Training Loss: 0.0284, Validation Loss: 0.0277\n","Epoch [48/50], Training Loss: 0.0279, Validation Loss: 0.0273\n","Epoch [49/50], Training Loss: 0.0275, Validation Loss: 0.0269\n","Epoch [50/50], Training Loss: 0.0270, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0517, Validation Loss: 0.0417\n","Epoch [2/50], Training Loss: 0.0414, Validation Loss: 0.0486\n","Epoch [3/50], Training Loss: 0.0485, Validation Loss: 0.0254\n","Epoch [4/50], Training Loss: 0.0255, Validation Loss: 0.0081\n","Epoch [5/50], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [6/50], Training Loss: 0.0074, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 68.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0072, Validation Loss: 0.0072\n","Epoch [8/50], Training Loss: 0.0070, Validation Loss: 0.0071\n","Epoch [9/50], Training Loss: 0.0069, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 68.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0068, Validation Loss: 0.0069\n","Epoch [11/50], Training Loss: 0.0067, Validation Loss: 0.0068\n","Epoch [12/50], Training Loss: 0.0066, Validation Loss: 0.0067\n","Epoch [13/50], Training Loss: 0.0065, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 61.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0064, Validation Loss: 0.0065\n","Epoch [15/50], Training Loss: 0.0063, Validation Loss: 0.0064\n","Epoch [16/50], Training Loss: 0.0062, Validation Loss: 0.0063\n","Epoch [17/50], Training Loss: 0.0061, Validation Loss: 0.0062\n","Epoch [18/50], Training Loss: 0.0060, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 61.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0059, Validation Loss: 0.0060\n","Epoch [20/50], Training Loss: 0.0059, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:00, 58.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0058, Validation Loss: 0.0059\n","Epoch [22/50], Training Loss: 0.0057, Validation Loss: 0.0058\n","Epoch [23/50], Training Loss: 0.0056, Validation Loss: 0.0058\n","Epoch [24/50], Training Loss: 0.0056, Validation Loss: 0.0057\n","Epoch [25/50], Training Loss: 0.0055, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:00<00:00, 58.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0055, Validation Loss: 0.0056\n","Epoch [27/50], Training Loss: 0.0054, Validation Loss: 0.0055\n","Epoch [28/50], Training Loss: 0.0053, Validation Loss: 0.0055\n","Epoch [29/50], Training Loss: 0.0053, Validation Loss: 0.0054\n","Epoch [30/50], Training Loss: 0.0052, Validation Loss: 0.0054\n","Epoch [31/50], Training Loss: 0.0052, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:00<00:00, 58.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0052, Validation Loss: 0.0053\n","Epoch [33/50], Training Loss: 0.0051, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:00<00:00, 59.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0051, Validation Loss: 0.0052\n","Epoch [35/50], Training Loss: 0.0050, Validation Loss: 0.0052\n","Epoch [36/50], Training Loss: 0.0050, Validation Loss: 0.0051\n","Epoch [37/50], Training Loss: 0.0049, Validation Loss: 0.0051\n","Epoch [38/50], Training Loss: 0.0049, Validation Loss: 0.0050\n","Epoch [39/50], Training Loss: 0.0049, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 64.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0048, Validation Loss: 0.0049\n","Epoch [41/50], Training Loss: 0.0048, Validation Loss: 0.0049\n","Epoch [42/50], Training Loss: 0.0047, Validation Loss: 0.0049\n","Epoch [43/50], Training Loss: 0.0047, Validation Loss: 0.0048\n","Epoch [44/50], Training Loss: 0.0047, Validation Loss: 0.0048\n","Epoch [45/50], Training Loss: 0.0046, Validation Loss: 0.0047\n","Epoch [46/50], Training Loss: 0.0046, Validation Loss: 0.0047\n","Epoch [47/50], Training Loss: 0.0045, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 65.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0045, Validation Loss: 0.0046\n","Epoch [49/50], Training Loss: 0.0045, Validation Loss: 0.0046\n","Epoch [50/50], Training Loss: 0.0044, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["\n","Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.2149, Validation Loss: 0.2025\n","Epoch [2/50], Training Loss: 0.2092, Validation Loss: 0.1971\n","Epoch [3/50], Training Loss: 0.2036, Validation Loss: 0.1919\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  10%|█         | 5/50 [00:00<00:00, 49.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.1981, Validation Loss: 0.1867\n","Epoch [5/50], Training Loss: 0.1927, Validation Loss: 0.1817\n","Epoch [6/50], Training Loss: 0.1875, Validation Loss: 0.1768\n","Epoch [7/50], Training Loss: 0.1823, Validation Loss: 0.1720\n","Epoch [8/50], Training Loss: 0.1773, Validation Loss: 0.1673\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  22%|██▏       | 11/50 [00:00<00:00, 52.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.1724, Validation Loss: 0.1627\n","Epoch [10/50], Training Loss: 0.1677, Validation Loss: 0.1582\n","Epoch [11/50], Training Loss: 0.1630, Validation Loss: 0.1539\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  22%|██▏       | 11/50 [00:00<00:00, 52.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.1585, Validation Loss: 0.1497\n","Epoch [13/50], Training Loss: 0.1541, Validation Loss: 0.1456\n","Epoch [14/50], Training Loss: 0.1498, Validation Loss: 0.1416\n","Epoch [15/50], Training Loss: 0.1456, Validation Loss: 0.1377\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.1415, Validation Loss: 0.1339\n","Epoch [17/50], Training Loss: 0.1376, Validation Loss: 0.1302\n","Epoch [18/50], Training Loss: 0.1337, Validation Loss: 0.1266\n","Epoch [19/50], Training Loss: 0.1300, Validation Loss: 0.1232\n","Epoch [20/50], Training Loss: 0.1264, Validation Loss: 0.1198\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 56.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.1229, Validation Loss: 0.1165\n","Epoch [22/50], Training Loss: 0.1195, Validation Loss: 0.1133\n","Epoch [23/50], Training Loss: 0.1161, Validation Loss: 0.1102\n","Epoch [24/50], Training Loss: 0.1129, Validation Loss: 0.1073\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.1098, Validation Loss: 0.1043\n","Epoch [26/50], Training Loss: 0.1068, Validation Loss: 0.1015\n","Epoch [27/50], Training Loss: 0.1038, Validation Loss: 0.0988\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:00<00:00, 57.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.1010, Validation Loss: 0.0961\n","Epoch [29/50], Training Loss: 0.0982, Validation Loss: 0.0935\n","Epoch [30/50], Training Loss: 0.0955, Validation Loss: 0.0910\n","Epoch [31/50], Training Loss: 0.0929, Validation Loss: 0.0886\n","Epoch [32/50], Training Loss: 0.0904, Validation Loss: 0.0863\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  62%|██████▏   | 31/50 [00:00<00:00, 57.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0880, Validation Loss: 0.0840\n","Epoch [34/50], Training Loss: 0.0856, Validation Loss: 0.0817\n","Epoch [35/50], Training Loss: 0.0833, Validation Loss: 0.0796\n","Epoch [36/50], Training Loss: 0.0810, Validation Loss: 0.0775\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:00<00:00, 57.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0789, Validation Loss: 0.0755\n","Epoch [38/50], Training Loss: 0.0768, Validation Loss: 0.0735\n","Epoch [39/50], Training Loss: 0.0747, Validation Loss: 0.0716\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  86%|████████▌ | 43/50 [00:00<00:00, 56.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0727, Validation Loss: 0.0697\n","Epoch [41/50], Training Loss: 0.0708, Validation Loss: 0.0679\n","Epoch [42/50], Training Loss: 0.0689, Validation Loss: 0.0661\n","Epoch [43/50], Training Loss: 0.0671, Validation Loss: 0.0644\n","Epoch [44/50], Training Loss: 0.0653, Validation Loss: 0.0627\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam:  86%|████████▌ | 43/50 [00:00<00:00, 56.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0636, Validation Loss: 0.0610\n","Epoch [46/50], Training Loss: 0.0619, Validation Loss: 0.0594\n","Epoch [47/50], Training Loss: 0.0602, Validation Loss: 0.0579\n","Epoch [48/50], Training Loss: 0.0586, Validation Loss: 0.0563\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 56.28it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0570, Validation Loss: 0.0548\n","Epoch [50/50], Training Loss: 0.0555, Validation Loss: 0.0533\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1134, Validation Loss: 0.1055\n","Epoch [2/50], Training Loss: 0.1128, Validation Loss: 0.1049\n","Epoch [3/50], Training Loss: 0.1122, Validation Loss: 0.1044\n","Epoch [4/50], Training Loss: 0.1117, Validation Loss: 0.1039\n","Epoch [5/50], Training Loss: 0.1111, Validation Loss: 0.1033\n","Epoch [6/50], Training Loss: 0.1105, Validation Loss: 0.1028\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.1100, Validation Loss: 0.1023\n","Epoch [8/50], Training Loss: 0.1094, Validation Loss: 0.1018\n","Epoch [9/50], Training Loss: 0.1089, Validation Loss: 0.1013\n","Epoch [10/50], Training Loss: 0.1083, Validation Loss: 0.1008\n","Epoch [11/50], Training Loss: 0.1078, Validation Loss: 0.1002\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:00, 75.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.1072, Validation Loss: 0.0997\n","Epoch [13/50], Training Loss: 0.1067, Validation Loss: 0.0992\n","Epoch [14/50], Training Loss: 0.1062, Validation Loss: 0.0988\n","Epoch [15/50], Training Loss: 0.1056, Validation Loss: 0.0983\n","Epoch [16/50], Training Loss: 0.1051, Validation Loss: 0.0978\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:00, 75.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.1046, Validation Loss: 0.0973\n","Epoch [18/50], Training Loss: 0.1041, Validation Loss: 0.0968\n","Epoch [19/50], Training Loss: 0.1036, Validation Loss: 0.0964\n","Epoch [20/50], Training Loss: 0.1031, Validation Loss: 0.0959\n","Epoch [21/50], Training Loss: 0.1026, Validation Loss: 0.0954\n","Epoch [22/50], Training Loss: 0.1021, Validation Loss: 0.0950\n","Epoch [23/50], Training Loss: 0.1016, Validation Loss: 0.0945\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 75.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.1011, Validation Loss: 0.0940\n","Epoch [25/50], Training Loss: 0.1006, Validation Loss: 0.0936\n","Epoch [26/50], Training Loss: 0.1001, Validation Loss: 0.0931\n","Epoch [27/50], Training Loss: 0.0996, Validation Loss: 0.0927\n","Epoch [28/50], Training Loss: 0.0991, Validation Loss: 0.0922\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 75.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0987, Validation Loss: 0.0918\n","Epoch [30/50], Training Loss: 0.0982, Validation Loss: 0.0914\n","Epoch [31/50], Training Loss: 0.0977, Validation Loss: 0.0909\n","Epoch [32/50], Training Loss: 0.0973, Validation Loss: 0.0905\n","Epoch [33/50], Training Loss: 0.0968, Validation Loss: 0.0901\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 81.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0963, Validation Loss: 0.0897\n","Epoch [35/50], Training Loss: 0.0959, Validation Loss: 0.0892\n","Epoch [36/50], Training Loss: 0.0954, Validation Loss: 0.0888\n","Epoch [37/50], Training Loss: 0.0950, Validation Loss: 0.0884\n","Epoch [38/50], Training Loss: 0.0946, Validation Loss: 0.0880\n","Epoch [39/50], Training Loss: 0.0941, Validation Loss: 0.0876\n","Epoch [40/50], Training Loss: 0.0937, Validation Loss: 0.0872\n","Epoch [41/50], Training Loss: 0.0933, Validation Loss: 0.0868\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 81.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0928, Validation Loss: 0.0864\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD:  88%|████████▊ | 44/50 [00:00<00:00, 64.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0924, Validation Loss: 0.0860\n","Epoch [44/50], Training Loss: 0.0920, Validation Loss: 0.0856\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 67.30it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0915, Validation Loss: 0.0852\n","Epoch [46/50], Training Loss: 0.0911, Validation Loss: 0.0848\n","Epoch [47/50], Training Loss: 0.0907, Validation Loss: 0.0845\n","Epoch [48/50], Training Loss: 0.0903, Validation Loss: 0.0841\n","Epoch [49/50], Training Loss: 0.0899, Validation Loss: 0.0837\n","Epoch [50/50], Training Loss: 0.0895, Validation Loss: 0.0833\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1703, Validation Loss: 0.1084\n","Epoch [2/50], Training Loss: 0.1139, Validation Loss: 0.0837\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0879, Validation Loss: 0.0683\n","Epoch [4/50], Training Loss: 0.0715, Validation Loss: 0.0576\n","Epoch [5/50], Training Loss: 0.0602, Validation Loss: 0.0498\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 52.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0519, Validation Loss: 0.0438\n","Epoch [7/50], Training Loss: 0.0457, Validation Loss: 0.0392\n","Epoch [8/50], Training Loss: 0.0408, Validation Loss: 0.0355\n","Epoch [9/50], Training Loss: 0.0369, Validation Loss: 0.0326\n","Epoch [10/50], Training Loss: 0.0338, Validation Loss: 0.0301\n","Epoch [11/50], Training Loss: 0.0312, Validation Loss: 0.0280\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 50.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0290, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 50.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0272, Validation Loss: 0.0248\n","Epoch [14/50], Training Loss: 0.0256, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0243, Validation Loss: 0.0224\n","Epoch [16/50], Training Loss: 0.0231, Validation Loss: 0.0214\n","Epoch [17/50], Training Loss: 0.0221, Validation Loss: 0.0206\n","Epoch [18/50], Training Loss: 0.0212, Validation Loss: 0.0197\n","Epoch [19/50], Training Loss: 0.0203, Validation Loss: 0.0190\n","Epoch [20/50], Training Loss: 0.0196, Validation Loss: 0.0183\n","Epoch [21/50], Training Loss: 0.0189, Validation Loss: 0.0177\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:00, 44.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0182, Validation Loss: 0.0172\n","Epoch [23/50], Training Loss: 0.0176, Validation Loss: 0.0166\n","Epoch [24/50], Training Loss: 0.0171, Validation Loss: 0.0161\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 52.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0165, Validation Loss: 0.0156\n","Epoch [26/50], Training Loss: 0.0160, Validation Loss: 0.0152\n","Epoch [27/50], Training Loss: 0.0155, Validation Loss: 0.0147\n","Epoch [28/50], Training Loss: 0.0151, Validation Loss: 0.0143\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0147, Validation Loss: 0.0139\n","Epoch [30/50], Training Loss: 0.0142, Validation Loss: 0.0135\n","Epoch [31/50], Training Loss: 0.0138, Validation Loss: 0.0131\n","Epoch [32/50], Training Loss: 0.0134, Validation Loss: 0.0128\n","Epoch [33/50], Training Loss: 0.0130, Validation Loss: 0.0124\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 55.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0126, Validation Loss: 0.0120\n","Epoch [35/50], Training Loss: 0.0122, Validation Loss: 0.0116\n","Epoch [36/50], Training Loss: 0.0118, Validation Loss: 0.0112\n","Epoch [37/50], Training Loss: 0.0114, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:00<00:00, 59.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0111, Validation Loss: 0.0106\n","Epoch [39/50], Training Loss: 0.0107, Validation Loss: 0.0104\n","Epoch [40/50], Training Loss: 0.0105, Validation Loss: 0.0101\n","Epoch [41/50], Training Loss: 0.0102, Validation Loss: 0.0099\n","Epoch [42/50], Training Loss: 0.0100, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0098, Validation Loss: 0.0095\n","Epoch [44/50], Training Loss: 0.0096, Validation Loss: 0.0094\n","Epoch [45/50], Training Loss: 0.0094, Validation Loss: 0.0092\n","Epoch [46/50], Training Loss: 0.0093, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 56.02it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0091, Validation Loss: 0.0089\n","Epoch [48/50], Training Loss: 0.0090, Validation Loss: 0.0088\n","Epoch [49/50], Training Loss: 0.0089, Validation Loss: 0.0087\n","Epoch [50/50], Training Loss: 0.0087, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0375, Validation Loss: 0.0374\n","Epoch [2/50], Training Loss: 0.0374, Validation Loss: 0.0373\n","Epoch [3/50], Training Loss: 0.0373, Validation Loss: 0.0372\n","Epoch [4/50], Training Loss: 0.0372, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0371, Validation Loss: 0.0370\n","Epoch [6/50], Training Loss: 0.0370, Validation Loss: 0.0369\n","Epoch [7/50], Training Loss: 0.0369, Validation Loss: 0.0369\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 56.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0368, Validation Loss: 0.0368\n","Epoch [9/50], Training Loss: 0.0368, Validation Loss: 0.0367\n","Epoch [10/50], Training Loss: 0.0367, Validation Loss: 0.0366\n","Epoch [11/50], Training Loss: 0.0366, Validation Loss: 0.0365\n","Epoch [12/50], Training Loss: 0.0365, Validation Loss: 0.0364\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0364, Validation Loss: 0.0363\n","Epoch [14/50], Training Loss: 0.0363, Validation Loss: 0.0362\n","Epoch [15/50], Training Loss: 0.0362, Validation Loss: 0.0361\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 55.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0362, Validation Loss: 0.0360\n","Epoch [17/50], Training Loss: 0.0361, Validation Loss: 0.0360\n","Epoch [18/50], Training Loss: 0.0360, Validation Loss: 0.0359\n","Epoch [19/50], Training Loss: 0.0359, Validation Loss: 0.0358\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 57.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0358, Validation Loss: 0.0357\n","Epoch [21/50], Training Loss: 0.0357, Validation Loss: 0.0356\n","Epoch [22/50], Training Loss: 0.0356, Validation Loss: 0.0355\n","Epoch [23/50], Training Loss: 0.0356, Validation Loss: 0.0354\n","Epoch [24/50], Training Loss: 0.0355, Validation Loss: 0.0354\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 57.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0354, Validation Loss: 0.0353\n","Epoch [26/50], Training Loss: 0.0353, Validation Loss: 0.0352\n","Epoch [27/50], Training Loss: 0.0352, Validation Loss: 0.0351\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 53.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0352, Validation Loss: 0.0350\n","Epoch [29/50], Training Loss: 0.0351, Validation Loss: 0.0349\n","Epoch [30/50], Training Loss: 0.0350, Validation Loss: 0.0349\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 53.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0349, Validation Loss: 0.0348\n","Epoch [32/50], Training Loss: 0.0348, Validation Loss: 0.0347\n","Epoch [33/50], Training Loss: 0.0348, Validation Loss: 0.0346\n","Epoch [34/50], Training Loss: 0.0347, Validation Loss: 0.0345\n","Epoch [35/50], Training Loss: 0.0346, Validation Loss: 0.0345\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 53.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0345, Validation Loss: 0.0344\n","Epoch [37/50], Training Loss: 0.0344, Validation Loss: 0.0343\n","Epoch [38/50], Training Loss: 0.0344, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 53.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0343, Validation Loss: 0.0341\n","Epoch [40/50], Training Loss: 0.0342, Validation Loss: 0.0341\n","Epoch [41/50], Training Loss: 0.0341, Validation Loss: 0.0340\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 52.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0341, Validation Loss: 0.0339\n","Epoch [43/50], Training Loss: 0.0340, Validation Loss: 0.0338\n","Epoch [44/50], Training Loss: 0.0339, Validation Loss: 0.0338\n","Epoch [45/50], Training Loss: 0.0338, Validation Loss: 0.0337\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:00<00:00, 50.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0338, Validation Loss: 0.0336\n","Epoch [47/50], Training Loss: 0.0337, Validation Loss: 0.0335\n","Epoch [48/50], Training Loss: 0.0336, Validation Loss: 0.0334\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 52.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0335, Validation Loss: 0.0334\n","Epoch [50/50], Training Loss: 0.0335, Validation Loss: 0.0333\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1398, Validation Loss: 0.1361\n","Epoch [2/50], Training Loss: 0.1397, Validation Loss: 0.1360\n","Epoch [3/50], Training Loss: 0.1397, Validation Loss: 0.1360\n","Epoch [4/50], Training Loss: 0.1396, Validation Loss: 0.1359\n","Epoch [5/50], Training Loss: 0.1396, Validation Loss: 0.1359\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 55.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.1395, Validation Loss: 0.1358\n","Epoch [7/50], Training Loss: 0.1395, Validation Loss: 0.1358\n","Epoch [8/50], Training Loss: 0.1394, Validation Loss: 0.1357\n","Epoch [9/50], Training Loss: 0.1394, Validation Loss: 0.1357\n","Epoch [10/50], Training Loss: 0.1393, Validation Loss: 0.1356\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 57.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.1393, Validation Loss: 0.1356\n","Epoch [12/50], Training Loss: 0.1392, Validation Loss: 0.1355\n","Epoch [13/50], Training Loss: 0.1392, Validation Loss: 0.1355\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 57.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.1391, Validation Loss: 0.1354\n","Epoch [15/50], Training Loss: 0.1391, Validation Loss: 0.1354\n","Epoch [16/50], Training Loss: 0.1390, Validation Loss: 0.1353\n","Epoch [17/50], Training Loss: 0.1390, Validation Loss: 0.1353\n","Epoch [18/50], Training Loss: 0.1389, Validation Loss: 0.1353\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.1388, Validation Loss: 0.1352\n","Epoch [20/50], Training Loss: 0.1388, Validation Loss: 0.1352\n","Epoch [21/50], Training Loss: 0.1387, Validation Loss: 0.1351\n","Epoch [22/50], Training Loss: 0.1387, Validation Loss: 0.1351\n","Epoch [23/50], Training Loss: 0.1386, Validation Loss: 0.1350\n","Epoch [24/50], Training Loss: 0.1386, Validation Loss: 0.1350"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 61.93it/s]"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch [25/50], Training Loss: 0.1385, Validation Loss: 0.1349\n","Epoch [26/50], Training Loss: 0.1385, Validation Loss: 0.1349\n","Epoch [27/50], Training Loss: 0.1384, Validation Loss: 0.1348\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.1384, Validation Loss: 0.1348\n","Epoch [29/50], Training Loss: 0.1383, Validation Loss: 0.1347\n","Epoch [30/50], Training Loss: 0.1383, Validation Loss: 0.1347\n","Epoch [31/50], Training Loss: 0.1382, Validation Loss: 0.1346\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 61.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.1382, Validation Loss: 0.1346\n","Epoch [33/50], Training Loss: 0.1381, Validation Loss: 0.1345\n","Epoch [34/50], Training Loss: 0.1381, Validation Loss: 0.1345\n","Epoch [35/50], Training Loss: 0.1380, Validation Loss: 0.1344\n","Epoch [36/50], Training Loss: 0.1380, Validation Loss: 0.1344\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.1379, Validation Loss: 0.1343\n","Epoch [38/50], Training Loss: 0.1379, Validation Loss: 0.1343\n","Epoch [39/50], Training Loss: 0.1378, Validation Loss: 0.1342\n","Epoch [40/50], Training Loss: 0.1378, Validation Loss: 0.1342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 63.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.1377, Validation Loss: 0.1341\n","Epoch [42/50], Training Loss: 0.1377, Validation Loss: 0.1341\n","Epoch [43/50], Training Loss: 0.1376, Validation Loss: 0.1340\n","Epoch [44/50], Training Loss: 0.1376, Validation Loss: 0.1340\n","Epoch [45/50], Training Loss: 0.1375, Validation Loss: 0.1339\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 62.55it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.1375, Validation Loss: 0.1339\n","Epoch [47/50], Training Loss: 0.1374, Validation Loss: 0.1338\n","Epoch [48/50], Training Loss: 0.1374, Validation Loss: 0.1338\n","Epoch [49/50], Training Loss: 0.1373, Validation Loss: 0.1337\n","Epoch [50/50], Training Loss: 0.1373, Validation Loss: 0.1337\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0393, Validation Loss: 0.0372\n","Epoch [2/50], Training Loss: 0.0373, Validation Loss: 0.0358\n","Epoch [3/50], Training Loss: 0.0359, Validation Loss: 0.0348\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 64.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0349, Validation Loss: 0.0339\n","Epoch [5/50], Training Loss: 0.0340, Validation Loss: 0.0331\n","Epoch [6/50], Training Loss: 0.0332, Validation Loss: 0.0324\n","Epoch [7/50], Training Loss: 0.0325, Validation Loss: 0.0318\n","Epoch [8/50], Training Loss: 0.0319, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 63.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0313, Validation Loss: 0.0307\n","Epoch [10/50], Training Loss: 0.0308, Validation Loss: 0.0302\n","Epoch [11/50], Training Loss: 0.0303, Validation Loss: 0.0298\n","Epoch [12/50], Training Loss: 0.0299, Validation Loss: 0.0293\n","Epoch [13/50], Training Loss: 0.0294, Validation Loss: 0.0289\n","Epoch [14/50], Training Loss: 0.0290, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0286, Validation Loss: 0.0282\n","Epoch [16/50], Training Loss: 0.0283, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0279, Validation Loss: 0.0275\n","Epoch [18/50], Training Loss: 0.0276, Validation Loss: 0.0272\n","Epoch [19/50], Training Loss: 0.0272, Validation Loss: 0.0269\n","Epoch [20/50], Training Loss: 0.0269, Validation Loss: 0.0266\n","Epoch [21/50], Training Loss: 0.0266, Validation Loss: 0.0263\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:00, 64.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0263, Validation Loss: 0.0260\n","Epoch [23/50], Training Loss: 0.0261, Validation Loss: 0.0257\n","Epoch [24/50], Training Loss: 0.0258, Validation Loss: 0.0255\n","Epoch [25/50], Training Loss: 0.0255, Validation Loss: 0.0252\n","Epoch [26/50], Training Loss: 0.0253, Validation Loss: 0.0250\n","Epoch [27/50], Training Loss: 0.0250, Validation Loss: 0.0247\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 62.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0248, Validation Loss: 0.0245\n","Epoch [29/50], Training Loss: 0.0246, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0243, Validation Loss: 0.0241\n","Epoch [31/50], Training Loss: 0.0241, Validation Loss: 0.0239\n","Epoch [32/50], Training Loss: 0.0239, Validation Loss: 0.0236\n","Epoch [33/50], Training Loss: 0.0237, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 58.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0235, Validation Loss: 0.0232\n","Epoch [35/50], Training Loss: 0.0233, Validation Loss: 0.0231\n","Epoch [36/50], Training Loss: 0.0231, Validation Loss: 0.0229\n","Epoch [37/50], Training Loss: 0.0229, Validation Loss: 0.0227\n","Epoch [38/50], Training Loss: 0.0227, Validation Loss: 0.0225\n","Epoch [39/50], Training Loss: 0.0225, Validation Loss: 0.0223\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 58.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0224, Validation Loss: 0.0222\n","Epoch [41/50], Training Loss: 0.0222, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 59.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0220, Validation Loss: 0.0218\n","Epoch [43/50], Training Loss: 0.0218, Validation Loss: 0.0217\n","Epoch [44/50], Training Loss: 0.0217, Validation Loss: 0.0215\n","Epoch [45/50], Training Loss: 0.0215, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 60.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0214, Validation Loss: 0.0212\n","Epoch [47/50], Training Loss: 0.0212, Validation Loss: 0.0210\n","Epoch [48/50], Training Loss: 0.0211, Validation Loss: 0.0209\n","Epoch [49/50], Training Loss: 0.0209, Validation Loss: 0.0207\n","Epoch [50/50], Training Loss: 0.0208, Validation Loss: 0.0206\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0235, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0139, Validation Loss: 0.0098\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 52.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0097, Validation Loss: 0.0085\n","Epoch [4/50], Training Loss: 0.0084, Validation Loss: 0.0081\n","Epoch [5/50], Training Loss: 0.0079, Validation Loss: 0.0077\n","Epoch [6/50], Training Loss: 0.0076, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 52.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0072, Validation Loss: 0.0069\n","Epoch [8/50], Training Loss: 0.0067, Validation Loss: 0.0064\n","Epoch [9/50], Training Loss: 0.0062, Validation Loss: 0.0061\n","Epoch [10/50], Training Loss: 0.0059, Validation Loss: 0.0058\n","Epoch [11/50], Training Loss: 0.0057, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 53.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0055, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 53.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0053, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 53.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0053, Validation Loss: 0.0053\n","Epoch [15/50], Training Loss: 0.0051, Validation Loss: 0.0051\n","Epoch [16/50], Training Loss: 0.0049, Validation Loss: 0.0049\n","Epoch [17/50], Training Loss: 0.0048, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 51.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0046, Validation Loss: 0.0045\n","Epoch [19/50], Training Loss: 0.0044, Validation Loss: 0.0044\n","Epoch [20/50], Training Loss: 0.0043, Validation Loss: 0.0042\n","Epoch [21/50], Training Loss: 0.0042, Validation Loss: 0.0041\n","Epoch [22/50], Training Loss: 0.0040, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 51.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0038, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 50.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0036, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 50.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0035, Validation Loss: 0.0035\n","Epoch [26/50], Training Loss: 0.0034, Validation Loss: 0.0034\n","Epoch [27/50], Training Loss: 0.0033, Validation Loss: 0.0033\n","Epoch [28/50], Training Loss: 0.0032, Validation Loss: 0.0032\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 51.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0032, Validation Loss: 0.0031\n","Epoch [30/50], Training Loss: 0.0031, Validation Loss: 0.0030\n","Epoch [31/50], Training Loss: 0.0030, Validation Loss: 0.0029\n","Epoch [32/50], Training Loss: 0.0029, Validation Loss: 0.0028\n","Epoch [33/50], Training Loss: 0.0028, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 51.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0027, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0026, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 51.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0025, Validation Loss: 0.0023\n","Epoch [37/50], Training Loss: 0.0023, Validation Loss: 0.0023\n","Epoch [38/50], Training Loss: 0.0023, Validation Loss: 0.0022\n","Epoch [39/50], Training Loss: 0.0022, Validation Loss: 0.0020\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0020, Validation Loss: 0.0019\n","Epoch [41/50], Training Loss: 0.0019, Validation Loss: 0.0019\n","Epoch [42/50], Training Loss: 0.0019, Validation Loss: 0.0017\n","Epoch [43/50], Training Loss: 0.0017, Validation Loss: 0.0017\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0017, Validation Loss: 0.0016\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:00<00:00, 47.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0016, Validation Loss: 0.0015\n","Epoch [46/50], Training Loss: 0.0015, Validation Loss: 0.0014\n","Epoch [47/50], Training Loss: 0.0014, Validation Loss: 0.0013\n","Epoch [48/50], Training Loss: 0.0013, Validation Loss: 0.0013\n","Epoch [49/50], Training Loss: 0.0012, Validation Loss: 0.0012\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 49.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0012, Validation Loss: 0.0011\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0688, Validation Loss: 0.0671\n","Epoch [2/50], Training Loss: 0.0672, Validation Loss: 0.0656\n","Epoch [3/50], Training Loss: 0.0657, Validation Loss: 0.0641\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0642, Validation Loss: 0.0627\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 58.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0627, Validation Loss: 0.0613\n","Epoch [6/50], Training Loss: 0.0613, Validation Loss: 0.0600\n","Epoch [7/50], Training Loss: 0.0599, Validation Loss: 0.0586\n","Epoch [8/50], Training Loss: 0.0586, Validation Loss: 0.0574\n","Epoch [9/50], Training Loss: 0.0573, Validation Loss: 0.0561\n","Epoch [10/50], Training Loss: 0.0561, Validation Loss: 0.0549\n","Epoch [11/50], Training Loss: 0.0549, Validation Loss: 0.0538\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 57.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0537, Validation Loss: 0.0526\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 57.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0525, Validation Loss: 0.0515\n","Epoch [14/50], Training Loss: 0.0514, Validation Loss: 0.0505\n","Epoch [15/50], Training Loss: 0.0504, Validation Loss: 0.0494\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 57.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0493, Validation Loss: 0.0484\n","Epoch [17/50], Training Loss: 0.0483, Validation Loss: 0.0475\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 57.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0473, Validation Loss: 0.0465\n","Epoch [19/50], Training Loss: 0.0463, Validation Loss: 0.0456\n","Epoch [20/50], Training Loss: 0.0454, Validation Loss: 0.0447\n","Epoch [21/50], Training Loss: 0.0445, Validation Loss: 0.0438\n","Epoch [22/50], Training Loss: 0.0436, Validation Loss: 0.0430\n","Epoch [23/50], Training Loss: 0.0428, Validation Loss: 0.0421\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 58.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0419, Validation Loss: 0.0413\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [26/50], Training Loss: 0.0403, Validation Loss: 0.0398\n","Epoch [27/50], Training Loss: 0.0396, Validation Loss: 0.0391\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 58.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0388, Validation Loss: 0.0383\n","Epoch [29/50], Training Loss: 0.0381, Validation Loss: 0.0376\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:00<00:00, 57.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0374, Validation Loss: 0.0370\n","Epoch [31/50], Training Loss: 0.0367, Validation Loss: 0.0363\n","Epoch [32/50], Training Loss: 0.0360, Validation Loss: 0.0357\n","Epoch [33/50], Training Loss: 0.0354, Validation Loss: 0.0350\n","Epoch [34/50], Training Loss: 0.0347, Validation Loss: 0.0344\n","Epoch [35/50], Training Loss: 0.0341, Validation Loss: 0.0338\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0335, Validation Loss: 0.0332\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0330, Validation Loss: 0.0327\n","Epoch [38/50], Training Loss: 0.0324, Validation Loss: 0.0321\n","Epoch [39/50], Training Loss: 0.0318, Validation Loss: 0.0316\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  72%|███████▏  | 36/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0313, Validation Loss: 0.0311\n","Epoch [41/50], Training Loss: 0.0308, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:00<00:00, 57.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0303, Validation Loss: 0.0301\n","Epoch [43/50], Training Loss: 0.0298, Validation Loss: 0.0296\n","Epoch [44/50], Training Loss: 0.0293, Validation Loss: 0.0291\n","Epoch [45/50], Training Loss: 0.0288, Validation Loss: 0.0287\n","Epoch [46/50], Training Loss: 0.0283, Validation Loss: 0.0282\n","Epoch [47/50], Training Loss: 0.0279, Validation Loss: 0.0278\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0275, Validation Loss: 0.0274\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 57.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0270, Validation Loss: 0.0270\n","Epoch [50/50], Training Loss: 0.0266, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0532, Validation Loss: 0.2893\n","Epoch [2/50], Training Loss: 0.2981, Validation Loss: 0.0260\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 44.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0251, Validation Loss: 0.0155\n","Epoch [4/50], Training Loss: 0.0147, Validation Loss: 0.0119\n","Epoch [5/50], Training Loss: 0.0119, Validation Loss: 0.0101\n","Epoch [6/50], Training Loss: 0.0096, Validation Loss: 0.0083\n","Epoch [7/50], Training Loss: 0.0081, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 44.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0078, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 44.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0076, Validation Loss: 0.0077\n","Epoch [10/50], Training Loss: 0.0075, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:00<00:00, 45.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0074, Validation Loss: 0.0076\n","Epoch [12/50], Training Loss: 0.0073, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 47.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0073, Validation Loss: 0.0075\n","Epoch [14/50], Training Loss: 0.0072, Validation Loss: 0.0074\n","Epoch [15/50], Training Loss: 0.0072, Validation Loss: 0.0074\n","Epoch [16/50], Training Loss: 0.0072, Validation Loss: 0.0073\n","Epoch [17/50], Training Loss: 0.0071, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 47.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0071, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 47.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0071, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0071, Validation Loss: 0.0072\n","Epoch [21/50], Training Loss: 0.0070, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0070, Validation Loss: 0.0071\n","Epoch [23/50], Training Loss: 0.0069, Validation Loss: 0.0071\n","Epoch [24/50], Training Loss: 0.0069, Validation Loss: 0.0070\n","Epoch [25/50], Training Loss: 0.0069, Validation Loss: 0.0070\n","Epoch [26/50], Training Loss: 0.0068, Validation Loss: 0.0069\n","Epoch [27/50], Training Loss: 0.0068, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:00<00:00, 47.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0068, Validation Loss: 0.0069\n","Epoch [29/50], Training Loss: 0.0067, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0067, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  54%|█████▍    | 27/50 [00:00<00:00, 47.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0066, Validation Loss: 0.0068\n","Epoch [32/50], Training Loss: 0.0066, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 49.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0066, Validation Loss: 0.0067\n","Epoch [34/50], Training Loss: 0.0066, Validation Loss: 0.0067\n","Epoch [35/50], Training Loss: 0.0065, Validation Loss: 0.0067\n","Epoch [36/50], Training Loss: 0.0065, Validation Loss: 0.0066\n","Epoch [37/50], Training Loss: 0.0065, Validation Loss: 0.0066\n","Epoch [38/50], Training Loss: 0.0064, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:00<00:00, 50.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0064, Validation Loss: 0.0066\n","Epoch [40/50], Training Loss: 0.0064, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:00<00:00, 50.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0063, Validation Loss: 0.0065\n","Epoch [42/50], Training Loss: 0.0063, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:00<00:00, 50.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0063, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  90%|█████████ | 45/50 [00:00<00:00, 51.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0063, Validation Loss: 0.0064\n","Epoch [45/50], Training Loss: 0.0062, Validation Loss: 0.0064\n","Epoch [46/50], Training Loss: 0.0062, Validation Loss: 0.0063\n","Epoch [47/50], Training Loss: 0.0062, Validation Loss: 0.0063\n","Epoch [48/50], Training Loss: 0.0061, Validation Loss: 0.0062\n","Epoch [49/50], Training Loss: 0.0061, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 49.36it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0061, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0507, Validation Loss: 0.0493\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0489, Validation Loss: 0.0476\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0471, Validation Loss: 0.0459\n","Epoch [4/50], Training Loss: 0.0454, Validation Loss: 0.0442\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 55.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0437, Validation Loss: 0.0427\n","Epoch [6/50], Training Loss: 0.0421, Validation Loss: 0.0411\n","Epoch [7/50], Training Loss: 0.0406, Validation Loss: 0.0397\n","Epoch [8/50], Training Loss: 0.0391, Validation Loss: 0.0383\n","Epoch [9/50], Training Loss: 0.0377, Validation Loss: 0.0370\n","Epoch [10/50], Training Loss: 0.0363, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 56.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0350, Validation Loss: 0.0344\n","Epoch [12/50], Training Loss: 0.0338, Validation Loss: 0.0332\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 56.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0325, Validation Loss: 0.0320\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 56.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0314, Validation Loss: 0.0309\n","Epoch [15/50], Training Loss: 0.0303, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 56.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0292, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0281, Validation Loss: 0.0278\n","Epoch [18/50], Training Loss: 0.0271, Validation Loss: 0.0268\n","Epoch [19/50], Training Loss: 0.0262, Validation Loss: 0.0259\n","Epoch [20/50], Training Loss: 0.0252, Validation Loss: 0.0250\n","Epoch [21/50], Training Loss: 0.0243, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 57.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0235, Validation Loss: 0.0233\n","Epoch [23/50], Training Loss: 0.0227, Validation Loss: 0.0226\n","Epoch [24/50], Training Loss: 0.0219, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0211, Validation Loss: 0.0211\n","Epoch [26/50], Training Loss: 0.0204, Validation Loss: 0.0204\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 55.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0198, Validation Loss: 0.0198\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 53.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0191, Validation Loss: 0.0192\n","Epoch [29/50], Training Loss: 0.0185, Validation Loss: 0.0186\n","Epoch [30/50], Training Loss: 0.0180, Validation Loss: 0.0180\n","Epoch [31/50], Training Loss: 0.0174, Validation Loss: 0.0175\n","Epoch [32/50], Training Loss: 0.0169, Validation Loss: 0.0170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 53.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0164, Validation Loss: 0.0166\n","Epoch [34/50], Training Loss: 0.0160, Validation Loss: 0.0162\n","Epoch [35/50], Training Loss: 0.0156, Validation Loss: 0.0158\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 52.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0152, Validation Loss: 0.0154\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 52.55it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0149, Validation Loss: 0.0151\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 51.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0145, Validation Loss: 0.0147\n","Epoch [39/50], Training Loss: 0.0142, Validation Loss: 0.0145\n","Epoch [40/50], Training Loss: 0.0139, Validation Loss: 0.0142\n","Epoch [41/50], Training Loss: 0.0137, Validation Loss: 0.0139\n","Epoch [42/50], Training Loss: 0.0134, Validation Loss: 0.0137\n","Epoch [43/50], Training Loss: 0.0132, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 51.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0130, Validation Loss: 0.0132\n","Epoch [45/50], Training Loss: 0.0128, Validation Loss: 0.0130\n","Epoch [46/50], Training Loss: 0.0126, Validation Loss: 0.0128\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 51.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0124, Validation Loss: 0.0126\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:00<00:00, 51.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0122, Validation Loss: 0.0124\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 52.49it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0120, Validation Loss: 0.0122\n","Epoch [50/50], Training Loss: 0.0118, Validation Loss: 0.0120\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0330, Validation Loss: 0.0321\n","Epoch [2/50], Training Loss: 0.0329, Validation Loss: 0.0321\n","Epoch [3/50], Training Loss: 0.0329, Validation Loss: 0.0320\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 54.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0328, Validation Loss: 0.0320\n","Epoch [5/50], Training Loss: 0.0328, Validation Loss: 0.0319\n","Epoch [6/50], Training Loss: 0.0327, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0327, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 54.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0326, Validation Loss: 0.0318\n","Epoch [9/50], Training Loss: 0.0325, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 54.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0325, Validation Loss: 0.0317\n","Epoch [11/50], Training Loss: 0.0324, Validation Loss: 0.0316\n","Epoch [12/50], Training Loss: 0.0324, Validation Loss: 0.0316\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 54.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0323, Validation Loss: 0.0315\n","Epoch [14/50], Training Loss: 0.0323, Validation Loss: 0.0315\n","Epoch [15/50], Training Loss: 0.0322, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0322, Validation Loss: 0.0314\n","Epoch [17/50], Training Loss: 0.0321, Validation Loss: 0.0313\n","Epoch [18/50], Training Loss: 0.0321, Validation Loss: 0.0313\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0320, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0320, Validation Loss: 0.0312\n","Epoch [21/50], Training Loss: 0.0319, Validation Loss: 0.0311\n","Epoch [22/50], Training Loss: 0.0319, Validation Loss: 0.0311\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0318, Validation Loss: 0.0310\n","Epoch [24/50], Training Loss: 0.0318, Validation Loss: 0.0310\n","Epoch [25/50], Training Loss: 0.0317, Validation Loss: 0.0309\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0317, Validation Loss: 0.0309\n","Epoch [27/50], Training Loss: 0.0316, Validation Loss: 0.0308\n","Epoch [28/50], Training Loss: 0.0316, Validation Loss: 0.0308\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0315, Validation Loss: 0.0307\n","Epoch [30/50], Training Loss: 0.0315, Validation Loss: 0.0307\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  62%|██████▏   | 31/50 [00:00<00:00, 57.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0314, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  62%|██████▏   | 31/50 [00:00<00:00, 57.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0314, Validation Loss: 0.0306\n","Epoch [33/50], Training Loss: 0.0313, Validation Loss: 0.0305\n","Epoch [34/50], Training Loss: 0.0313, Validation Loss: 0.0305\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:00<00:00, 56.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0312, Validation Loss: 0.0304\n","Epoch [36/50], Training Loss: 0.0312, Validation Loss: 0.0304\n","Epoch [37/50], Training Loss: 0.0311, Validation Loss: 0.0303\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:00<00:00, 56.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0311, Validation Loss: 0.0303\n","Epoch [39/50], Training Loss: 0.0310, Validation Loss: 0.0302\n","Epoch [40/50], Training Loss: 0.0310, Validation Loss: 0.0302\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:00<00:00, 56.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0309, Validation Loss: 0.0301\n","Epoch [42/50], Training Loss: 0.0309, Validation Loss: 0.0301\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:00<00:00, 57.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0308, Validation Loss: 0.0301\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  86%|████████▌ | 43/50 [00:00<00:00, 57.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0308, Validation Loss: 0.0300\n","Epoch [45/50], Training Loss: 0.0308, Validation Loss: 0.0300\n","Epoch [46/50], Training Loss: 0.0307, Validation Loss: 0.0299\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  98%|█████████▊| 49/50 [00:00<00:00, 56.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0307, Validation Loss: 0.0299\n","Epoch [48/50], Training Loss: 0.0306, Validation Loss: 0.0298\n","Epoch [49/50], Training Loss: 0.0306, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 56.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0305, Validation Loss: 0.0297\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0546, Validation Loss: 0.0427\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0418, Validation Loss: 0.0363\n","Epoch [3/50], Training Loss: 0.0354, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0308, Validation Loss: 0.0281\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:00, 45.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0272, Validation Loss: 0.0250\n","Epoch [6/50], Training Loss: 0.0242, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:00, 45.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0217, Validation Loss: 0.0202\n","Epoch [8/50], Training Loss: 0.0195, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:00, 45.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0176, Validation Loss: 0.0166\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:01, 39.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0160, Validation Loss: 0.0152\n","Epoch [11/50], Training Loss: 0.0146, Validation Loss: 0.0139\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:01, 39.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0134, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:01, 39.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0125, Validation Loss: 0.0121\n","Epoch [14/50], Training Loss: 0.0117, Validation Loss: 0.0114\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  30%|███       | 15/50 [00:00<00:00, 39.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0110, Validation Loss: 0.0109\n","Epoch [16/50], Training Loss: 0.0105, Validation Loss: 0.0105\n","Epoch [17/50], Training Loss: 0.0101, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  30%|███       | 15/50 [00:00<00:00, 39.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0098, Validation Loss: 0.0099\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 41.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0096, Validation Loss: 0.0097\n","Epoch [20/50], Training Loss: 0.0094, Validation Loss: 0.0095\n","Epoch [21/50], Training Loss: 0.0092, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 41.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0090, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0089, Validation Loss: 0.0090\n","Epoch [24/50], Training Loss: 0.0087, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 46.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0086, Validation Loss: 0.0088\n","Epoch [26/50], Training Loss: 0.0085, Validation Loss: 0.0087\n","Epoch [27/50], Training Loss: 0.0084, Validation Loss: 0.0086\n","Epoch [28/50], Training Loss: 0.0083, Validation Loss: 0.0086\n","Epoch [29/50], Training Loss: 0.0083, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 46.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0082, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:00<00:00, 47.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0082, Validation Loss: 0.0084\n","Epoch [32/50], Training Loss: 0.0081, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:00<00:00, 47.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0081, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                   "]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0080, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:00<00:00, 45.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0080, Validation Loss: 0.0082\n","Epoch [36/50], Training Loss: 0.0079, Validation Loss: 0.0082\n","Epoch [37/50], Training Loss: 0.0079, Validation Loss: 0.0082\n","Epoch [38/50], Training Loss: 0.0079, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:00<00:00, 45.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0078, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  74%|███████▍  | 37/50 [00:00<00:00, 45.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0078, Validation Loss: 0.0081\n","Epoch [41/50], Training Loss: 0.0078, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0078, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0077, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  94%|█████████▍| 47/50 [00:01<00:00, 42.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0077, Validation Loss: 0.0080\n","Epoch [45/50], Training Loss: 0.0077, Validation Loss: 0.0079\n","Epoch [46/50], Training Loss: 0.0077, Validation Loss: 0.0079\n","Epoch [47/50], Training Loss: 0.0076, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  94%|█████████▍| 47/50 [00:01<00:00, 42.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0076, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 43.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0076, Validation Loss: 0.0079\n","Epoch [50/50], Training Loss: 0.0076, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0223, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 39.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0222, Validation Loss: 0.0223\n","Epoch [3/50], Training Loss: 0.0221, Validation Loss: 0.0222\n","Epoch [4/50], Training Loss: 0.0219, Validation Loss: 0.0220\n","Epoch [5/50], Training Loss: 0.0218, Validation Loss: 0.0219\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 39.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0217, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 38.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0216, Validation Loss: 0.0217\n","Epoch [8/50], Training Loss: 0.0215, Validation Loss: 0.0216\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 38.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0213, Validation Loss: 0.0214\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0212, Validation Loss: 0.0213\n","Epoch [11/50], Training Loss: 0.0211, Validation Loss: 0.0212\n","Epoch [12/50], Training Loss: 0.0210, Validation Loss: 0.0211\n","Epoch [13/50], Training Loss: 0.0209, Validation Loss: 0.0210\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0208, Validation Loss: 0.0209\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0206, Validation Loss: 0.0208\n","Epoch [16/50], Training Loss: 0.0205, Validation Loss: 0.0207\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 38.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0204, Validation Loss: 0.0205\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:00<00:00, 37.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0203, Validation Loss: 0.0204\n","Epoch [19/50], Training Loss: 0.0202, Validation Loss: 0.0203\n","Epoch [20/50], Training Loss: 0.0201, Validation Loss: 0.0202\n","Epoch [21/50], Training Loss: 0.0200, Validation Loss: 0.0201\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:00<00:00, 37.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0199, Validation Loss: 0.0200\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:00<00:00, 37.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0197, Validation Loss: 0.0199\n","Epoch [24/50], Training Loss: 0.0196, Validation Loss: 0.0198\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  50%|█████     | 25/50 [00:00<00:00, 37.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0195, Validation Loss: 0.0197\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 39.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0194, Validation Loss: 0.0196\n","Epoch [27/50], Training Loss: 0.0193, Validation Loss: 0.0195\n","Epoch [28/50], Training Loss: 0.0192, Validation Loss: 0.0194\n","Epoch [29/50], Training Loss: 0.0191, Validation Loss: 0.0193\n","Epoch [30/50], Training Loss: 0.0190, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 39.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0189, Validation Loss: 0.0191\n","Epoch [32/50], Training Loss: 0.0188, Validation Loss: 0.0190\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 39.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0187, Validation Loss: 0.0189\n","Epoch [34/50], Training Loss: 0.0186, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 43.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0185, Validation Loss: 0.0187\n","Epoch [36/50], Training Loss: 0.0184, Validation Loss: 0.0186\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 43.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0183, Validation Loss: 0.0185\n","Epoch [38/50], Training Loss: 0.0182, Validation Loss: 0.0184\n","Epoch [39/50], Training Loss: 0.0181, Validation Loss: 0.0183\n","Epoch [40/50], Training Loss: 0.0180, Validation Loss: 0.0182\n","Epoch [41/50], Training Loss: 0.0180, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:01<00:00, 44.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0179, Validation Loss: 0.0180\n","Epoch [43/50], Training Loss: 0.0178, Validation Loss: 0.0179\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:01<00:00, 44.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0177, Validation Loss: 0.0179\n","Epoch [45/50], Training Loss: 0.0176, Validation Loss: 0.0178\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:01<00:00, 47.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0175, Validation Loss: 0.0177\n","Epoch [47/50], Training Loss: 0.0174, Validation Loss: 0.0176\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 42.87it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0173, Validation Loss: 0.0175\n","Epoch [49/50], Training Loss: 0.0172, Validation Loss: 0.0174\n","Epoch [50/50], Training Loss: 0.0171, Validation Loss: 0.0173\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0412, Validation Loss: 0.0406\n","Epoch [2/50], Training Loss: 0.0412, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0412, Validation Loss: 0.0406\n","Epoch [4/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [6/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 57.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [8/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 57.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [10/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [11/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 57.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:00, 49.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0411, Validation Loss: 0.0406\n","Epoch [14/50], Training Loss: 0.0411, Validation Loss: 0.0406\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:00, 49.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0411, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:00, 49.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0411, Validation Loss: 0.0405\n","Epoch [17/50], Training Loss: 0.0411, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 44.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0411, Validation Loss: 0.0405\n","Epoch [19/50], Training Loss: 0.0410, Validation Loss: 0.0405\n","Epoch [20/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 44.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  46%|████▌     | 23/50 [00:00<00:00, 42.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0410, Validation Loss: 0.0405\n","Epoch [24/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  46%|████▌     | 23/50 [00:00<00:00, 42.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0410, Validation Loss: 0.0405\n","Epoch [26/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0410, Validation Loss: 0.0405\n","Epoch [28/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0410, Validation Loss: 0.0405\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0410, Validation Loss: 0.0404\n","Epoch [31/50], Training Loss: 0.0410, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 41.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0410, Validation Loss: 0.0404\n","Epoch [33/50], Training Loss: 0.0410, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [35/50], Training Loss: 0.0409, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 41.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [37/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [38/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [39/50], Training Loss: 0.0409, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:00<00:00, 46.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [41/50], Training Loss: 0.0409, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  78%|███████▊  | 39/50 [00:00<00:00, 46.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [43/50], Training Loss: 0.0409, Validation Loss: 0.0404\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:00<00:00, 49.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0409, Validation Loss: 0.0404\n","Epoch [45/50], Training Loss: 0.0409, Validation Loss: 0.0403\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:00<00:00, 49.56it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0409, Validation Loss: 0.0403\n","Epoch [47/50], Training Loss: 0.0409, Validation Loss: 0.0403\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 47.81it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0409, Validation Loss: 0.0403\n","Epoch [49/50], Training Loss: 0.0408, Validation Loss: 0.0403\n","Epoch [50/50], Training Loss: 0.0408, Validation Loss: 0.0403\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0774, Validation Loss: 0.0753\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0756, Validation Loss: 0.0740\n","Epoch [3/50], Training Loss: 0.0744, Validation Loss: 0.0731\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0734, Validation Loss: 0.0722\n","Epoch [5/50], Training Loss: 0.0726, Validation Loss: 0.0715\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 62.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0718, Validation Loss: 0.0708\n","Epoch [7/50], Training Loss: 0.0712, Validation Loss: 0.0702\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 62.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0706, Validation Loss: 0.0697\n","Epoch [9/50], Training Loss: 0.0700, Validation Loss: 0.0691\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                   "]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0695, Validation Loss: 0.0686\n","Epoch [11/50], Training Loss: 0.0690, Validation Loss: 0.0682\n","Epoch [12/50], Training Loss: 0.0685, Validation Loss: 0.0677\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 62.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0681, Validation Loss: 0.0673\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0676, Validation Loss: 0.0669\n","Epoch [15/50], Training Loss: 0.0672, Validation Loss: 0.0665\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0668, Validation Loss: 0.0661\n","Epoch [17/50], Training Loss: 0.0665, Validation Loss: 0.0658\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 57.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0661, Validation Loss: 0.0654\n","Epoch [19/50], Training Loss: 0.0657, Validation Loss: 0.0651\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0654, Validation Loss: 0.0647\n","Epoch [21/50], Training Loss: 0.0651, Validation Loss: 0.0644\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0647, Validation Loss: 0.0641\n","Epoch [23/50], Training Loss: 0.0644, Validation Loss: 0.0638\n","Epoch [24/50], Training Loss: 0.0641, Validation Loss: 0.0635\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 58.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0638, Validation Loss: 0.0632\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 56.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0635, Validation Loss: 0.0629\n","Epoch [27/50], Training Loss: 0.0632, Validation Loss: 0.0626\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 56.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0629, Validation Loss: 0.0623\n","Epoch [29/50], Training Loss: 0.0627, Validation Loss: 0.0621\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                    "]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0624, Validation Loss: 0.0618\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0621, Validation Loss: 0.0616\n","Epoch [32/50], Training Loss: 0.0619, Validation Loss: 0.0613\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:00<00:00, 55.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0616, Validation Loss: 0.0610\n","Epoch [34/50], Training Loss: 0.0614, Validation Loss: 0.0608\n","Epoch [35/50], Training Loss: 0.0611, Validation Loss: 0.0606\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:00<00:00, 55.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0609, Validation Loss: 0.0603\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 52.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0606, Validation Loss: 0.0601\n","Epoch [38/50], Training Loss: 0.0604, Validation Loss: 0.0599\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 52.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0602, Validation Loss: 0.0596\n","Epoch [40/50], Training Loss: 0.0599, Validation Loss: 0.0594\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 52.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0597, Validation Loss: 0.0592\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 52.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0595, Validation Loss: 0.0590\n","Epoch [43/50], Training Loss: 0.0593, Validation Loss: 0.0587\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:00<00:00, 52.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0590, Validation Loss: 0.0585\n","Epoch [45/50], Training Loss: 0.0588, Validation Loss: 0.0583\n","Epoch [46/50], Training Loss: 0.0586, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:00<00:00, 52.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0584, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  88%|████████▊ | 44/50 [00:00<00:00, 52.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0582, Validation Loss: 0.0577\n","Epoch [49/50], Training Loss: 0.0580, Validation Loss: 0.0575\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 54.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0578, Validation Loss: 0.0573\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0339, Validation Loss: 0.0216\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0217, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 37.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0193, Validation Loss: 0.0171\n","Epoch [4/50], Training Loss: 0.0172, Validation Loss: 0.0150\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 37.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0151, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 37.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0129, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 36.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0110, Validation Loss: 0.0094\n","Epoch [8/50], Training Loss: 0.0094, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 36.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 36.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0086, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0085, Validation Loss: 0.0086\n","Epoch [12/50], Training Loss: 0.0085, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0086, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 36.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0087, Validation Loss: 0.0092\n","Epoch [15/50], Training Loss: 0.0089, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:00<00:01, 33.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0089, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:00<00:01, 33.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0089, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0087, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:00<00:01, 33.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0084, Validation Loss: 0.0084\n","Epoch [20/50], Training Loss: 0.0081, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0079, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 31.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0078, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 31.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0077, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0077, Validation Loss: 0.0079\n","Epoch [25/50], Training Loss: 0.0077, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 30.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0077, Validation Loss: 0.0078\n","Epoch [27/50], Training Loss: 0.0077, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 31.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0076, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 31.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0075, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 31.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0075, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 31.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0075, Validation Loss: 0.0076\n","Epoch [32/50], Training Loss: 0.0075, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:01<00:00, 31.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0074, Validation Loss: 0.0075\n","Epoch [34/50], Training Loss: 0.0073, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0072, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 32.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0072, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 32.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0071, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 32.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0071, Validation Loss: 0.0072\n","Epoch [39/50], Training Loss: 0.0070, Validation Loss: 0.0071\n","Epoch [40/50], Training Loss: 0.0070, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 32.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0069, Validation Loss: 0.0070\n","Epoch [42/50], Training Loss: 0.0068, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 33.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0068, Validation Loss: 0.0070\n","Epoch [44/50], Training Loss: 0.0068, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 33.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0068, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  96%|█████████▌| 48/50 [00:01<00:00, 35.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0067, Validation Loss: 0.0068\n","Epoch [47/50], Training Loss: 0.0066, Validation Loss: 0.0068\n","Epoch [48/50], Training Loss: 0.0066, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 33.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0065, Validation Loss: 0.0067\n","Epoch [50/50], Training Loss: 0.0065, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0759, Validation Loss: 0.0753\n","Epoch [2/50], Training Loss: 0.0740, Validation Loss: 0.0734\n","Epoch [3/50], Training Loss: 0.0722, Validation Loss: 0.0716\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0704, Validation Loss: 0.0699\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  10%|█         | 5/50 [00:00<00:00, 46.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0687, Validation Loss: 0.0682\n","Epoch [6/50], Training Loss: 0.0670, Validation Loss: 0.0665\n","Epoch [7/50], Training Loss: 0.0654, Validation Loss: 0.0649\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 45.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0638, Validation Loss: 0.0634\n","Epoch [9/50], Training Loss: 0.0622, Validation Loss: 0.0619\n","Epoch [10/50], Training Loss: 0.0607, Validation Loss: 0.0604\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 45.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0593, Validation Loss: 0.0590\n","Epoch [12/50], Training Loss: 0.0578, Validation Loss: 0.0576\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  20%|██        | 10/50 [00:00<00:00, 45.41it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0565, Validation Loss: 0.0562\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0551, Validation Loss: 0.0549\n","Epoch [15/50], Training Loss: 0.0538, Validation Loss: 0.0536\n","Epoch [16/50], Training Loss: 0.0525, Validation Loss: 0.0524\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  30%|███       | 15/50 [00:00<00:00, 43.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0513, Validation Loss: 0.0512\n","Epoch [18/50], Training Loss: 0.0501, Validation Loss: 0.0500\n","Epoch [19/50], Training Loss: 0.0489, Validation Loss: 0.0488\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 42.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0478, Validation Loss: 0.0477\n","Epoch [21/50], Training Loss: 0.0467, Validation Loss: 0.0466\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 42.91it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0456, Validation Loss: 0.0456\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 43.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0446, Validation Loss: 0.0445\n","Epoch [24/50], Training Loss: 0.0436, Validation Loss: 0.0435\n","Epoch [25/50], Training Loss: 0.0426, Validation Loss: 0.0426\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0416, Validation Loss: 0.0416\n","Epoch [27/50], Training Loss: 0.0407, Validation Loss: 0.0407\n","Epoch [28/50], Training Loss: 0.0398, Validation Loss: 0.0398\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:00<00:00, 43.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0389, Validation Loss: 0.0390\n","Epoch [30/50], Training Loss: 0.0380, Validation Loss: 0.0381\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:00<00:00, 43.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0372, Validation Loss: 0.0373\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  60%|██████    | 30/50 [00:00<00:00, 43.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0364, Validation Loss: 0.0365\n","Epoch [33/50], Training Loss: 0.0356, Validation Loss: 0.0357\n","Epoch [34/50], Training Loss: 0.0348, Validation Loss: 0.0350\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 42.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0341, Validation Loss: 0.0342\n","Epoch [36/50], Training Loss: 0.0334, Validation Loss: 0.0335\n","Epoch [37/50], Training Loss: 0.0327, Validation Loss: 0.0328\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 42.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0320, Validation Loss: 0.0321\n","Epoch [39/50], Training Loss: 0.0313, Validation Loss: 0.0315\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 42.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0307, Validation Loss: 0.0309\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 42.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0300, Validation Loss: 0.0302\n","Epoch [42/50], Training Loss: 0.0294, Validation Loss: 0.0296\n","Epoch [43/50], Training Loss: 0.0288, Validation Loss: 0.0290\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 42.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0282, Validation Loss: 0.0285\n","Epoch [45/50], Training Loss: 0.0277, Validation Loss: 0.0279\n","Epoch [46/50], Training Loss: 0.0271, Validation Loss: 0.0274\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0266, Validation Loss: 0.0269\n","Epoch [48/50], Training Loss: 0.0261, Validation Loss: 0.0264\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 42.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0256, Validation Loss: 0.0259\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 42.92it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0251, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0643, Validation Loss: 0.1551\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:01, 29.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.1581, Validation Loss: 0.0979\n","Epoch [3/50], Training Loss: 0.0969, Validation Loss: 0.0403\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:01, 29.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0396, Validation Loss: 0.0194\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   6%|▌         | 3/50 [00:00<00:01, 29.52it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0190, Validation Loss: 0.0109\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:01, 28.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0107, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:01, 28.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0086, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:01, 30.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0082, Validation Loss: 0.0083\n","Epoch [9/50], Training Loss: 0.0082, Validation Loss: 0.0083\n","Epoch [10/50], Training Loss: 0.0081, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:01, 30.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0081, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0081, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:01, 33.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0079, Validation Loss: 0.0079\n","Epoch [14/50], Training Loss: 0.0078, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:01, 33.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0077, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 37.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0076, Validation Loss: 0.0078\n","Epoch [17/50], Training Loss: 0.0076, Validation Loss: 0.0077\n","Epoch [18/50], Training Loss: 0.0075, Validation Loss: 0.0077\n","Epoch [19/50], Training Loss: 0.0075, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 37.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0074, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 37.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0074, Validation Loss: 0.0074\n","Epoch [22/50], Training Loss: 0.0073, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 37.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0072, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 38.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0072, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 38.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0073, Validation Loss: 0.0078\n","Epoch [26/50], Training Loss: 0.0076, Validation Loss: 0.0072\n","Epoch [27/50], Training Loss: 0.0070, Validation Loss: 0.0074\n","Epoch [28/50], Training Loss: 0.0071, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 37.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0072, Validation Loss: 0.0082\n","Epoch [30/50], Training Loss: 0.0079, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 37.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0072, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 38.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0075, Validation Loss: 0.0069\n","Epoch [33/50], Training Loss: 0.0067, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:01<00:00, 38.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0067, Validation Loss: 0.0069\n","Epoch [35/50], Training Loss: 0.0068, Validation Loss: 0.0078\n","Epoch [36/50], Training Loss: 0.0074, Validation Loss: 0.0069\n","Epoch [37/50], Training Loss: 0.0068, Validation Loss: 0.0075\n","Epoch [38/50], Training Loss: 0.0072, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:01<00:00, 40.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0068, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:01<00:00, 40.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0072, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:01<00:00, 40.97it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0065, Validation Loss: 0.0070\n","Epoch [42/50], Training Loss: 0.0067, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:01<00:00, 40.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0064, Validation Loss: 0.0070\n","Epoch [44/50], Training Loss: 0.0067, Validation Loss: 0.0065\n","Epoch [45/50], Training Loss: 0.0063, Validation Loss: 0.0069\n","Epoch [46/50], Training Loss: 0.0066, Validation Loss: 0.0063\n","Epoch [47/50], Training Loss: 0.0061, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0062, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 37.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0060, Validation Loss: 0.0064\n","Epoch [50/50], Training Loss: 0.0062, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["\n","Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 29.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1571, Validation Loss: 0.1514\n","Epoch [2/50], Training Loss: 0.1528, Validation Loss: 0.1472\n","Epoch [3/50], Training Loss: 0.1486, Validation Loss: 0.1431\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 29.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.1444, Validation Loss: 0.1390\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   6%|▌         | 3/50 [00:00<00:01, 29.51it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.1403, Validation Loss: 0.1350\n","Epoch [6/50], Training Loss: 0.1363, Validation Loss: 0.1311\n","Epoch [7/50], Training Loss: 0.1324, Validation Loss: 0.1273\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  14%|█▍        | 7/50 [00:00<00:01, 29.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.1285, Validation Loss: 0.1235\n","Epoch [9/50], Training Loss: 0.1247, Validation Loss: 0.1199\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  20%|██        | 10/50 [00:00<00:01, 27.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.1210, Validation Loss: 0.1162\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  26%|██▌       | 13/50 [00:00<00:01, 28.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.1173, Validation Loss: 0.1125\n","Epoch [12/50], Training Loss: 0.1136, Validation Loss: 0.1089\n","Epoch [13/50], Training Loss: 0.1100, Validation Loss: 0.1053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  26%|██▌       | 13/50 [00:00<00:01, 28.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.1063, Validation Loss: 0.1017\n","Epoch [15/50], Training Loss: 0.1028, Validation Loss: 0.0982\n","Epoch [16/50], Training Loss: 0.0992, Validation Loss: 0.0947\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:01, 29.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0957, Validation Loss: 0.0912\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0922, Validation Loss: 0.0877\n","Epoch [19/50], Training Loss: 0.0887, Validation Loss: 0.0843\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:01, 29.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0852, Validation Loss: 0.0809\n","Epoch [21/50], Training Loss: 0.0818, Validation Loss: 0.0776\n","Epoch [22/50], Training Loss: 0.0785, Validation Loss: 0.0745\n","Epoch [23/50], Training Loss: 0.0753, Validation Loss: 0.0714\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 30.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0722, Validation Loss: 0.0683\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0691, Validation Loss: 0.0652\n","Epoch [26/50], Training Loss: 0.0660, Validation Loss: 0.0622\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 31.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0630, Validation Loss: 0.0592\n","Epoch [28/50], Training Loss: 0.0599, Validation Loss: 0.0562\n","Epoch [29/50], Training Loss: 0.0569, Validation Loss: 0.0532\n","Epoch [30/50], Training Loss: 0.0539, Validation Loss: 0.0503\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:01<00:00, 31.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0509, Validation Loss: 0.0474\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:01<00:00, 31.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0480, Validation Loss: 0.0445\n","Epoch [33/50], Training Loss: 0.0451, Validation Loss: 0.0417\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 33.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0423, Validation Loss: 0.0390\n","Epoch [35/50], Training Loss: 0.0396, Validation Loss: 0.0364\n","Epoch [36/50], Training Loss: 0.0369, Validation Loss: 0.0338\n","Epoch [37/50], Training Loss: 0.0343, Validation Loss: 0.0313\n","Epoch [38/50], Training Loss: 0.0318, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  72%|███████▏  | 36/50 [00:01<00:00, 33.71it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0293, Validation Loss: 0.0265\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:01<00:00, 34.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0270, Validation Loss: 0.0243\n","Epoch [41/50], Training Loss: 0.0247, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 33.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0226, Validation Loss: 0.0203\n","Epoch [43/50], Training Loss: 0.0206, Validation Loss: 0.0184\n","Epoch [44/50], Training Loss: 0.0187, Validation Loss: 0.0167\n","Epoch [45/50], Training Loss: 0.0170, Validation Loss: 0.0152\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 33.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0155, Validation Loss: 0.0139\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  88%|████████▊ | 44/50 [00:01<00:00, 33.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0141, Validation Loss: 0.0127\n","Epoch [48/50], Training Loss: 0.0129, Validation Loss: 0.0117\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 31.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0119, Validation Loss: 0.0109\n","Epoch [50/50], Training Loss: 0.0110, Validation Loss: 0.0102\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0608, Validation Loss: 0.0598\n","Epoch [2/50], Training Loss: 0.0607, Validation Loss: 0.0596\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0606, Validation Loss: 0.0595\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0604, Validation Loss: 0.0594\n","Epoch [5/50], Training Loss: 0.0603, Validation Loss: 0.0592\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:01, 34.85it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0601, Validation Loss: 0.0591\n","Epoch [7/50], Training Loss: 0.0600, Validation Loss: 0.0590\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 32.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0599, Validation Loss: 0.0588\n","Epoch [9/50], Training Loss: 0.0597, Validation Loss: 0.0587\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 32.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0596, Validation Loss: 0.0586\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 32.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0595, Validation Loss: 0.0584\n","Epoch [12/50], Training Loss: 0.0593, Validation Loss: 0.0583\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 31.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0592, Validation Loss: 0.0582\n","Epoch [14/50], Training Loss: 0.0591, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:01, 31.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0589, Validation Loss: 0.0579\n","Epoch [16/50], Training Loss: 0.0588, Validation Loss: 0.0578\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:01, 31.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0587, Validation Loss: 0.0577\n","Epoch [18/50], Training Loss: 0.0585, Validation Loss: 0.0575\n","Epoch [19/50], Training Loss: 0.0584, Validation Loss: 0.0574\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 31.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0583, Validation Loss: 0.0573\n","Epoch [21/50], Training Loss: 0.0582, Validation Loss: 0.0571\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 31.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0580, Validation Loss: 0.0570\n","Epoch [23/50], Training Loss: 0.0579, Validation Loss: 0.0569\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 31.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0578, Validation Loss: 0.0568\n","Epoch [25/50], Training Loss: 0.0576, Validation Loss: 0.0566\n","Epoch [26/50], Training Loss: 0.0575, Validation Loss: 0.0565\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 32.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0574, Validation Loss: 0.0564\n","Epoch [28/50], Training Loss: 0.0573, Validation Loss: 0.0563\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 32.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0571, Validation Loss: 0.0561\n","Epoch [30/50], Training Loss: 0.0570, Validation Loss: 0.0560\n","Epoch [31/50], Training Loss: 0.0569, Validation Loss: 0.0559\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 34.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0567, Validation Loss: 0.0558\n","Epoch [33/50], Training Loss: 0.0566, Validation Loss: 0.0556\n","Epoch [34/50], Training Loss: 0.0565, Validation Loss: 0.0555\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:01<00:00, 34.94it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0564, Validation Loss: 0.0554\n","Epoch [36/50], Training Loss: 0.0562, Validation Loss: 0.0553\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 33.95it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0561, Validation Loss: 0.0551\n","Epoch [38/50], Training Loss: 0.0560, Validation Loss: 0.0550\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:01<00:00, 33.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0559, Validation Loss: 0.0549\n","Epoch [40/50], Training Loss: 0.0557, Validation Loss: 0.0548\n","Epoch [41/50], Training Loss: 0.0556, Validation Loss: 0.0546\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:01<00:00, 33.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0555, Validation Loss: 0.0545\n","Epoch [43/50], Training Loss: 0.0554, Validation Loss: 0.0544\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 33.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0553, Validation Loss: 0.0543\n","Epoch [45/50], Training Loss: 0.0551, Validation Loss: 0.0542\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  90%|█████████ | 45/50 [00:01<00:00, 33.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0550, Validation Loss: 0.0540\n","Epoch [47/50], Training Loss: 0.0549, Validation Loss: 0.0539\n","Epoch [48/50], Training Loss: 0.0548, Validation Loss: 0.0538\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 32.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0546, Validation Loss: 0.0537\n","Epoch [50/50], Training Loss: 0.0545, Validation Loss: 0.0536\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0095, Validation Loss: 0.0090\n","Epoch [2/50], Training Loss: 0.0090, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:01, 34.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0086, Validation Loss: 0.0081\n","Epoch [4/50], Training Loss: 0.0079, Validation Loss: 0.0078\n","Epoch [5/50], Training Loss: 0.0076, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   8%|▊         | 4/50 [00:00<00:01, 34.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0075, Validation Loss: 0.0075\n","Epoch [7/50], Training Loss: 0.0073, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0071, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  16%|█▌        | 8/50 [00:00<00:01, 31.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0070, Validation Loss: 0.0070\n","Epoch [10/50], Training Loss: 0.0068, Validation Loss: 0.0069\n","Epoch [11/50], Training Loss: 0.0066, Validation Loss: 0.0067\n","Epoch [12/50], Training Loss: 0.0065, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:01, 31.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0063, Validation Loss: 0.0065\n","Epoch [14/50], Training Loss: 0.0062, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:01, 31.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0063, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:01, 31.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0064, Validation Loss: 0.0065\n","Epoch [17/50], Training Loss: 0.0063, Validation Loss: 0.0061\n","Epoch [18/50], Training Loss: 0.0059, Validation Loss: 0.0059\n","Epoch [19/50], Training Loss: 0.0056, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 31.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0054, Validation Loss: 0.0055\n","Epoch [21/50], Training Loss: 0.0053, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 31.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0051, Validation Loss: 0.0052\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 31.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0050, Validation Loss: 0.0051\n","Epoch [24/50], Training Loss: 0.0049, Validation Loss: 0.0050\n","Epoch [25/50], Training Loss: 0.0048, Validation Loss: 0.0050\n","Epoch [26/50], Training Loss: 0.0048, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 31.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0048, Validation Loss: 0.0049\n","Epoch [28/50], Training Loss: 0.0047, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 31.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0046, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:01<00:00, 31.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0045, Validation Loss: 0.0045\n","Epoch [31/50], Training Loss: 0.0043, Validation Loss: 0.0044\n","Epoch [32/50], Training Loss: 0.0042, Validation Loss: 0.0042\n","Epoch [33/50], Training Loss: 0.0040, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  64%|██████▍   | 32/50 [00:01<00:00, 31.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0039, Validation Loss: 0.0040\n","Epoch [35/50], Training Loss: 0.0038, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:01<00:00, 31.69it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0037, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:01<00:00, 34.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0037, Validation Loss: 0.0038\n","Epoch [38/50], Training Loss: 0.0036, Validation Loss: 0.0037\n","Epoch [39/50], Training Loss: 0.0035, Validation Loss: 0.0036\n","Epoch [40/50], Training Loss: 0.0035, Validation Loss: 0.0036\n","Epoch [41/50], Training Loss: 0.0034, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:01<00:00, 34.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0034, Validation Loss: 0.0035\n","Epoch [43/50], Training Loss: 0.0034, Validation Loss: 0.0035\n","Epoch [44/50], Training Loss: 0.0033, Validation Loss: 0.0034\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  90%|█████████ | 45/50 [00:01<00:00, 36.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0033, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  98%|█████████▊| 49/50 [00:01<00:00, 36.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0032, Validation Loss: 0.0033\n","Epoch [47/50], Training Loss: 0.0031, Validation Loss: 0.0032\n","Epoch [48/50], Training Loss: 0.0030, Validation Loss: 0.0031\n","Epoch [49/50], Training Loss: 0.0030, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 33.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0029, Validation Loss: 0.0030\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0264, Validation Loss: 0.0262\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0263, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 32.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0262, Validation Loss: 0.0259\n","Epoch [4/50], Training Loss: 0.0261, Validation Loss: 0.0258\n","Epoch [5/50], Training Loss: 0.0259, Validation Loss: 0.0257\n","Epoch [6/50], Training Loss: 0.0258, Validation Loss: 0.0256\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0257, Validation Loss: 0.0255\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 33.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0256, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 33.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0255, Validation Loss: 0.0253\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0254, Validation Loss: 0.0251\n","Epoch [11/50], Training Loss: 0.0253, Validation Loss: 0.0250\n","Epoch [12/50], Training Loss: 0.0251, Validation Loss: 0.0249\n","Epoch [13/50], Training Loss: 0.0250, Validation Loss: 0.0248\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 33.82it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0249, Validation Loss: 0.0247\n","Epoch [15/50], Training Loss: 0.0248, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:00<00:00, 36.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0247, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  32%|███▏      | 16/50 [00:00<00:00, 36.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0246, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 34.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0245, Validation Loss: 0.0242\n","Epoch [19/50], Training Loss: 0.0243, Validation Loss: 0.0241\n","Epoch [20/50], Training Loss: 0.0242, Validation Loss: 0.0240\n","Epoch [21/50], Training Loss: 0.0241, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 34.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0240, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0239, Validation Loss: 0.0237\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 34.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0238, Validation Loss: 0.0236\n","Epoch [25/50], Training Loss: 0.0237, Validation Loss: 0.0235\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 34.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0236, Validation Loss: 0.0234\n","Epoch [27/50], Training Loss: 0.0235, Validation Loss: 0.0233\n","Epoch [28/50], Training Loss: 0.0233, Validation Loss: 0.0231\n","Epoch [29/50], Training Loss: 0.0232, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 34.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0231, Validation Loss: 0.0229\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0230, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:00<00:00, 37.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0229, Validation Loss: 0.0227\n","Epoch [33/50], Training Loss: 0.0228, Validation Loss: 0.0226\n","Epoch [34/50], Training Loss: 0.0227, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:01<00:00, 36.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0226, Validation Loss: 0.0224\n","Epoch [36/50], Training Loss: 0.0225, Validation Loss: 0.0223\n","Epoch [37/50], Training Loss: 0.0224, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:01<00:00, 36.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0223, Validation Loss: 0.0221\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:01<00:00, 36.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0222, Validation Loss: 0.0220\n","Epoch [40/50], Training Loss: 0.0220, Validation Loss: 0.0219\n","Epoch [41/50], Training Loss: 0.0219, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:01<00:00, 33.83it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0218, Validation Loss: 0.0216\n","Epoch [43/50], Training Loss: 0.0217, Validation Loss: 0.0215\n","Epoch [44/50], Training Loss: 0.0216, Validation Loss: 0.0214\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  90%|█████████ | 45/50 [00:01<00:00, 34.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0215, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0214, Validation Loss: 0.0212\n","Epoch [47/50], Training Loss: 0.0213, Validation Loss: 0.0211\n","Epoch [48/50], Training Loss: 0.0212, Validation Loss: 0.0210\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 34.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0211, Validation Loss: 0.0209\n","Epoch [50/50], Training Loss: 0.0210, Validation Loss: 0.0208\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   8%|▊         | 4/50 [00:00<00:01, 33.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [4/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [5/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [7/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 34.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:01, 34.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 33.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [11/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [12/50], Training Loss: 0.0322, Validation Loss: 0.0319\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 33.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0322, Validation Loss: 0.0319\n","Epoch [14/50], Training Loss: 0.0322, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:01, 33.12it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0322, Validation Loss: 0.0318\n","Epoch [16/50], Training Loss: 0.0322, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  34%|███▍      | 17/50 [00:00<00:00, 36.90it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0322, Validation Loss: 0.0318\n","Epoch [18/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  44%|████▍     | 22/50 [00:00<00:00, 41.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [20/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [21/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [22/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [24/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [26/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [28/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:00<00:00, 43.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [30/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [31/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 41.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0321, Validation Loss: 0.0318\n","Epoch [33/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 41.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0321, Validation Loss: 0.0318\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 41.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0321, Validation Loss: 0.0317\n","Epoch [36/50], Training Loss: 0.0321, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  74%|███████▍  | 37/50 [00:01<00:00, 40.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0321, Validation Loss: 0.0317\n","Epoch [38/50], Training Loss: 0.0321, Validation Loss: 0.0317\n","Epoch [39/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [40/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:01<00:00, 40.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [43/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:01<00:00, 40.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  94%|█████████▍| 47/50 [00:01<00:00, 39.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [46/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [47/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [48/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  94%|█████████▍| 47/50 [00:01<00:00, 39.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0320, Validation Loss: 0.0317\n","Epoch [50/50], Training Loss: 0.0320, Validation Loss: 0.0317\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 39.57it/s]\n","Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0353, Validation Loss: 0.0349\n","Epoch [2/50], Training Loss: 0.0343, Validation Loss: 0.0341\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0336, Validation Loss: 0.0336\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 42.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0330, Validation Loss: 0.0331\n","Epoch [5/50], Training Loss: 0.0325, Validation Loss: 0.0327\n","Epoch [6/50], Training Loss: 0.0321, Validation Loss: 0.0323\n","Epoch [7/50], Training Loss: 0.0317, Validation Loss: 0.0320\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 42.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0314, Validation Loss: 0.0317\n","Epoch [9/50], Training Loss: 0.0311, Validation Loss: 0.0314\n","Epoch [10/50], Training Loss: 0.0308, Validation Loss: 0.0311\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:00<00:00, 48.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0305, Validation Loss: 0.0308\n","Epoch [12/50], Training Loss: 0.0303, Validation Loss: 0.0306\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:00<00:00, 48.33it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0301, Validation Loss: 0.0304\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 48.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0298, Validation Loss: 0.0302\n","Epoch [15/50], Training Loss: 0.0296, Validation Loss: 0.0299\n","Epoch [16/50], Training Loss: 0.0294, Validation Loss: 0.0297\n","Epoch [17/50], Training Loss: 0.0292, Validation Loss: 0.0295\n","Epoch [18/50], Training Loss: 0.0290, Validation Loss: 0.0293\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 48.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0288, Validation Loss: 0.0291\n","Epoch [20/50], Training Loss: 0.0286, Validation Loss: 0.0290\n","Epoch [21/50], Training Loss: 0.0284, Validation Loss: 0.0288\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:00<00:00, 51.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0283, Validation Loss: 0.0286\n","Epoch [23/50], Training Loss: 0.0281, Validation Loss: 0.0285\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:00<00:00, 51.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0280, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0278, Validation Loss: 0.0282\n","Epoch [26/50], Training Loss: 0.0277, Validation Loss: 0.0280\n","Epoch [27/50], Training Loss: 0.0275, Validation Loss: 0.0279\n","Epoch [28/50], Training Loss: 0.0274, Validation Loss: 0.0278\n","Epoch [29/50], Training Loss: 0.0272, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 52.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0271, Validation Loss: 0.0275\n","Epoch [31/50], Training Loss: 0.0270, Validation Loss: 0.0274\n","Epoch [32/50], Training Loss: 0.0269, Validation Loss: 0.0272\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0267, Validation Loss: 0.0271\n","Epoch [34/50], Training Loss: 0.0266, Validation Loss: 0.0270\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0265, Validation Loss: 0.0268\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  80%|████████  | 40/50 [00:00<00:00, 52.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0263, Validation Loss: 0.0267\n","Epoch [37/50], Training Loss: 0.0262, Validation Loss: 0.0265\n","Epoch [38/50], Training Loss: 0.0260, Validation Loss: 0.0264\n","Epoch [39/50], Training Loss: 0.0259, Validation Loss: 0.0263\n","Epoch [40/50], Training Loss: 0.0258, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0256, Validation Loss: 0.0260\n","Epoch [42/50], Training Loss: 0.0255, Validation Loss: 0.0259\n","Epoch [43/50], Training Loss: 0.0254, Validation Loss: 0.0257\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  80%|████████  | 40/50 [00:00<00:00, 52.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0252, Validation Loss: 0.0256\n","Epoch [45/50], Training Loss: 0.0251, Validation Loss: 0.0255\n","Epoch [46/50], Training Loss: 0.0250, Validation Loss: 0.0254\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 51.68it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0249, Validation Loss: 0.0253\n","Epoch [48/50], Training Loss: 0.0248, Validation Loss: 0.0252\n","Epoch [49/50], Training Loss: 0.0247, Validation Loss: 0.0250\n","Epoch [50/50], Training Loss: 0.0246, Validation Loss: 0.0249\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'RMSprop':\n","        optimizer = optim.RMSprop(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"AA_SMALL_best_model_info_CONSIDERATION.pt\"))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1733152912045,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"f4I7VwIEBhBX","outputId":"def2a20f-0fdb-4c6b-bd0e-4ad62153b8ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [8, 16, 8]\n","Optimizer: Adam\n","Best Validation Loss: 0.0011090189218521118\n"]}],"source":["# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1733152912045,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"sjRnr5oDFL5l","outputId":"0d879baf-1c9e-48f1-8660-58da4e82317d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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sMQ/WH322Wd0794dLy8vgoKCuO666zhw4ECRNjt37uTqq68mIiICT09PmjRpwnXXXcfx48cBx89gRkaGcxyaTKYynZvUu3dvWrZsyezZs4vs//zzzxk8eDBBQUElHvfOO+/QsWNHPDw8iIyM5J577inx92nhvzNeXl707NmTFStWlPh8OTk5PP3007Rp08b5O/+RRx4hJyen1PcgUlvoz9EidcCxY8cYMmQI1113HTfeeCPh4eGA4z/iPj4+TJw4ER8fH3766ScmT55MamoqL730UqnPO3v2bNLS0rjjjjswmUz8+9//5qqrrmLPnj2lzmD89ttvzJs3j7vvvhtfX1/efPNNrr76amJjYwkODgZg/fr1DB48mEaNGjF16lQKCgp45plnCA0NLdP7njt3LpmZmdx1110EBwezZs0a3nrrLQ4ePMjcuXOLtC0oKCAmJoZevXrx8ssvs3TpUl555RVat27NXXfdBThCyhVXXMFvv/3GnXfeSfv27fn222+5+eaby9SfG264galTpzJ79mzOPffcIq/91Vdf0bdvX5o1a0ZiYiIffPABo0eP5rbbbiMtLY3//Oc/xMTEsGbNmmJL8UozefJknnvuOYYOHcrQoUNZt24dgwYNIjc3t0i7PXv2MH/+fEaOHEnLli2Jj4/nvffeo3///mzZsoXIyEjat2/PM888w+TJk7n99tvp27cvwBlnWQzD4PLLL+fnn39m/PjxdOvWjUWLFvHwww9z6NAhXnvttSLtyzIuKiorK4sBAwawa9cuJkyYQMuWLZk7dy5jx44lJSWF+++/H4AlS5YwevRoLrnkEl588UUAtm7dysqVK51tpkyZwrRp07j11lvp2bMnqamp/Pnnn6xbt45LL730jH343//+h6enJ9dee22Jj7ds2ZILL7yQn376iaysLHr06EGrVq346quvio2zOXPmEBgYSExMDADx8fGcf/75zpAaGhrKjz/+yPjx40lNTeWBBx4ocvyzzz6L1WrloYceIicnB6vVetbPLzs7m8TExGL7/fz8ihybnJzM0KFDufbaaxk9ejRfffUVd911F1arlVtuuQUo+/cCYPz48cyaNYshQ4Zw6623kp+fz4oVK/j999/p0aOHs11Zxs6dd97J119/zYQJE+jQoQPHjh3jt99+Y+vWrUV+Jk91xx130LhxY1544QXnMr3C36FL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IFarlTfffLNIn//zn/9w/Phxhg0bBkCPHj0IDQ1lxowZRaqbzpo1q1gfr732Wg4dOsT7779f7PWysrKKLdEUqa00cyVSR/Xp04fAwEBuvvlm7rvvPkwmE59++mmNLr8qzZQpU1i8eDEXXHABd911l/M/6Z06dWLDhg1nPTY6OprWrVvz0EMPcejQIfz8/Pjmm28qde7O8OHDueCCC3jsscfYt28fHTp0YN68eeU+Z8HHx4cRI0Y4z7s6dUkgOGY35s2bx5VXXsmwYcPYu3cvM2bMoEOHDs6/VpdV4fW6pk2bxmWXXcbQoUNZv349P/74Y5HZqMLXfeaZZxg3bhx9+vRh48aNfP7558XObWjdujUBAQHMmDEDX19fvL296dWrV4nnkwwfPpyLLrqIJ554gn379tG1a1cWL17Mf//7Xx544IEyl3kuq2XLlpGdnV1s/4gRI7j99tt57733GDt2LH/99RctWrTg66+/ZuXKlbz++uvOmbVbb72VpKQkLr74Ypo0acL+/ft566236Natm/OcoA4dOjBgwAC6d+9OUFAQf/75p7PE99kEBwfz9ddfM2zYMM4991xuvfVWOnToQFxcHLNmzWLXrl288cYbJZa2HzVqFJMnT8bT05Px48cXO1/p//7v//j555/p1asXt912Gx06dCApKYl169axdOlSkpKSKvqxAo7Zp88++6zY/vDw8CLl5yMjI3nxxRfZt28fbdu2Zc6cOWzYsIGZM2c6y2uX9Xtx0UUXcdNNN/Hmm2+yc+dOBg8ejN1uZ8WKFVx00UWlft6nSktLo0mTJlxzzTV07doVHx8fli5dytq1a3nllVcq9Jm89NJLDBkyhN69ezN+/HhnKXZ/f3+mTJlSoec81YoVK5zjOSkpie+++45ffvmF6667jujoaMDx8/jcc88xadIk9u3bx4gRI/D19WXv3r18++233H777Tz00EP89NNPTJgwgZEjR9K2bVvy8/P59NNPncG8UPfu3Vm6dCmvvvoqkZGRtGzZkl69epW5z/3793eG4zMJDQ1l0qRJTJ06lcGDB3P55Zezfft23nnnHc477zznrK67uzvPPfccd9xxBxdffDGjRo1i7969fPTRR8V+L91000189dVX3Hnnnfz8889ccMEFFBQUsG3bNr766isWLVpUpHS/SK1Vg5UJRaQUZyrF3rFjxxLbr1y50jj//PMNLy8vIzIy0njkkUeMRYsWGYDx888/O9udqRR7SWWvOa00+JlKsZdUDrmk8rjLli0zzjnnHMNqtRqtW7c2PvjgA+PBBx80PD09z/ApnLRlyxZj4MCBho+PjxESEmLcdtttzvLMp5YRP71M8Nn6fuzYMeOmm24y/Pz8DH9/f+Omm25yljguSyn2Qj/88IMBGI0aNSpW/txutxsvvPCC0bx5c8PDw8M455xzjO+//77Y98EwSi/FbhiGUVBQYEydOtVo1KiR4eXlZQwYMMDYtGlTsc87OzvbePDBB53tLrjgAmP16tVG//79i5Q8NgxH2f0OHTo4y+IXvveS+piWlmb861//MiIjIw13d3cjKirKeOmll4qU0i58L2UdF6crHJNn2j799FPDMAwjPj7eGDdunBESEmJYrVajc+fOxb5vX3/9tTFo0CAjLCzMsFqtRrNmzYw77rjDOHLkiLPNc889Z/Ts2dMICAgwvLy8jOjoaOP55593lhovzd69e43bbrvNaNasmeHu7m6EhIQYl19+ebEy0qfauXOn8/389ttvJbaJj4837rnnHqNp06aGu7u7ERERYVxyySXGzJkznW3OVFb8bM722Z46Ngp/3/z5559G7969DU9PT6N58+bG9OnTS+xrad8Lw3BcmuCll14yoqOjDavVaoSGhhpDhgwx/vrrryL9K23s5OTkGA8//LDRtWtXw9fX1/D29ja6du1qvPPOO6W+/7N9ZkuXLjUuuOACw8vLy/Dz8zOGDx9ubNmypUibwt8lR48eLfW1Tn29Uzer1XrWcfbNN98YF154oeHt7W14e3sb0dHRxj333GNs377dMAzD2LNnj3HLLbcYrVu3Njw9PY2goCDjoosuMpYuXVrkebZt22b069fP8PLyKna5htOV5RIIhnHm37HTp083oqOjDXd3dyM8PNy46667jOTk5GLt3nnnHaNly5aGh4eH0aNHD+PXX38t8fdSbm6u8eKLLxodO3Y0PDw8jMDAQKN79+7G1KlTjePHjzvbqRS71GYmw6hFf+YWkQZhxIgRFSqDLSLVa8CAASQmJpa4NFFEREqnc65EpFplZWUVub9z504WLFjAgAEDXNMhERERkWqic65EpFq1atWKsWPHOq998u6772K1WnnkkUdc3TURERGRKqVwJSLVavDgwXzxxRfExcXh4eFB7969eeGFF4pdVFJERESkrtM5VyIiIiIiIlVA51yJiIiIiIhUAYUrERERERGRKqBzrkpgt9s5fPgwvr6+mEwmV3dHRERERERcxDAM0tLSiIyMLHYB+NMpXJXg8OHDNG3a1NXdEBERERGRWuLAgQM0adLkrG1qRbh6++23eemll4iLi6Nr16689dZb9OzZ84zt586dy1NPPcW+ffuIiorixRdfZOjQoc7Hx44dy8cff1zkmJiYGBYuXFim/vj6+gKOD9DPz68C76i4vLw8Fi9ezKBBg3B3d6+S55SGQ+NHKkpjRypD40cqQ+NHKqM2jZ/U1FSaNm3qzAhn4/JwNWfOHCZOnMiMGTPo1asXr7/+OjExMWzfvp2wsLBi7VetWsXo0aOZNm0al112GbNnz2bEiBGsW7eOTp06OdsNHjyYjz76yHnfw8OjzH0qXAro5+dXpeHKZrPh5+fn8gEidY/Gj1SUxo5UhsaPVIbGj1RGbRw/ZTldyOUFLV599VVuu+02xo0bR4cOHZgxYwY2m40PP/ywxPZvvPEGgwcP5uGHH6Z9+/Y8++yznHvuuUyfPr1IOw8PDyIiIpxbYGBgTbwdERERERFpoFw6c5Wbm8tff/3FpEmTnPvMZjMDBw5k9erVJR6zevVqJk6cWGRfTEwM8+fPL7Jv+fLlhIWFERgYyMUXX8xzzz1HcHBwic+Zk5NDTk6O835qairgSMx5eXkVeWvFFD5PVT2fNCwaP1JRGjtSGRo/UhkaP1IZtWn8lKcPLg1XiYmJFBQUEB4eXmR/eHg427ZtK/GYuLi4EtvHxcU57w8ePJirrrqKli1bsnv3bh5//HGGDBnC6tWrsVgsxZ5z2rRpTJ06tdj+xYsXY7PZKvLWzmjJkiVV+nzSsGj8SEVp7EhlaPxIZWj8SGXUhvGTmZlZ5rYuP+eqOlx33XXO2507d6ZLly60bt2a5cuXc8kllxRrP2nSpCKzYYUnrQ0aNKhKz7lasmQJl156aa1ZNyp1h8aPVJTGjlSGxo9URnWMn4KCAvLz8zEMo0qeT2qv/Px8Vq1aRZ8+fXBzq77IYjKZsFgsWCyWM55TVbiqrSxcGq5CQkKwWCzEx8cX2R8fH09ERESJx0RERJSrPUCrVq0ICQlh165dJYYrDw+PEgteuLu7V/k/JtXxnNJwaPxIRWnsSGVo/EhlVNX4SU9P5+DBgwpWDYRhGERERHDkyJEaue6szWajUaNGWK3WYo+VZ/y6NFxZrVa6d+/OsmXLGDFiBOC4gO+yZcuYMGFCicf07t2bZcuW8cADDzj3LVmyhN69e5/xdQ4ePMixY8do1KhRVXZfRERERGpAQUEBBw8exGazERoaWiP/2RbXstvtpKen4+PjU+qFeyvDMAxyc3M5evQoe/fuJSoqqlKv5/JlgRMnTuTmm2+mR48e9OzZk9dff52MjAzGjRsHwJgxY2jcuDHTpk0D4P7776d///688sorDBs2jC+//JI///yTmTNnAo6/akydOpWrr76aiIgIdu/ezSOPPEKbNm2IiYlx2fsUERERkYrJy8vDMAxCQ0Px8vJydXekBtjtdnJzc/H09KzWcAXg5eWFu7s7+/fvd75mRbk8XI0aNYqjR48yefJk4uLi6NatGwsXLnQWrYiNjS3ygfbp04fZs2fz5JNP8vjjjxMVFcX8+fOd17iyWCz8888/fPzxx6SkpBAZGcmgQYN49tlny3WtKxERERGpXTRjJdWlqgKcy8MVwIQJE864DHD58uXF9o0cOZKRI0eW2N7Ly4tFixZVZfdERERERERK5fKLCIuIiIiIiNQHClciIiIiInVEixYteP3118vcfvny5ZhMJlJSUqqtT3KSwpWIiIiISBUzmUxn3aZMmVKh5127di233357mdv36dOHI0eO4O/vX6HXKyuFOIdacc6ViIiIiEh9cuTIEeftOXPmMHnyZLZv3+7c5+Pj47xtGAYFBQVlulhuaGhoufphtVrPej1YqVqauRIRERGROsUwDDJz812ylfUixhEREc7N398fk8nkvL9t2zZ8fX358ccf6d69Ox4eHvz222/s3r2bK664gvDwcHx8fDjvvPNYunRpkec9fVmgyWTigw8+4Morr8RmsxEVFcV3333nfPz0GaVZs2YREBDAokWLaN++PT4+PgwePLhIGMzPz+e+++4jICCA4OBgHn30UW6++WbndWkrIjk5mTFjxhAYGIjNZmPIkCHs3LnT+fj+/fsZPnw4gYGBeHt707lzZxYvXuw89oYbbnCW4o+KiuKjjz6qcF+qk2auRERERKROycoroMNk11SH3vJMDDZr1fwX+rHHHuPll1+mVatWBAYGcuDAAYYOHcrzzz+Ph4cHn3zyCcOHD2f79u00a9bsjM8zdepU/v3vf/PSSy/x1ltvccMNN7B//36CgoJKbJ+ZmcnLL7/Mp59+itls5sYbb+Shhx7i888/B+DFF1/k888/56OPPqJ9+/a88cYbzJ8/n4suuqjC73Xs2LHs3LmT7777Dj8/Px599FGGDh3Kli1bcHd355577iE3N5dff/0Vb29vNm3ahMViAeCpp55iy5Yt/Pjjj4SEhLBr1y6ysrIq3JfqpHAlIiIiIuICzzzzDJdeeqnzflBQEF27dnXef/bZZ/n222/57rvvznjZInAEl9GjRwPwwgsv8Oabb7JmzRoGDx5cYvu8vDxmzJhB69atAcdlkZ555hnn42+99RaTJk3iyiuvBGD69OksWLCgwu+zMFStXLmSPn36APD555/TtGlT5s+fz8iRI4mNjeXqq6+mc+fOgGOGLjU1FXBc9/acc86hR48ezsdqK4WrWm7tviSOHM+md6tgQn11EWQRERERL3cLW56JcdlrV5XCsFAoPT2dKVOm8MMPP3DkyBHy8/PJysoiNjb2rM/TpUsX521vb2/8/PxISEg4Y3ubzeYMVgCNGjVytj9+/Djx8fH07NnT+bjFYqF79+7Y7fZyvb9CW7duxc3NjV69ejn3BQcH065dO7Zu3QrAfffdx1133cXixYsZOHAgV155pTNE3XXXXVx99dWsW7eOQYMGMWLECGdIq210zlUtN/m/m7nvi/VsPnzc1V0RERERqRVMJhM2q5tLNpPJVGXvw9vbu8j9hx56iG+//ZYXXniBFStWsGHDBjp37kxubu5Zn8fd3b3Y53O2IFRS+7KeS1Zdbr31Vvbs2cNNN93Exo0b6dmzJzNnzgRgyJAh7N+/n3/9618cPnyYSy65hIceesil/T0ThataLtjbCkBSxtl/qERERESkblu5ciVjx47lyiuvpHPnzkRERLBv374a7YO/vz/h4eGsXbvWua+goIB169ZV+Dnbt29Pfn4+f/zxh3PfsWPH2L59Ox06dHDua9q0KXfeeSfz5s1j4sSJfPzxx87HQkNDufnmm/nss894/fXXncGrttGywFouUOFKREREpEGIiopi3rx5DB8+HJPJxFNPPVXhpXiVce+99zJt2jTatGlDdHQ0b731FsnJyWWatdu4cSO+vr7O+yaTia5du3LFFVdw22238d577+Hr68tjjz1G48aNueKKKwB44IEHGDJkCG3btiU5OZnly5fTrl07ACZPnkz37t3p2LEjOTk5fP/997Rv37563nwlKVzVcpq5EhEREWkYXn31VW655Rb69OlDSEgIjz76qLOoQ0169NFHiYuLY8yYMVgsFm6//XZiYmKc1fvOpl+/fkXuWywW8vPz+eijj7j//vu57LLLyM3NpV+/fixYsMC5RLGgoIB77rmHgwcP4ufnR0xMDFOnTgUc1+qaNGkS+/btw8vLi759+/Lll19W/RuvAibD1Qssa6HU1FT8/f05fvw4fn5+VfKceXl5LFiwgKFDhxZb53o2by7byatLdjC6Z1OmXdWl9AOkXqro+BHR2JHK0PiRyqjK8ZOdnc3evXtp2bIlnp6eVdRDKSu73U779u259tprefbZZ2vsNVNTU/Hz88Nsrv4zmc42xsqTDTRzVcsVLgs8lq6ZKxERERGpfvv372fx4sX079+fnJwcpk+fzt69e7n++utd3bVaTwUtajktCxQRERGRmmQ2m5k1axbnnXceF1xwARs3bmTp0qW19jyn2kQzV7VcoO1EuMpUuBIRERGR6te0aVNWrlzp6m7USZq5quWCfTRzJSIiIiJSFyhc1XKFM1fHs/LIL6j5UpwiIiIiIlI2Cle1XKDNUV3HMCAlK8/FvRERERERkTNRuKrl3Cxm/L0cAStZSwNFRERERGothas6oLBi4DGFKxERERGRWkvhqg4ovNaVZq5ERERERGovhas6IEgzVyIiIiIN0oABA3jggQec91u0aMHrr79+1mNMJhPz58+v9GtX1fM0JApXdYAuJCwiIiJStwwfPpzBgweX+NiKFSswmUz8888/5X7etWvXcvvtt1e2e0VMmTKFbt26Fdt/5MgRhgwZUqWvdbpZs2YREBBQra9RkxSu6oBAhSsRERGROmX8+PEsWbKEgwcPFnvso48+okePHnTp0qXczxsaGorNZquKLpYqIiICDw+PGnmt+kLhqg7QzJWIiIjIKQwDcjNcsxlGmbp42WWXERoayqxZs4rsT09PZ+7cuYwfP55jx44xevRoGjdujM1mo3PnznzxxRdnfd7TlwXu3LmTfv364enpSYcOHViyZEmxYx599FHatm2LzWajVatWPPXUU+TlOS7xM2vWLKZOncrff/+NyWTCZDI5+3z6ssCNGzdy8cUX4+XlRXBwMLfffjvp6enOx8eOHcuIESN4+eWXadSoEcHBwdxz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6elZRT2U2sxut5Oamoqfnx9mc/XPB51tjJUnG2jmqo44taiFiIiIiIjUPgpXdURhuEpWuBIRERERqZUUruoIzVyJiIiIiNRuCld1hPNCwgpXIiIiIiK1ksJVHRHko5krERERadhUh02qS1WNLYWrOsI5c5WpcCUiIiINi8ViASA3V/8PkuqRmZkJUOnKlm5V0RmpfkG6zpWIiIg0UG5ubthsNo4ePYq7u3uNlOYW17Lb7eTm5pKdnV2t32/DMMjMzCQhIYGAgABnkK8ohas6IthH4UpEREQaJpPJRKNGjdi7dy/79+93dXekBhiGQVZWFl5eXphMpmp/vYCAACIiIir9PApXdUTgiWWBx7PyyCuw427RX2xERESk4bBarURFRWlpYAORl5fHr7/+Sr9+/ar9Iubu7u6VnrEqpHBVRwTYrJhMYBiO867CfHV1chEREWlYzGYznp76P1BDYLFYyM/Px9PTs9rDVVXS9EcdYTGbCPByDKzkjDwX90ZERERERE6ncFWHnLyQcI6LeyIiIiIiIqdTuKpDCsOVZq5ERERERGofhas65GQ5ds1ciYiIiIjUNgpXdcjJcKWZKxERERGR2kbhqg7RzJWIiIiISO2lcFWHBHl7AJCUqZkrEREREZHaRuGqDgnydpRi18yViIiIiEjto3BVhzhnrnTOlYiIiIhIraNwVYcE2XTOlYiIiIhIbaVwVYcE+RSGq1wMw3Bxb0RERERE5FQKV3VI4cxVXoFBek6+i3sjIiIiIiKnUriqQ7ysFrzcLYBj9kpERERERGoPhas65uS1rhSuRERERERqE4WrOkbhSkRERESkdlK4qmMCFa5ERERERGolhas6JljhSkRERESkVlK4qmOcywIzFa5ERERERGoThas6xhmu0hWuRERERERqE4WrOkYFLUREREREaieFqzom0KZlgSIiIiIitZHCVR0T7KOZKxERERGR2kjhqo5xzlwpXImIiIiI1CoKV3VMYSn2tOx8cvPtLu6NiIiIiIgUUriqY/y93DGbHLdTdN6ViIiIiEitoXBVx5jNJufSwGNaGigiIiIiUmsoXNVBheXYkxWuRERERERqDYWrOijQWzNXIiIiIiK1jcJVHRSsCwmLiIiIiNQ6Cld1UKDClYiIiIhIraNwVQdp5kpEREREpPZRuKqDnBcSVil2EREREZFaQ+GqDgr2ORGu0hWuRERERERqC4WrOqhw5ipZM1ciIiIiIrWGwlUdFKRS7CIiIiIitY7CVR1UuCwwOSMXwzBc3BsREREREQGFqzqpcFlgvt0gNTvfxb0RERERERFQuKqTPN0teFstgGP2SkREREREXE/hqo4K1HlXIiIiIiK1isJVHaULCYuIiIiI1C61Ily9/fbbtGjRAk9PT3r16sWaNWvO2n7u3LlER0fj6elJ586dWbBgwRnb3nnnnZhMJl5//fUq7rVrFc5caVmgiIiIiEjt4PJwNWfOHCZOnMjTTz/NunXr6Nq1KzExMSQkJJTYftWqVYwePZrx48ezfv16RowYwYgRI9i0aVOxtt9++y2///47kZGR1f02apzKsYuIiIiI1C5uru7Aq6++ym233ca4ceMAmDFjBj/88AMffvghjz32WLH2b7zxBoMHD+bhhx8G4Nlnn2XJkiVMnz6dGTNmONsdOnSIe++9l0WLFjFs2LCz9iEnJ4ecnBzn/dTUVADy8vLIy8ur9HssfK5Tv1ZWgKfjW5eYllVlzym1V1WPH2k4NHakMjR+pDI0fqQyatP4KU8fXBqucnNz+euvv5g0aZJzn9lsZuDAgaxevbrEY1avXs3EiROL7IuJiWH+/PnO+3a7nZtuuomHH36Yjh07ltqPadOmMXXq1GL7Fy9ejM1mK+O7KZslS5ZUyfMkHDIBFjbu2MsC++4qeU6p/apq/EjDo7EjlaHxI5Wh8SOVURvGT2ZmZpnbujRcJSYmUlBQQHh4eJH94eHhbNu2rcRj4uLiSmwfFxfnvP/iiy/i5ubGfffdV6Z+TJo0qUhgS01NpWnTpgwaNAg/P7+yvp2zysvLY8mSJVx66aW4u7tX+vnS/zzI97FbsAWGMXTouVXQQ6nNqnr8SMOhsSOVofEjlaHxI5VRm8ZP4aq2snD5ssCq9tdff/HGG2+wbt06TCZTmY7x8PDAw8Oj2H53d/cq/2ZW1XOG+nkBkJyV7/IBJzWnOsakNAwaO1IZGj9SGRo/Uhm1YfyU5/VdWtAiJCQEi8VCfHx8kf3x8fFERESUeExERMRZ269YsYKEhASaNWuGm5sbbm5u7N+/nwcffJAWLVpUy/twhWAfVQsUEREREalNXBqurFYr3bt3Z9myZc59drudZcuW0bt37xKP6d27d5H24FiLWdj+pptu4p9//mHDhg3OLTIykocffphFixZV35upYYE2XedKRERERKQ2cfmywIkTJ3LzzTfTo0cPevbsyeuvv05GRoazeuCYMWNo3Lgx06ZNA+D++++nf//+vPLKKwwbNowvv/ySP//8k5kzZwIQHBxMcHBwkddwd3cnIiKCdu3a1eybq0bB3o5ljOk5+eTkF+DhZnFxj0REREREGjaXh6tRo0Zx9OhRJk+eTFxcHN26dWPhwoXOohWxsbGYzScn2Pr06cPs2bN58sknefzxx4mKimL+/Pl06tTJVW/BJXw93bCYTRTYDZIz8ojwV7gSEREREXEll4crgAkTJjBhwoQSH1u+fHmxfSNHjmTkyJFlfv59+/ZVsGe1l9lsItBmJTE9h2MZOUT4e7q6SyIiIiIiDZpLz7mSygnydlQuSc5w/cXVREREREQaOoWrOizI21HU4lhGjot7IiIiIiIiCld1WGG4Ujl2ERERERHXU7iqwwrDlcqxi4iIiIi4nsJVHRZ0ohx7UqbClYiIiIiIqylc1WFBNkdBC81ciYiIiIi4nsJVHRbk45i5OpaucCUiIiIi4moKV3VYkO1EQQstCxQRERERcTmFqzpMBS1ERERERGoPhas6zFmKPTMPu91wcW9ERERERBo2has6LNDbUdCiwG6Qmp3n4t6IiIiIiDRsCld1mIebBR8PN0BLA0VEREREXE3hqo7TeVciIiIiIrWDwlUdp3AlIiIiIlI7KFzVcQpXIiIiIiK1g8JVHecMV7rWlYiIiIiISylc1XHOcJWucCUiIiIi4koKV3WclgWKiIiIiNQOCld1XJBNywJFRERERGoDhas6TjNXIiIiIiK1g8JVHReocCUiIiIiUisoXNVxwQpXIiIiIiK1gsJVHRfk4whXmbkFZOcVuLg3IiIiIiINl8JVHefr4Ya7xQRo9kpERERExJUUruo4k8lEoE1LA0VEREREXE3hqh5QxUAREREREddTuKoHFK5ERERERFxP4aoeUDl2ERERERHXU7iqB1SOXURERETE9RSu6gFnQYtMhSsREREREVdRuKoHgk9c6yopXeFKRERERMRVFK7qAc1ciYiIiIi4nsJVPaBzrkREREREXE/hqh4IOrEsMFnhSkRERETEZRSu6oGgE8sCkzNzsdsNF/dGRERERKRhUriqBwqvc2U34HhWnot7IyIiIiLSMClc1QPuFjO+nm4AHNPSQBERERERl1C4qidU1EJERERExLUUruqJQIUrERERERGXUriqJzRzJSIiIiLiWgpX9UTgKRUDRURERESk5ilc1ROF17o6lq5wJSIiIiLiCgpX9UThskDNXImIiIiIuIbCVT1RuCxQpdhFRERERFxD4aqeCD6xLDBZ4UpERERExCUUruqJwpkrVQsUEREREXENhat6ItjbA4BjGTku7omIiIiISMOkcFVPBHq7A5CdZycrt8DFvRERERERaXgUruoJHw83rBbHt1OzVyIiIiIiNU/hqp4wmUzO2avkjDwX90ZEREREpOFRuKpHgnTelYiIiIiIyyhc1SO6kLCIiIiIiOsoXNUjgSfC1bF0hSsRERERkZqmcFWPaOZKRERERMR1FK7qEV1IWERERETEdRSu6pEgHy0LFBERERFxFYWreiTIpmWBIiIiIiKuonBVjwQVFrTQskARERERkRqncFWPFIarZIUrEREREZEap3BVjxSGq5SsPArshot7IyIiIiLSsChc1SMBNncADANSdN6ViIiIiEiNUriqR9wtZvy9HAFL5dhFRERERGqWwlU9U3ghYYUrEREREZGapXBVzwQqXImIiIiIuITCVT1TWNQiSedciYiIiIjUKIWreqbwQsJJ6QpXIiIiIiI1SeGqngny0YWERURERERcQeGqnimcuUrWskARERERkRqlcFXPBKmghYiIiIiISyhc1TMKVyIiIiIirqFwVc8oXImIiIiIuIbCVT1zargyDMPFvRERERERaTgUruqZwnCVk28nM7fAxb0REREREWk4FK7qGZvVgoeb49uqpYEiIiIiIjVH4aqeMZlMOu9KRERERMQFFK7qIYUrEREREZGap3BVDylciYiIiIjUPIWrekjhSkRERESk5ilc1UOBthPhKlPhSkRERESkpihc1UPBhTNX6QpXIiIiIiI1ReGqHgry0cyViIiIiEhNU7iqh4JsOudKRERERKSmKVzVQ4UFLZIVrkREREREakytCFdvv/02LVq0wNPTk169erFmzZqztp87dy7R0dF4enrSuXNnFixYUOTxKVOmEB0djbe3N4GBgQwcOJA//vijOt9CrVIYro4pXImIiIiI1BiXh6s5c+YwceJEnn76adatW0fXrl2JiYkhISGhxParVq1i9OjRjB8/nvXr1zNixAhGjBjBpk2bnG3atm3L9OnT2bhxI7/99hstWrRg0KBBHD16tKbelksVhqvjWXnkFdhd3BsRERERkYbB5eHq1Vdf5bbbbmPcuHF06NCBGTNmYLPZ+PDDD0ts/8YbbzB48GAefvhh2rdvz7PPPsu5557L9OnTnW2uv/56Bg4cSKtWrejYsSOvvvoqqamp/PPPPzX1tlwqwGbFZHLcTsnMc21nREREREQaCDdXvnhubi5//fUXkyZNcu4zm80MHDiQ1atXl3jM6tWrmThxYpF9MTExzJ8//4yvMXPmTPz9/enatWuJbXJycsjJyXHeT01NBSAvL4+8vKoJJ4XPU1XPV5oAL3eSM/NIOJ5BgKfLM7RUUk2PH6k/NHakMjR+pDI0fqQyatP4KU8fXBquEhMTKSgoIDw8vMj+8PBwtm3bVuIxcXFxJbaPi4srsu/777/nuuuuIzMzk0aNGrFkyRJCQkJKfM5p06YxderUYvsXL16MzWYrz1sq1ZIlS8p/kGEABpjKHpLc7RbAxI8//cYuf6P8rym1UoXGjwgaO1I5Gj9SGRo/Uhm1YfxkZmaWua1Lw1V1uuiii9iwYQOJiYm8//77XHvttfzxxx+EhYUVaztp0qQis2Gpqak0bdqUQYMG4efnVyX9ycvLY8mSJVx66aW4u7uX+TjLnOsxxa6i4IZvMSLPKfNxnx5eQ8L+FNp2PochnSIq0mWpRSo6fkQ0dqQyNH6kMjR+pDJq0/gpXNVWFi4NVyEhIVgsFuLj44vsj4+PJyKi5EAQERFRpvbe3t60adOGNm3acP755xMVFcV//vOfIksQC3l4eODh4VFsv7u7e5V/M8v9nPlZkJuOW/JuaN6zzIcFeTvez/Ecu8sHpFSd6hiT0jBo7EhlaPxIZWj8SGXUhvFTntd36ck4VquV7t27s2zZMuc+u93OsmXL6N27d4nH9O7du0h7cEwXnqn9qc976nlVdUZotOPr0a3lOizY58SFhNNVjl1EREREpCa4fFngxIkTufnmm+nRowc9e/bk9ddfJyMjg3HjxgEwZswYGjduzLRp0wC4//776d+/P6+88grDhg3jyy+/5M8//2TmzJkAZGRk8Pzzz3P55ZfTqFEjEhMTefvttzl06BAjR4502fussNB2jq9Ht5frMOeFhDMVrkREREREaoLLw9WoUaM4evQokydPJi4ujm7durFw4UJn0YrY2FjM5pMTbH369GH27Nk8+eSTPP7440RFRTF//nw6deoEgMViYdu2bXz88cckJiYSHBzMeeedx4oVK+jYsaNL3mOlhLV3fD1acoGPMwm0OcJVYnodnK0TEREREamDXB6uACZMmMCECRNKfGz58uXF9o0cOfKMs1Cenp7MmzevKrvnWoXLApP3Q24mWMtWvbBpkKPdvmMZ1dUzERERERE5hS6AVNt5h4AtGDAgcUeZD2sb7gvAroR07HaVYhcRERERqW4KV3VBaOHSwLKfd9UsyIbVzUx2np2DyVnV1DERERERESmkcFUXOItalL1ioMVsonWoDwA74tOqo1ciIiIiInIKhau6wFmOvXwVA6PCHOFqZ0J6VfdIREREREROo3BVF4SdCFcJ5bvWVdvwE+FKM1ciIiIiItVO4aoucFYM3Ad5ZT9/qk2Yo6jFjgSFKxERERGR6qZwVRd4h4JXII6KgTvLfFjhzJUqBoqIiIiIVD+Fq7rAZDqlYmDZLybcLMiG1aKKgSIiIiIiNUHhqq5wVgwse7hys5hpFeoNwE4tDRQRERERqVYKV3VFWPmvdQUQdeJiwjviVTFQRERERKQ6KVzVFYUzV+WtGOgsx66ZKxERERGR6qRwVVc4KwbuhbzsMh8W5SzHrpkrEREREZHqpHBVV/iEg2cAGHY4tqvMhxUuC1TFQBERERGR6qVwVVeYTCdnr8pR1KL5iYqBWXkFHEpRxUARERERkeqicFWXqGKgiIiIiEitpXBVlxRWDCxnUQtVDBQRERERqX4KV3WJc+aqnOXYw1TUQkRERESkuilc1SWF51wl7YH8nDIf1jZc5dhFRERERKpbhcLVgQMHOHjwoPP+mjVreOCBB5g5c2aVdUxK4NsIPPzBKChXxcA2YaoYKCIiIiJS3SoUrq6//np+/vlnAOLi4rj00ktZs2YNTzzxBM8880yVdlBOYTJVqKhFi2Ab7hYTmbmqGCgiIiIiUl0qFK42bdpEz549Afjqq6/o1KkTq1at4vPPP2fWrFlV2T85XVhhOfayn3flZjHTKkRLA0VEREREqlOFwlVeXh4eHh4ALF26lMsvvxyA6Ohojhw5UnW9k+IKz7sqd8VAFbUQEREREalOFQpXHTt2ZMaMGaxYsYIlS5YwePBgAA4fPkxwcHCVdlBOU+GKgSrHLiIiIiJSnSoUrl588UXee+89BgwYwOjRo+natSsA3333nXO5oFST0BPXukraDfm5ZT6ssGLgLi0LFBERERGpFm4VOWjAgAEkJiaSmppKYGCgc//tt9+OzWarss5JCfwiweoLuWmOgFV4YeFSOJcFnqgYaDabqrOXIiIiIiINToVmrrKyssjJyXEGq/379/P666+zfft2wsLCqrSDcpoKVgxsHuztrBh4+LgqBoqIiIiIVLUKhasrrriCTz75BICUlBR69erFK6+8wogRI3j33XertINSgsKKgQllD1fup1YM1HlXIiIiIiJVrkLhat26dfTt2xeAr7/+mvDwcPbv388nn3zCm2++WaUdlBIUVgwsx8wVQJtwlWMXEREREakuFQpXmZmZ+Po6qs8tXryYq666CrPZzPnnn8/+/furtINSgsKiFuWsGNhWFQNFRERERKpNhcJVmzZtmD9/PgcOHGDRokUMGjQIgISEBPz8/Kq0g1KCwnOuju2CgrwyH3ZqUQsREREREalaFQpXkydP5qGHHqJFixb07NmT3r17A45ZrHPOOadKOygl8G8CVh+w50HSnjIf5izHHp+GYRjV1TsRERERkQapQuHqmmuuITY2lj///JNFixY5919yySW89tprVdY5OYNKVgzMyC3g8PHsauqciIiIiEjDVKFwBRAREcE555zD4cOHOXjwIAA9e/YkOjq6yjonZxFasYqBLUO8AdgRr6IWIiIiIiJVqULhym6388wzz+Dv70/z5s1p3rw5AQEBPPvss9jt9qruo5SkAjNXAFEnilrsVLgSEREREalSbhU56IknnuA///kP//d//8cFF1wAwG+//caUKVPIzs7m+eefr9JOSgmcFQPLGa7CfWCjrnUlIiIiIlLVKhSuPv74Yz744AMuv/xy574uXbrQuHFj7r77boWrmlA4c5W4EwrywVK2b2XhzNUOVQwUEREREalSFVoWmJSUVOK5VdHR0SQlJVW6U1IG/k3B3eaoGJi8t8yHqWKgiIiIiEj1qFC46tq1K9OnTy+2f/r06XTp0qXSnZIyMJtPzl4lbC3zYc2DvXEzq2KgiIiIiEhVq9CywH//+98MGzaMpUuXOq9xtXr1ag4cOMCCBQuqtINyFqHRcHg9HN1e5kOsbo6KgTsT0tkZn0bjAK9q7KCIiIiISMNRoZmr/v37s2PHDq688kpSUlJISUnhqquuYvPmzXz66adV3Uc5k8Jy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\n"},"metadata":{}}],"source":["plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1733533499188,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"VUTGXlfOBksa","outputId":"f3c998ac-bd6a-4d90-8c4e-03cdc4f09ac0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.032948708592856535\n","Test R^2 Score: 0.8770179748535156\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/AA_SMALL_best_model_info_CONSIDERATION.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"66pgr1xEymxk"},"source":["## Check with jacobian\n"]},{"cell_type":"code","source":["def FK(model, theta):\n","    t = theta.view(1, 2)\n","    out = model(t)\n","    out = out.view(2)\n","    return out\n","\n","def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(x):\n","        return FK(model, x)\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, x)\n","\n","    return jacobian\n","\n","def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        # Differenze finite centrali\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n","\n","# Analytical Jacobian\n","def analytical_jacobian(joint_angles):\n","    j0, j1 = joint_angles[0], joint_angles[1]\n","    j0 = j0.item()\n","    j1 = j1.item()\n","\n","    # Calculate partial derivatives\n","    dx_dj0 = -L1 * np.sin(j0) - L2 * np.sin(j0 + j1)\n","    dx_dj1 = -L2 * np.sin(j0 + j1)\n","    dy_dj0 = L1 * np.cos(j0) + L2 * np.cos(j0 + j1)\n","    dy_dj1 = L2 * np.cos(j0 + j1)\n","\n","    # Construct the Jacobian matrix\n","    J_analytical = np.array([[dx_dj0, dx_dj1], [dy_dj0, dy_dj1]])\n","    return J_analytical\n"],"metadata":{"id":"Jj82O1IGTsLm","executionInfo":{"status":"ok","timestamp":1733403690857,"user_tz":-60,"elapsed":6,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","execution_count":60,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1172,"status":"ok","timestamp":1733403692024,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"MM3w9JYqyrJM","outputId":"3735b2e5-98dd-4559-ce6c-45fb624e5cf7"},"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[-0.000 -0.000]\n"," [0.014 -0.007]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.086 -0.007]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.100 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.090 -0.088]\n"," [0.115 0.016]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.010 0.012]\n"," [0.015 0.016]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.023 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.077 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.060 -0.026]\n"," [0.041 0.004]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.040 0.074]\n"," [-0.059 0.004]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.122 -0.082]\n"," [0.047 -0.010]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.022 0.018]\n"," [-0.053 -0.010]]\n","------------------------------------------------------------------------------------------\n"]}],"source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/AA_SMALL_best_model_info_CONSIDERATION.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2)], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","\n"]},{"cell_type":"markdown","source":["### Check with metrics"],"metadata":{"id":"qaMg4gyKFCIk"}},{"cell_type":"code","source":["joint_angles = torch.tensor(X_test[['j0', 'j1']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]"],"metadata":{"id":"LkjbXz-96PId","executionInfo":{"status":"ok","timestamp":1733403706765,"user_tz":-60,"elapsed":209,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"a1no35B2FFDJ","executionInfo":{"status":"ok","timestamp":1733403709492,"user_tz":-60,"elapsed":1277,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"cffedd33-a58a-4d3a-fe30-51d37466395a"},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"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+ugjt32XLVuGu+66C9nZ2ZgyZQry8/Px008/4R//+Ae++eYbfPPNN17ZhR9//BHPPfccxo0bh9tvvx0///wzPvnkE/z6668oKysLuwRz2bJluPPOO1FYWIhrrrkGubm5qKysxI4dO/Dxxx9j2rRpko81duxY/O53v8MXX3yBb775BuPGjQu4P8/zmD59Oj799FP06tULd911F5qbm/HBBx/g97//PV588UXcf//9Xs/z950y5s2bh+3bt2PKlClQq9V4//33ceONNyInJwcvv/wy9u7diyuvvBJGoxHvvvsu/vCHP2Dfvn0RzTT+8MMPePrppzFu3DjcdtttXoHU888/j2+++QZ/+MMfMGHCBKjVagDAb7/9hlGjRuHs2bOYMmUK+vXrh7KyMrz55ptYs2YNtmzZgl69enm93rRp0/DLL79g0qRJyM7ORteuXcHzPCZOnIjt27dj5MiRmDRpElQqFY4fP47PPvsMN998c8BMDwsQly5dCsDxWwCA7OxsYZ97770XL7/8Mjp16oRbb70VgCPYnz17Nn7++We89NJLsj+bcMAWICZMmOD12MSJE7Fy5Up8++23GD16tKT9AeDbb78N+rq5ubkAgCNHjsBmswnfayD27duHJ554AuPGjcM111yDtLQ07N+/H++++y7Wrl2LXbt2+fyeli5dik2bNuEPf/gDLrvsMqxevRp/+ctfkJqaip9//hmrV6/GVVddhcsvvxzvv/8+Zs6cieLiYuE9i5FznfNFbW0tRo8ejT179mDkyJG444470NDQgE8//RTjxo3Dhx9+iKuvvhqAI3s4cuRIHDt2DBMmTMA111wDs9mMo0eP4v/9v/+HBx980C2AJghCIjxBEEQEOHr0KA+A7969O79gwQKvf1u3buV5nudXrFjBA+BVKhW/fv16r+PMnj2bB8A/+uijbtvXrl3LA+B79OjB22w2YfvMmTN5AHz79u358vJyYbvJZOJHjx7NA+A/+ugjYfuePXt4jUbDDxw4kK+urnZ7jcWLF/MA+CVLlgjbvvnmGx4AD4B///333fa/+eabeQD8e++957a9S5cufJcuXdy2sXEePXrU6z0vWLCAB8B/8803wrYLL7yQ1+l0fFVVldf+nuP2x5gxY3gAfEVFBf/LL7/wKpWKHzp0KG+324V9zj//fN7z1vDWW2/xAPgxY8bwJpNJ2H78+HE+Ly+P12g0/OHDh4Xtwb5T9t579erFnzlzRti+fft2HgCfnZ3Njxo1im9qahIe++CDD3gA/D333CPpvbIxXH755T7PvwULFvD79u0T9hd/r2+++abX8dh3kpaWxu/evdvr8XHjxvEA+DfeeMNt+6uvvsoD4C+77DK37ey7GDRoEF9TU+P22O7du3kA/NVXX+31OkajkW9sbJT0Gfg673ie57/99lseAN+nTx++rq5O2F5bW8v36tWLB8Bv3rxZ2B7ss5FKRUWFcB75Iy8vj09PT/f52E8//cQD4G+++WZh2/Tp03kA/E8//eTzOenp6XxRUVHQsdntdn7IkCE8AH7UqFH88uXL+V9//ZW3Wq1+n1NXV+f13fE8z2/cuJFXqVT8n//8Z7ft7Bxq166d2+/lxIkTvE6n47Oysrx+E9u2beMB8FOmTHE7ltzrHLsez5w50+04N954Iw+AX758udv2qqoqvqioiG/fvj3f2trK8zzPf/bZZzwA/r777vN6z42NjbzRaPT3UREEEQAKxgiCiAjs5u/v3z//+U+e512T5muuucbrGCaTiTcYDHxubi7f3Nzs9fj48eO9Jo5skvL3v//da//vvvuOB8BfddVVwrZ7773X6xgMm83Gt2/fnh8yZIiwjU1MR48e7bU/e2zevHlu28MVjKWlpfG1tbVe+0tFHIzxPM/PmDGDB8B/8MEHwj6+grHLLruMB8Bv377d65j/+Mc/eAD8k08+KWwL9J3yvOu9v/XWW16PdevWjQfAf/vtt27brVYrr9VqfX7uvmBjCPTv448/FvZn392FF17o83jsO7n//vu9Hjt+/DgPgO/bt69bYMvzjnOod+/ePAD+xIkTwnb2XXz66adex2PB2A033CDpvfrDXzB2yy23eH3vjHfeeYcHwN9yyy3CtmCfjVSkBGNarZbv1KmTz8d+++03HgD/+9//XtjGrgEHDx70+ZyOHTvymZmZksZ39OhRfuTIkW7nSGpqKn/55ZfzK1asCBiYeXLBBRfwxcXFbtvYObRo0SKv/dlvzN9v4rzzznPbJvc65ysYO3v2LK9Wq70WChj/+te/eAD8mjVreJ53BWOeC2MEQYQGyRQJgogoEydORElJSdD9hg0b5rVt//79MBqNGDduHFJTU70eHzduHNavX4/S0lJceumlbo95/g0AI0aMgEajwc8//yxs27ZtGwDgyy+/9Ol6qNVqsX//fq/tQ4YM8drWuXNnAIiIZf/111+Phx56CP3798eNN96IcePGYdSoUcjMzFR8zKeeegoffPAB5s+fj6lTp0Kj8X1L+Pnnn5GamurzO2ISx9LSUq/HfO0vxpebYWFhIY4cOeL1mFqtRn5+Pk6fPh3wmJ4sXrxYloHH0KFDAz7u6z2x9z5mzBivOiqVSoXRo0dj//79KC0tRVFRUdDj9enTBwMGDMB7772HkydP4uqrr8bYsWMxaNAgwbgiFNj578tiPtD3GeyziXeKi4uxZcsWlJaW4uuvv8ZPP/2E77//Hhs2bMCGDRvw9ttv44svvoBerxees2nTJixduhTbt29HdXU1rFar8Jg/4xR/532gx7Zv3+7zWFKvc7748ccfYbPZYDKZfJosHTx4EIDjOnzVVVdh9OjRKCwsxDPPPINffvkFV111FcaMGYM+ffokRDsMgogWFIwRBBETdOjQwWsbqzHy9RjgmsB41iL5e45arUZubq5boXltbS0Ah522HHwFQSyYsdlsso4lhQcffBC5ublYtmwZXnjhBSxZsgQajQZXXnkl/vnPf6Jr166yj3neeefhrrvuwosvvoh///vfuPPOO33u19DQ4BVEMOR+B2ICfYb+HpNjTKCEYGNui/NUo9Fg48aNWLhwIVavXi1Ys7dv3x533303Hn/8cUk1Tf5oaGiASqVC+/btfY6H4zhF32c4yMrK8msEwcYkrkti/x3oOTk5ObLGMGjQILegaNOmTbjpppvwzTff4LXXXhPqIz/88ENcd911SE9Px8SJE1FcXIzU1FTBvMaf0YqS814c5ImRep3zBbv2ff/99/j+++/97tfc3AzA8Vlv27YNTzzxBNasWYN169YBAIqKivDII4/4vX4QBBEYclMkCCIm8LWyyiYmVVVVPp9TWVnptp8YX8+x2Wyoqalxm8yx5zY0NIB3SLd9/gs3YmtuT3xNojiOwy233IIff/wRZ8+exccff4ypU6fi008/xVVXXaU4AHz88ceRnZ2NJ598Ek1NTT73yczMxJkzZ3w+Fug7iMfV8mBjDvd56u/1cnNz8fLLL+PUqVPYu3cvXnnlFbRr1w4LFizAc889F3CMwcjMzITdbsfZs2e9Hjtz5gx4no/a99mzZ080NTUJn5kYlqnp2bOn2/7ix8RUVlaiqanJbX8ljB07Fk899RQAh3sjY+HChTAYDNi5cyc+/PBDPP/881i0aJGwvS2Qep3zBfuOH3jggYDXvgULFgjPOe+887By5UqcPXsWP//8M5599lnY7XbcddddeO+998L75ggiSaBgjCCImKV3794wGAz48ccfvSzmAZeTmi9pz3fffee1bevWrbBarRg8eLCwbfjw4QBccsW2gq3Wnzp1yuuxYPKi3NxcXH311fjggw9w2WWXYe/evTh06JCicbRr1w4PP/wwqqqq8MILL/jcZ/DgwWhpacGOHTu8Hgv0HSQL7L1v3rzZK3DneR6bN292208OHMehT58+uOuuu7B+/XoAwGeffRbSeNn576tvVrS/zzFjxgAAvvrqK6/HvvzyS7d9lOyvlPT0dK9thw8fRp8+fbyCvYqKChw5ciTk15SC1OucL4YOHQqO47B161bZr6tSqTBo0CA89NBDQhAW6nlJEMkKBWMEQcQsOp0ON9xwA6qrq7F48WK3x0pKSvDll1+iR48eGDlypNdzX3rpJZw8eVL4m/WtAhw9ehh33nknNBoN7rnnHp9W3XV1dUGDIyWw+hvPvk4fffSRTyvuTZs2eU30LRaLIDUKZSX+L3/5Czp16oQXXnjBZ73bzJkzAQCPPvqom0ywvLwcL774IjQaDf70pz8pfv1457zzzsO4ceOwZ88evPnmm26P/fvf/8a+fftw2WWX+ZV6enLs2DGf/edYFiTUrAv7PhctWuQmR6yvr8eiRYvc9mlrZs+eDY1Gg3/84x9uGeLS0lK899576NOnj1sri8svvxzdunXDu+++61bnVl9fj6effho6nQ4zZswI+rpHjx7FK6+8gsbGRq/HWlpaBKt/8Wt36dIFhw4dcstOGY1GzJ07N+JyWobU65wvCgoK8Mc//hE//PADnn/+eZ8KgO3btwsLYXv27PGZiQvXeUkQyQrVjBEEEdM8++yz+Pbbb/H3v/8dP/zwA4YPH45jx47hww8/RGpqKlasWOHT1ODiiy/GwIEDcd111yEtLQ1r1qzBgQMHMHXqVLeeXP3798drr72GuXPn4vzzz8fkyZPRvXt3NDY24siRI/j2228xa9YsvP7662F9X3/4wx/QvXt3rFy5EuXl5Rg8eDD27duHjRs3YvLkyUI9BuPqq69GZmYmLr74YnTp0gUWiwXr16/H3r17MX369IB9p4KRkpKChQsXYs6cOT4nozfffDP+97//4dNPP8WAAQNw1VVXCX3Gamtr8cILL6Bbt26KXz+SfP311zAajT4fKygowB133BGW11m2bBlGjRqFOXPmYM2aNejbty/27NmDzz77DO3bt8eyZcskH6u0tBRTp07FsGHD0LdvXxQUFODUqVP45JNPoFKpfPZ0k8Po0aNxzz334OWXX0b//v0xbdo08DyP1atX4+TJk7j33nt99rRSwv79+/HMM88AAFpbW4Vt4kBBvCDRq1cvLFy4EPPnz8fAgQMxbdo0NDY2Cs3Aly9f7vZ712g0+M9//oOJEydi9OjRuP7665GRkYHVq1fj+PHjWLJkiVeza1/U19fjnnvuwV//+leMGjUK/fv3R0pKCk6dOoW1a9eipqYGQ4YMwT333CM855577sE999yDwYMHY/r06bBarVi/fj14nsfAgQPxyy+/hPDJSUPqdc4fr732Gg4cOICHHnoI/+///T+MGDEC2dnZKC8vx08//YSDBw+ioqICqampWL9+Pf76179i5MiR6NWrF3Jzc3HkyBF89tlnMBgMuOuuuyL+fgkiIWlT70aCIJIGZqU8ceLEgPsxC/IVK1b43efs2bP8vffey3fp0oXXarV8Xl4eP336dP7XX3/12pdZPh8+fJh/5pln+B49evA6nY7v0qULv3DhQrc+WWJ27NjBX3/99XzHjh2F17jwwgv5Rx55xGc/qgULFvh9z569fPxZjB89epS/+uqr+YyMDD4tLY2//PLL+R9//NGntf1rr73G//73v+e7dOki2P0PGzaMX7ZsGW82m/1+dmI8re3FWK1Wvk+fPoKltycWi4VfsmQJf8EFF/B6vZ7PyMjgx4wZ49OaPdh3GsjWn43RF/4+R19IsbYfOHCgsH+g75Xnfbcb8OTYsWP87Nmz+cLCQl6j0fCFhYX87Nmz+WPHjsl6n+Xl5fwjjzzCX3zxxXx+fj6v0+n48847j586darQn08KwT6vN998kx86dCifmprKp6am8kOHDvXZRyzYZxMIcY8yf/98sWrVKv6iiy7iU1JS+KysLH7y5Mn8zp07/b7O9u3b+UmTJvGZmZl8SkoKP2zYMK8+gIEwGo386tWr+dtuu40fOHAgn5eXx6vVaj4nJ4cfNWoU/+KLLwr9thh2u51//fXX+X79+vEGg4EvKCjgb731Vv7MmTM+v99A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QRAEQRCJScwFY9dddx2WLFmCJ554AoMGDUJpaSlKSkoEA44TJ06goqJC2H/ZsmUwm82YPn06CgsLhX9LliwR9nnooYdwzz334LbbbsPQoUPR1NSEkpIStzqQd955B71798bll1+OyZMnY9SoUfj3v//ddm88jlm5ciU4jvP5z1c7AiI4x44dEz7D1atXez2+cOFCcByH6urqKIxOHoHOD47jsG3btmgPkSAIgohzbHYeWw/X4NPSU9h6uAY2Ox/tIRGEJGKqZoxx99134+677/b5mGd24tixY0GPx3EcnnzySTz55JN+92nXrl1YGzwnI08++SS6du3qtq1///5RGk34GD16NFpbW6HT6aLy+k8++SSmTp0a94Ybvs4PAOjRo0cURkMQBEEkCiVlFVi0Zi8q6o3CtsIsAxZM6YtJ/alXJBHbxGQwRkjHZuex/WgNzjQakZ9hwLCu7aBWRWfS/rvf/c6rZs8fRqMROp0uLkwkVCpV1Nz0WHb4448/xtSpUyP2Os3NzUhLS4vY8QF55wfDarXCbrf7DIRDHTPP84JjIkEQBBGflJRVYO6qXfDMg1XWGzF31S4su+lCCsiImCb2Z8KEXzYcqMGlz23CDcu34S/vl+KG5dsw6tmNKCmrCP7kNoTVXL3//vuYP38+OnXqhNTUVMHy88MPP8SQIUOQkpKCvLw83HTTTTh16pTPYx05cgQTJ05EWloaOnbsiCeffBI8734JttvtWLp0Kfr16weDwYAOHTrg9ttvx7lz59z2Ky4uxlVXXYUtW7Zg2LBhMBgM6NatG95++22f4xdnZYuLizFr1iyv8Y0dOxZjx4512/byyy+jX79+SE1NRU5ODi666CLJWdjrr78evXr18vk+fSHls7zzzjuRmZmJw4cPY/LkycjIyMCf/vQnAI4s8t13340PP/wQffv2RUpKCkaMGIFff/0VAPDGG2+gR48eMBgMGDt2rKTMtFSYNHPJkiVYunQpunfvDr1ej7179wqyzL179+LGG29ETk4ORo0aBcARsD311FPC/sXFxXjsscfcmrIDru/7yy+/xEUXXYSUlBS88cYbYRs/QRAE0bbY7DwWrdnrFYgBELYtWrOXJItETEOZsTilpKwSD368P6ZWgurr671qmPLy8oT/fuqpp6DT6fDggw/CZDJBp9Nh5cqVmD17NoYOHYrFixejqqoKL730Er7//nv8/PPPyM7OFp5vs9kwadIkXHzxxXjuuedQUlKCBQsWwGq1uklQb7/9duG49957L44ePYpXXnkFP//8M77//ns3q9FDhw5h+vTpuPXWWzFz5ky8+eabmDVrFoYMGYJ+/fqF/JksX74c9957L6ZPn46//OUvMBqN2L17N7Zv344bb7wx6PPVajXmz5+PGTNmBM2OyfksrVYrJk6ciFGjRmHJkiVujcq/++47fPbZZ7jrrrsAOBqcX3XVVXjooYfw2muv4c4778S5c+fw3HPP4ZZbbsHGjRslfRa+zg+O45Cbm+u2bcWKFTAajbjtttug1+vRrl074bFrr70WPXv2xNNPPy0Ep3/+85/x1ltvYfr06XjggQewfft2LF68GPv27cPHH3/sduwDBw7ghhtuwO233445c+bg/PPPlzR2giAIIvbYcbTWTZroCQ+got6IHUdrMaJ7rt/9CCKaUDAWZXieR6vFJus5NjuPRZ/7XwniACz8bC9G9siTLVlM0aoV1yZdccUV3uMRZXOMRiN++uknQRZmsVjw8MMPo3///ti8ebMgBRw1ahSuuuoq/POf/8SiRYvcnj9p0iT861//AuDI8EyZMgXPPvss7r33XuTl5WHLli34z3/+g3feecct2Bk3bhwmTZqEDz/80G37gQMHsHnzZlx66aUAgD/+8Y8oKirCihUr3ExglLJ27Vr069cPH374oeJj3HjjjXjqqafw5JNP4pprrvH5/cj9LE0mE6699losXrzY61gHDhzA/v37UVxcDADIycnB7bffjr///e/47bffkJGRAcARHC9evBjHjh0T9g2Er/NDr9fDaHS/kZ48eRKHDh1C+/btvfYfOHCgW1bxl19+wVtvvYU///nPWL58OQDHeZGfn48lS5bgm2++wbhx44T9Dx06hJKSEkycODHoeAmCIIjY5kyj/0BMyX4EEQ0oGIsyrRYb+j7xZViPyQOobDDigoVfyX7u3icnIlWn7LR49dVX0atXL7+Pz5w5060+56effsKZM2ewcOFCt5qsK6+8Er1798batWvdAggAbsYuTFK3du1afP3117j++uvx4YcfIisrC+PHj3fLwgwZMgTp6en45ptv3IKxvn37CoEYALRv3x7nn38+jhw5ougz8CQ7OxsnT57Ejz/+iKFDhyo6BsuOzZw5E5988gmuueYar32U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\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"H4S6jgxX5LKw","executionInfo":{"status":"ok","timestamp":1733403712762,"user_tz":-60,"elapsed":544,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"cd16da45-c92f-40cc-c7e5-ea02cc3fd793"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["file_path = '/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2.csv'\n","data = pd.read_csv(file_path, delimiter=';')\n","filtered_data = data[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","joint_angles = torch.tensor(X_test[['j0', 'j1']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)\n","\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]\n","\n","\n","frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"a1q80dPQFGRK","executionInfo":{"status":"ok","timestamp":1733403718466,"user_tz":-60,"elapsed":1356,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"d22bff0b-7186-4e80-c001-b7545012a365"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"LJbCGX1N4tvJ","executionInfo":{"status":"ok","timestamp":1733403722741,"user_tz":-60,"elapsed":1235,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"895505d0-b580-425a-fb2d-d9c9cadc7d32"},"execution_count":65,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Inverse Kinematics"],"metadata":{"id":"oXwk-fblWM-O"}},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n"],"metadata":{"id":"2y5EfHN8Webh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/AA_SMALL_best_model_info_CONSIDERATION.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()\n","\n","initial_joints = torch.tensor([0.0, np.pi/4], requires_grad=True)\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QXAe4UlsWwTu","executionInfo":{"status":"ok","timestamp":1733153039711,"user_tz":-60,"elapsed":1208,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"f2f2cd03-1550-45ac-9c73-ae91fa9e407f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([ 0.0810, -0.1370])\n","Newton-Raphson Method:\n","Target joints Newton-Raphson: tensor([ 0.1641, -8.5710])\n","Newton-Raphson Error: 9.541398782175747e-08\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.8523,  0.2254])\n","Levenberg-Marquardt Error: 9.975441207643598e-05\n"," \n","--------------------------------------\n","Comparison target: tensor([ 0.0810, -0.1370]) Value computed by Newton-Raphson Method:  tensor([ 0.0810, -0.1370])\n","Comparison target: tensor([ 0.0810, -0.1370]) Value computed by Levenberg Marquardt:  tensor([ 0.0809, -0.1369])\n"]}]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.5, 0.5]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a11nk24cd86l","executionInfo":{"status":"ok","timestamp":1733153041271,"user_tz":-60,"elapsed":1215,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"a6a6946b-5c3b-437c-aa7a-318ebb7a9116"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([ 0.0810, -0.1370])\n","Newton-Raphson Method:\n","Errore nell'inversione del Jacobiano: torch.linalg.solve: The solver failed because the input matrix is singular.\n","Target joints Newton-Raphson: tensor([-29.7688,  68.1117])\n","Newton-Raphson Error: 0.16708426146545685\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-0.3344, -1.2455])\n","Levenberg-Marquardt Error: 9.592015898752702e-05\n","--------------------------------------\n","Comparison target: tensor([ 0.0810, -0.1370]) Value computed by Newton-Raphson Method:  tensor([0.0024, 0.0104], dtype=torch.float64)\n","Comparison target: tensor([ 0.0810, -0.1370]) Value computed by Levenberg-Marquardt Method:  tensor([ 0.0811, -0.1371], dtype=torch.float64)\n"]}]},{"cell_type":"markdown","metadata":{"id":"J1jWd2_7XacU"},"source":["# 1K\n","What we have done so fa is train the 5 model, the first time with 100K samples and second time with 10K sample, now we have the challenge to learn Forward Kinematics and Jacobian with only 1K samples that correspond 0.1% of the all orginal dataset"]},{"cell_type":"markdown","metadata":{"id":"vpUOwlMmYDdG"},"source":["## Dataset\n"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":298,"status":"ok","timestamp":1733533504407,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"nAH6pjJ6YNYJ","outputId":"8cfc8d55-c7ba-4c7e-bd1c-cd72d230dc6a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset Shape before: (100000, 4)\n","Dataset Shape after: (1000, 4)\n","Training set size: 600\n","Validation set size: 200\n","Test set size: 200\n"]}],"source":["# Create a Reduced Dataset\n","\n","df = pd.read_csv(\"/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2.csv\",sep=';')\n","df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","# Calculate the number of rows to keep (10% of the original dataset)\n","n_keep = int(len(df_filtered) * 0.01)\n","\n","# Randomly sample 10% of the rows\n","df_reduced_filtered = df_filtered.sample(n=n_keep, random_state=42)\n","\n","# Reset the index\n","df_reduced_filtered.reset_index(drop=True, inplace=True)\n","\n","print(f\"Dataset Shape before: {df_filtered.shape}\")\n","print(f\"Dataset Shape after: {df_reduced_filtered.shape}\")\n","\n","# Define features (X) and target (Y)\n","X = df_reduced_filtered[['j0', 'j1']]\n","y = df_reduced_filtered[['ft_x', 'ft_y']]\n","\n","# Split into training+validation and test sets (80% training+validation, 20% test)\n","X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Split the training+validation set into training and validation sets (75% train, 25% validation)\n","X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)\n","\n","# Summary of the splits\n","print(\"Training set size:\", X_train.shape[0])\n","print(\"Validation set size:\", X_val.shape[0])\n","print(\"Test set size:\", X_test.shape[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":519,"status":"ok","timestamp":1732966961731,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"7Yi-jH7vbn6Q","outputId":"5a82ad52-51ae-4711-ff90-1a2e674dd846"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["df_filtered = df[['j0', 'j1', 'ft_x', 'ft_y']]\n","plt.scatter(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], s=1, alpha=0.5, label='Fingertip Positions')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.legend()\n","plt.grid(True)\n","plt.axis('equal')  # Mantieni proporzioni reali per x e y\n","plt.show()"]},{"cell_type":"code","source":["heatmap, xedges, yedges = np.histogram2d(df_reduced_filtered['ft_x'], df_reduced_filtered['ft_y'], bins=50)\n","\n","plt.imshow(heatmap.T, origin='lower', cmap='viridis', aspect='auto')\n","plt.colorbar(label='Density')\n","plt.xlabel('ft_x (Fingertip X Position)')\n","plt.ylabel('ft_y (Fingertip Y Position)')\n","plt.title('Density Heatmap of Fingertip Positions')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"nO_IJ9vv65wN","executionInfo":{"status":"ok","timestamp":1733403848100,"user_tz":-60,"elapsed":782,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"dda04908-0e6f-41ab-881f-6f76a9d0f6a0"},"execution_count":77,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"tG_zuPO6bSbE"},"source":["## Model train and test"]},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10052,"status":"ok","timestamp":1733403744767,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"UN9ZrZgebSCJ","outputId":"e28bb014-f815-4347-ebc1-0b128655e567"},"outputs":[{"output_type":"stream","name":"stdout","text":["Linear Regression RMSE: 0.09016368790242174, R2: 0.05682310115174616\n"," \n","--------------------------------------------------------------\n"," \n","Decision Tree RMSE: 0.019989748468777664, R2: 0.9536147167536568\n"," \n","--------------------------------------------------------------\n"," \n","SVR Best Params: {'estimator__C': 1, 'estimator__epsilon': 0.01, 'estimator__kernel': 'rbf', 'estimator__max_iter': 50}\n","SVR RMSE: 0.01563148583862524, R2: 0.9715017390674723\n"," \n","--------------------------------------------------------------\n"," \n","Random Forest Best Params: {'estimator__max_depth': 12, 'estimator__n_estimators': 150}\n","Random Forest RMSE: 0.013894993971275372, R2: 0.977606161587186\n"," \n","--------------------------------------------------------------\n"," \n","KNN Best Params: {'estimator__n_neighbors': 5, 'estimator__p': 2, 'estimator__weights': 'distance'}\n","KNN RMSE: 0.008859418726954501, R2: 0.9907349453110943\n"," \n","--------------------------------------------------------------\n"," \n"]}],"source":["#-------------------------Linear Regression-------------------------\n","\n","# train\n","lr = MultiOutputRegressor(LinearRegression())\n","lr.fit(X_train, y_train)\n","\n","# test\n","warnings.filterwarnings(\"ignore\")\n","lr_rmse, lr_r2 = evaluate_model(lr, X_test, y_test)\n","print(f\"Linear Regression RMSE: {lr_rmse}, R2: {lr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# ----------------------Decision tree regressor-------------------------\n","\n","# train\n","dt_param_grid = {\n","    'splitter': ['best', 'random'],\n","    'max_depth': [5, 10, 20]\n","}\n","dt = DecisionTreeRegressor()\n","dt_grid = GridSearchCV(dt, dt_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","dt_grid.fit(X_train, y_train)\n","\n","# test\n","best_dt = dt_grid.best_estimator_\n","dt_rmse, dt_r2 = evaluate_model(best_dt, X_test, y_test)\n","print(f\"Decision Tree RMSE: {dt_rmse}, R2: {dt_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","# -----------------------------SVR-----------------------------\n","\n","# train\n","svr_param_grid = {\n","    'estimator__kernel': ['linear', 'rbf'],\n","    'estimator__C': [0.1, 1, 10],\n","    'estimator__epsilon': [0.01, 0.1, 1],\n","    'estimator__max_iter': [50]\n","}\n","svr = MultiOutputRegressor(SVR())\n","svr_grid = GridSearchCV(svr, svr_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","svr_grid.fit(X_train, y_train)\n","\n","\n","# test\n","best_svr = svr_grid.best_estimator_\n","svr_rmse, svr_r2 = evaluate_model(best_svr, X_test, y_test)\n","print(f\"SVR Best Params: {svr_grid.best_params_}\")\n","print(f\"SVR RMSE: {svr_rmse}, R2: {svr_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#---------------------------Random Forest--------------------------\n","\n","# train\n","rf_param_grid = {\n","    'estimator__n_estimators': [100, 150],\n","    'estimator__max_depth': [5, 12]\n","}\n","rf = MultiOutputRegressor(RandomForestRegressor(random_state=42))\n","rf_grid = GridSearchCV(rf, rf_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","rf_grid.fit(X_train, y_train)\n","\n","\n","#test\n","best_rf = rf_grid.best_estimator_\n","rf_rmse, rf_r2 = evaluate_model(best_rf, X_test, y_test)\n","print(f\"Random Forest Best Params: {rf_grid.best_params_}\")\n","print(f\"Random Forest RMSE: {rf_rmse}, R2: {rf_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")\n","\n","#------------------------------------KNN---------------------------------------\n","\n","# train\n","knn_param_grid = {\n","    'estimator__n_neighbors': [3, 5, 10],\n","    'estimator__weights': ['uniform', 'distance'],\n","    'estimator__p': [1, 2]  # 1 = Manhattan, 2 = Euclidean\n","}\n","knn = MultiOutputRegressor(KNeighborsRegressor())\n","knn_grid = GridSearchCV(knn, knn_param_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1)\n","knn_grid.fit(X_train, y_train)\n","\n","#test\n","best_knn = knn_grid.best_estimator_\n","knn_rmse, knn_r2 = evaluate_model(best_knn, X_test, y_test)\n","print(f\"KNN Best Params: {knn_grid.best_params_}\")\n","print(f\"KNN RMSE: {knn_rmse}, R2: {knn_r2}\")\n","print(\" \")\n","print(\"--------------------------------------------------------------\")\n","print(\" \")"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"JVa0Brp5hLka","executionInfo":{"status":"ok","timestamp":1733533509480,"user_tz":-60,"elapsed":282,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["# Conversion of data to PyTorch tensors\n","X_train_tensor = torch.tensor(X_train.values, dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","X_val_tensor = torch.tensor(X_val.values, dtype=torch.float32)\n","y_val_tensor = torch.tensor(y_val.values, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"f9Ldmo5lhgBO","executionInfo":{"status":"ok","timestamp":1733533510230,"user_tz":-60,"elapsed":439,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"outputs":[],"source":["class NeuralNetwork(nn.Module):\n","    def __init__(self, hidden_sizes):\n","        super(NeuralNetwork, self).__init__()\n","        self.layers = nn.ModuleList()\n","\n","        # Input layer\n","        input_size = 2  # two input features: j0 and j1\n","        self.layers.append(nn.Linear(input_size, hidden_sizes[0]))\n","\n","        # Hidden layers\n","        for i in range(1, len(hidden_sizes)):\n","            self.layers.append(nn.Linear(hidden_sizes[i-1], hidden_sizes[i]))\n","\n","        # Output layer\n","        output_size = 2  # output: ft_x and ft_y\n","        self.layers.append(nn.Linear(hidden_sizes[-1], output_size))\n","\n","    def forward(self, x):\n","        for layer in self.layers[:-1]:  # Apply ReLU to all hidden layers\n","            x = torch.relu(layer(x))\n","        x = self.layers[-1](x)\n","        return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EX9qYbFYhtCw"},"outputs":[],"source":["param_grid = {\n","    'learning_rate': [0.01, 0.001, 0.0001],\n","    'hidden_sizes': [[8, 16, 8], [8, 16, 32, 16, 8], [16, 32, 64, 32, 16]],\n","    'optimizer': ['Adam', 'SGD', 'RMSprop']\n","}\n","grid = ParameterGrid(param_grid)\n","\n","epochs = 50\n","best_val_loss = float('inf')\n","save_path = \"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models\"\n","\n","all_train_losses = []\n","all_val_losses = []\n","best_model_info = {\n","    \"epoch\": [],\n","    \"train_loss\": [],\n","    \"val_loss\": [],\n","    \"model_state_dict\": None,\n","    \"optimizer_state_dict\": None,\n","    \"hyperparameters\": {}\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36250,"status":"ok","timestamp":1733153176895,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"zxQjJ8H_hyYH","outputId":"d2ecda89-30aa-4653-bdaa-e7b1447af58c"},"outputs":[{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0105, Validation Loss: 0.0089\n","Epoch [2/50], Training Loss: 0.0083, Validation Loss: 0.0076\n","Epoch [3/50], Training Loss: 0.0074, Validation Loss: 0.0068\n","Epoch [4/50], Training Loss: 0.0069, Validation Loss: 0.0060\n","Epoch [5/50], Training Loss: 0.0064, Validation Loss: 0.0053\n","Epoch [6/50], Training Loss: 0.0058, Validation Loss: 0.0051\n","Epoch [7/50], Training Loss: 0.0055, Validation Loss: 0.0051\n","Epoch [8/50], Training Loss: 0.0054, Validation Loss: 0.0049\n","Epoch [9/50], Training Loss: 0.0052, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0050, Validation Loss: 0.0044\n","Epoch [11/50], Training Loss: 0.0047, Validation Loss: 0.0043\n","Epoch [12/50], Training Loss: 0.0046, Validation Loss: 0.0043\n","Epoch [13/50], Training Loss: 0.0045, Validation Loss: 0.0044\n","Epoch [14/50], Training Loss: 0.0045, Validation Loss: 0.0043\n","Epoch [15/50], Training Loss: 0.0044, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 75.38it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0043, Validation Loss: 0.0041\n","Epoch [17/50], Training Loss: 0.0042, Validation Loss: 0.0040\n","Epoch [18/50], Training Loss: 0.0041, Validation Loss: 0.0039\n","Epoch [19/50], Training Loss: 0.0040, Validation Loss: 0.0037\n","Epoch [20/50], Training Loss: 0.0039, Validation Loss: 0.0036\n","Epoch [21/50], Training Loss: 0.0037, Validation Loss: 0.0035\n","Epoch [22/50], Training Loss: 0.0037, Validation Loss: 0.0034\n","Epoch [23/50], Training Loss: 0.0036, Validation Loss: 0.0033\n","Epoch [24/50], Training Loss: 0.0035, Validation Loss: 0.0032\n","Epoch [25/50], Training Loss: 0.0034, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                               "]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0034, Validation Loss: 0.0032\n","Epoch [27/50], Training Loss: 0.0033, Validation Loss: 0.0032\n","Epoch [28/50], Training Loss: 0.0032, Validation Loss: 0.0032\n","Epoch [29/50], Training Loss: 0.0032, Validation Loss: 0.0032\n","Epoch [30/50], Training Loss: 0.0031, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam:  80%|████████  | 40/50 [00:00<00:00, 75.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0031, Validation Loss: 0.0031\n","Epoch [32/50], Training Loss: 0.0030, Validation Loss: 0.0031\n","Epoch [33/50], Training Loss: 0.0030, Validation Loss: 0.0031\n","Epoch [34/50], Training Loss: 0.0030, Validation Loss: 0.0030\n","Epoch [35/50], Training Loss: 0.0029, Validation Loss: 0.0029\n","Epoch [36/50], Training Loss: 0.0029, Validation Loss: 0.0029\n","Epoch [37/50], Training Loss: 0.0029, Validation Loss: 0.0028\n","Epoch [38/50], Training Loss: 0.0028, Validation Loss: 0.0028\n","Epoch [39/50], Training Loss: 0.0028, Validation Loss: 0.0028\n","Epoch [40/50], Training Loss: 0.0028, Validation Loss: 0.0027\n","Epoch [41/50], Training Loss: 0.0028, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0027, Validation Loss: 0.0027\n","Epoch [43/50], Training Loss: 0.0027, Validation Loss: 0.0026\n","Epoch [44/50], Training Loss: 0.0027, Validation Loss: 0.0026\n","Epoch [45/50], Training Loss: 0.0027, Validation Loss: 0.0026\n","Epoch [46/50], Training Loss: 0.0026, Validation Loss: 0.0026\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 75.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0026, Validation Loss: 0.0026\n","Epoch [48/50], Training Loss: 0.0026, Validation Loss: 0.0026\n","Epoch [49/50], Training Loss: 0.0026, Validation Loss: 0.0026\n","Epoch [50/50], Training Loss: 0.0025, Validation Loss: 0.0025\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0621, Validation Loss: 0.0636\n","Epoch [2/50], Training Loss: 0.0608, Validation Loss: 0.0624\n","Epoch [3/50], Training Loss: 0.0596, Validation Loss: 0.0611\n","Epoch [4/50], Training Loss: 0.0584, Validation Loss: 0.0599\n","Epoch [5/50], Training Loss: 0.0573, Validation Loss: 0.0588\n","Epoch [6/50], Training Loss: 0.0561, Validation Loss: 0.0576\n","Epoch [7/50], Training Loss: 0.0550, Validation Loss: 0.0565\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:00, 78.72it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0539, Validation Loss: 0.0554\n","Epoch [9/50], Training Loss: 0.0529, Validation Loss: 0.0543\n","Epoch [10/50], Training Loss: 0.0518, Validation Loss: 0.0533\n","Epoch [11/50], Training Loss: 0.0508, Validation Loss: 0.0523\n","Epoch [12/50], Training Loss: 0.0498, Validation Loss: 0.0513\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  34%|███▍      | 17/50 [00:00<00:00, 79.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0489, Validation Loss: 0.0503\n","Epoch [14/50], Training Loss: 0.0479, Validation Loss: 0.0494\n","Epoch [15/50], Training Loss: 0.0470, Validation Loss: 0.0484\n","Epoch [16/50], Training Loss: 0.0461, Validation Loss: 0.0475\n","Epoch [17/50], Training Loss: 0.0453, Validation Loss: 0.0467\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  34%|███▍      | 17/50 [00:00<00:00, 79.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0444, Validation Loss: 0.0458\n","Epoch [19/50], Training Loss: 0.0436, Validation Loss: 0.0450\n","Epoch [20/50], Training Loss: 0.0428, Validation Loss: 0.0441\n","Epoch [21/50], Training Loss: 0.0420, Validation Loss: 0.0433\n","Epoch [22/50], Training Loss: 0.0412, Validation Loss: 0.0426\n","Epoch [23/50], Training Loss: 0.0405, Validation Loss: 0.0418\n","Epoch [24/50], Training Loss: 0.0397, Validation Loss: 0.0410\n","Epoch [25/50], Training Loss: 0.0390, Validation Loss: 0.0403\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  54%|█████▍    | 27/50 [00:00<00:00, 87.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0383, Validation Loss: 0.0396\n","Epoch [27/50], Training Loss: 0.0376, Validation Loss: 0.0389\n","Epoch [28/50], Training Loss: 0.0370, Validation Loss: 0.0382\n","Epoch [29/50], Training Loss: 0.0363, Validation Loss: 0.0376\n","Epoch [30/50], Training Loss: 0.0357, Validation Loss: 0.0369\n","Epoch [31/50], Training Loss: 0.0350, Validation Loss: 0.0363\n","Epoch [32/50], Training Loss: 0.0344, Validation Loss: 0.0356\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:00<00:00, 93.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0338, Validation Loss: 0.0350\n","Epoch [34/50], Training Loss: 0.0333, Validation Loss: 0.0344\n","Epoch [35/50], Training Loss: 0.0327, Validation Loss: 0.0339\n","Epoch [36/50], Training Loss: 0.0321, Validation Loss: 0.0333\n","Epoch [37/50], Training Loss: 0.0316, Validation Loss: 0.0327\n","Epoch [38/50], Training Loss: 0.0311, Validation Loss: 0.0322\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0306, Validation Loss: 0.0317\n","Epoch [40/50], Training Loss: 0.0300, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD:  76%|███████▌  | 38/50 [00:00<00:00, 93.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0296, Validation Loss: 0.0307\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0291, Validation Loss: 0.0302\n","Epoch [43/50], Training Loss: 0.0286, Validation Loss: 0.0297\n","Epoch [44/50], Training Loss: 0.0281, Validation Loss: 0.0292\n","Epoch [45/50], Training Loss: 0.0277, Validation Loss: 0.0288\n","Epoch [46/50], Training Loss: 0.0273, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 73.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0268, Validation Loss: 0.0279\n","Epoch [48/50], Training Loss: 0.0264, Validation Loss: 0.0274\n","Epoch [49/50], Training Loss: 0.0260, Validation Loss: 0.0270\n","Epoch [50/50], Training Loss: 0.0256, Validation Loss: 0.0266\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0395, Validation Loss: 0.0486\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0504, Validation Loss: 0.0732\n","Epoch [3/50], Training Loss: 0.0736, Validation Loss: 0.0113\n","Epoch [4/50], Training Loss: 0.0115, Validation Loss: 0.0089\n","Epoch [5/50], Training Loss: 0.0090, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 44.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0081, Validation Loss: 0.0077\n","Epoch [7/50], Training Loss: 0.0076, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 44.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0072, Validation Loss: 0.0072\n","Epoch [9/50], Training Loss: 0.0069, Validation Loss: 0.0069\n","Epoch [10/50], Training Loss: 0.0066, Validation Loss: 0.0065\n","Epoch [11/50], Training Loss: 0.0061, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 44.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0059, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  26%|██▌       | 13/50 [00:00<00:00, 55.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0057, Validation Loss: 0.0059\n","Epoch [14/50], Training Loss: 0.0055, Validation Loss: 0.0057\n","Epoch [15/50], Training Loss: 0.0054, Validation Loss: 0.0056\n","Epoch [16/50], Training Loss: 0.0052, Validation Loss: 0.0055\n","Epoch [17/50], Training Loss: 0.0051, Validation Loss: 0.0053\n","Epoch [18/50], Training Loss: 0.0050, Validation Loss: 0.0052\n","Epoch [19/50], Training Loss: 0.0048, Validation Loss: 0.0051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 61.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0047, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 61.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0046, Validation Loss: 0.0049\n","Epoch [22/50], Training Loss: 0.0046, Validation Loss: 0.0048\n","Epoch [23/50], Training Loss: 0.0045, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  40%|████      | 20/50 [00:00<00:00, 61.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0046, Validation Loss: 0.0047\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0044, Validation Loss: 0.0047\n","Epoch [26/50], Training Loss: 0.0044, Validation Loss: 0.0045\n","Epoch [27/50], Training Loss: 0.0042, Validation Loss: 0.0044\n","Epoch [28/50], Training Loss: 0.0042, Validation Loss: 0.0044\n","Epoch [29/50], Training Loss: 0.0041, Validation Loss: 0.0043\n","Epoch [30/50], Training Loss: 0.0041, Validation Loss: 0.0043\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0040, Validation Loss: 0.0042\n","Epoch [32/50], Training Loss: 0.0040, Validation Loss: 0.0042\n","Epoch [33/50], Training Loss: 0.0039, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0039, Validation Loss: 0.0041\n","Epoch [35/50], Training Loss: 0.0038, Validation Loss: 0.0041\n","Epoch [36/50], Training Loss: 0.0038, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:00<00:00, 59.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0037, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:00<00:00, 61.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0037, Validation Loss: 0.0039\n","Epoch [39/50], Training Loss: 0.0036, Validation Loss: 0.0038\n","Epoch [40/50], Training Loss: 0.0036, Validation Loss: 0.0038\n","Epoch [41/50], Training Loss: 0.0035, Validation Loss: 0.0037\n","Epoch [42/50], Training Loss: 0.0035, Validation Loss: 0.0037\n","Epoch [43/50], Training Loss: 0.0034, Validation Loss: 0.0037\n","Epoch [44/50], Training Loss: 0.0034, Validation Loss: 0.0037\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop:  82%|████████▏ | 41/50 [00:00<00:00, 61.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0034, Validation Loss: 0.0036\n","Epoch [46/50], Training Loss: 0.0034, Validation Loss: 0.0036\n","Epoch [47/50], Training Loss: 0.0033, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 59.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0033, Validation Loss: 0.0036\n","Epoch [49/50], Training Loss: 0.0032, Validation Loss: 0.0034\n","Epoch [50/50], Training Loss: 0.0032, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["\n","Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 54.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.2475, Validation Loss: 0.2375\n","Epoch [2/50], Training Loss: 0.2409, Validation Loss: 0.2312\n","Epoch [3/50], Training Loss: 0.2345, Validation Loss: 0.2250\n","Epoch [4/50], Training Loss: 0.2282, Validation Loss: 0.2190\n","Epoch [5/50], Training Loss: 0.2221, Validation Loss: 0.2131\n","Epoch [6/50], Training Loss: 0.2161, Validation Loss: 0.2074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 54.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.2102, Validation Loss: 0.2017\n","Epoch [8/50], Training Loss: 0.2045, Validation Loss: 0.1963\n","Epoch [9/50], Training Loss: 0.1989, Validation Loss: 0.1909\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 54.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.1935, Validation Loss: 0.1858\n","Epoch [11/50], Training Loss: 0.1883, Validation Loss: 0.1808\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.1832, Validation Loss: 0.1760\n","Epoch [13/50], Training Loss: 0.1783, Validation Loss: 0.1713\n","Epoch [14/50], Training Loss: 0.1736, Validation Loss: 0.1668\n","Epoch [15/50], Training Loss: 0.1690, Validation Loss: 0.1624\n","Epoch [16/50], Training Loss: 0.1646, Validation Loss: 0.1582\n","Epoch [17/50], Training Loss: 0.1603, Validation Loss: 0.1541\n","Epoch [18/50], Training Loss: 0.1561, Validation Loss: 0.1501\n","Epoch [19/50], Training Loss: 0.1521, Validation Loss: 0.1462\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  38%|███▊      | 19/50 [00:00<00:00, 61.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.1481, Validation Loss: 0.1424\n","Epoch [21/50], Training Loss: 0.1443, Validation Loss: 0.1388\n","Epoch [22/50], Training Loss: 0.1406, Validation Loss: 0.1352\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  38%|███▊      | 19/50 [00:00<00:00, 61.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.1370, Validation Loss: 0.1318\n","Epoch [24/50], Training Loss: 0.1335, Validation Loss: 0.1284\n","Epoch [25/50], Training Loss: 0.1301, Validation Loss: 0.1251\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.1268, Validation Loss: 0.1219\n","Epoch [27/50], Training Loss: 0.1236, Validation Loss: 0.1188\n","Epoch [28/50], Training Loss: 0.1205, Validation Loss: 0.1158\n","Epoch [29/50], Training Loss: 0.1174, Validation Loss: 0.1128\n","Epoch [30/50], Training Loss: 0.1145, Validation Loss: 0.1099\n","Epoch [31/50], Training Loss: 0.1115, Validation Loss: 0.1070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:00<00:00, 58.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.1087, Validation Loss: 0.1042\n","Epoch [33/50], Training Loss: 0.1059, Validation Loss: 0.1015\n","Epoch [34/50], Training Loss: 0.1031, Validation Loss: 0.0989\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  66%|██████▌   | 33/50 [00:00<00:00, 58.11it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.1004, Validation Loss: 0.0963\n","Epoch [36/50], Training Loss: 0.0978, Validation Loss: 0.0937\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0952, Validation Loss: 0.0912\n","Epoch [38/50], Training Loss: 0.0927, Validation Loss: 0.0888\n","Epoch [39/50], Training Loss: 0.0902, Validation Loss: 0.0863\n","Epoch [40/50], Training Loss: 0.0878, Validation Loss: 0.0840\n","Epoch [41/50], Training Loss: 0.0854, Validation Loss: 0.0816\n","Epoch [42/50], Training Loss: 0.0830, Validation Loss: 0.0793\n","Epoch [43/50], Training Loss: 0.0807, Validation Loss: 0.0771\n","Epoch [44/50], Training Loss: 0.0784, Validation Loss: 0.0748\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0762, Validation Loss: 0.0726\n","Epoch [46/50], Training Loss: 0.0739, Validation Loss: 0.0704\n","Epoch [47/50], Training Loss: 0.0717, Validation Loss: 0.0682\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:00<00:00, 61.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0695, Validation Loss: 0.0660\n","Epoch [49/50], Training Loss: 0.0674, Validation Loss: 0.0637\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 58.63it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0652, Validation Loss: 0.0615\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0229, Validation Loss: 0.0198\n","Epoch [2/50], Training Loss: 0.0228, Validation Loss: 0.0198\n","Epoch [3/50], Training Loss: 0.0228, Validation Loss: 0.0198\n","Epoch [4/50], Training Loss: 0.0227, Validation Loss: 0.0197\n","Epoch [5/50], Training Loss: 0.0227, Validation Loss: 0.0197\n","Epoch [6/50], Training Loss: 0.0226, Validation Loss: 0.0196\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:00, 72.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0226, Validation Loss: 0.0196\n","Epoch [8/50], Training Loss: 0.0226, Validation Loss: 0.0196\n","Epoch [9/50], Training Loss: 0.0225, Validation Loss: 0.0195\n","Epoch [10/50], Training Loss: 0.0225, Validation Loss: 0.0195\n","Epoch [11/50], Training Loss: 0.0224, Validation Loss: 0.0194\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  16%|█▌        | 8/50 [00:00<00:00, 72.40it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0224, Validation Loss: 0.0194\n","Epoch [13/50], Training Loss: 0.0223, Validation Loss: 0.0194\n","Epoch [14/50], Training Loss: 0.0223, Validation Loss: 0.0193\n","Epoch [15/50], Training Loss: 0.0223, Validation Loss: 0.0193\n","Epoch [16/50], Training Loss: 0.0222, Validation Loss: 0.0193\n","Epoch [17/50], Training Loss: 0.0222, Validation Loss: 0.0192\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0221, Validation Loss: 0.0192\n","Epoch [19/50], Training Loss: 0.0221, Validation Loss: 0.0191\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 93.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0221, Validation Loss: 0.0191\n","Epoch [21/50], Training Loss: 0.0220, Validation Loss: 0.0191\n","Epoch [22/50], Training Loss: 0.0220, Validation Loss: 0.0190\n","Epoch [23/50], Training Loss: 0.0219, Validation Loss: 0.0190\n","Epoch [24/50], Training Loss: 0.0219, Validation Loss: 0.0190\n","Epoch [25/50], Training Loss: 0.0219, Validation Loss: 0.0189\n","Epoch [26/50], Training Loss: 0.0218, Validation Loss: 0.0189\n","Epoch [27/50], Training Loss: 0.0218, Validation Loss: 0.0189\n","Epoch [28/50], Training Loss: 0.0217, Validation Loss: 0.0188\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 103.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0217, Validation Loss: 0.0188\n","Epoch [30/50], Training Loss: 0.0217, Validation Loss: 0.0187\n","Epoch [31/50], Training Loss: 0.0216, Validation Loss: 0.0187\n","Epoch [32/50], Training Loss: 0.0216, Validation Loss: 0.0187\n","Epoch [33/50], Training Loss: 0.0216, Validation Loss: 0.0186\n","Epoch [34/50], Training Loss: 0.0215, Validation Loss: 0.0186\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 103.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0215, Validation Loss: 0.0186\n","Epoch [36/50], Training Loss: 0.0214, Validation Loss: 0.0185\n","Epoch [37/50], Training Loss: 0.0214, Validation Loss: 0.0185\n","Epoch [38/50], Training Loss: 0.0214, Validation Loss: 0.0185\n","Epoch [39/50], Training Loss: 0.0213, Validation Loss: 0.0184\n","Epoch [40/50], Training Loss: 0.0213, Validation Loss: 0.0184\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 103.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0212, Validation Loss: 0.0184\n","Epoch [42/50], Training Loss: 0.0212, Validation Loss: 0.0183\n","Epoch [43/50], Training Loss: 0.0212, Validation Loss: 0.0183\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 104.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0211, Validation Loss: 0.0183\n","Epoch [45/50], Training Loss: 0.0211, Validation Loss: 0.0182\n","Epoch [46/50], Training Loss: 0.0211, Validation Loss: 0.0182\n","Epoch [47/50], Training Loss: 0.0210, Validation Loss: 0.0182\n","Epoch [48/50], Training Loss: 0.0210, Validation Loss: 0.0181\n","Epoch [49/50], Training Loss: 0.0210, Validation Loss: 0.0181\n","Epoch [50/50], Training Loss: 0.0209, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0816, Validation Loss: 0.0556\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0544, Validation Loss: 0.0422\n","Epoch [3/50], Training Loss: 0.0411, Validation Loss: 0.0327\n","Epoch [4/50], Training Loss: 0.0317, Validation Loss: 0.0255\n","Epoch [5/50], Training Loss: 0.0248, Validation Loss: 0.0205\n","Epoch [6/50], Training Loss: 0.0200, Validation Loss: 0.0170\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:00, 89.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0165, Validation Loss: 0.0144\n","Epoch [8/50], Training Loss: 0.0140, Validation Loss: 0.0126\n","Epoch [9/50], Training Loss: 0.0123, Validation Loss: 0.0113\n","Epoch [10/50], Training Loss: 0.0111, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0103, Validation Loss: 0.0098\n","Epoch [12/50], Training Loss: 0.0098, Validation Loss: 0.0094\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 91.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0095, Validation Loss: 0.0091\n","Epoch [14/50], Training Loss: 0.0092, Validation Loss: 0.0089\n","Epoch [15/50], Training Loss: 0.0090, Validation Loss: 0.0087\n","Epoch [16/50], Training Loss: 0.0088, Validation Loss: 0.0085\n","Epoch [17/50], Training Loss: 0.0087, Validation Loss: 0.0084\n","Epoch [18/50], Training Loss: 0.0085, Validation Loss: 0.0082\n","Epoch [19/50], Training Loss: 0.0084, Validation Loss: 0.0081\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 91.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0083, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 91.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0082, Validation Loss: 0.0079\n","Epoch [22/50], Training Loss: 0.0081, Validation Loss: 0.0078\n","Epoch [23/50], Training Loss: 0.0081, Validation Loss: 0.0078\n","Epoch [24/50], Training Loss: 0.0080, Validation Loss: 0.0077\n","Epoch [25/50], Training Loss: 0.0079, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 91.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [27/50], Training Loss: 0.0078, Validation Loss: 0.0075\n","Epoch [28/50], Training Loss: 0.0078, Validation Loss: 0.0075\n","Epoch [29/50], Training Loss: 0.0077, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 91.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0076, Validation Loss: 0.0074\n","Epoch [31/50], Training Loss: 0.0076, Validation Loss: 0.0073\n","Epoch [32/50], Training Loss: 0.0076, Validation Loss: 0.0073\n","Epoch [33/50], Training Loss: 0.0075, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 91.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0075, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0074, Validation Loss: 0.0072\n","Epoch [36/50], Training Loss: 0.0074, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 91.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0073, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 91.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0073, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:00<00:00, 49.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0073, Validation Loss: 0.0071\n","Epoch [40/50], Training Loss: 0.0072, Validation Loss: 0.0071\n","Epoch [41/50], Training Loss: 0.0072, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 60.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0072, Validation Loss: 0.0070\n","Epoch [43/50], Training Loss: 0.0071, Validation Loss: 0.0070\n","Epoch [44/50], Training Loss: 0.0071, Validation Loss: 0.0069\n","Epoch [45/50], Training Loss: 0.0071, Validation Loss: 0.0069\n","Epoch [46/50], Training Loss: 0.0070, Validation Loss: 0.0069\n","Epoch [47/50], Training Loss: 0.0070, Validation Loss: 0.0069\n","Epoch [48/50], Training Loss: 0.0070, Validation Loss: 0.0069\n","Epoch [49/50], Training Loss: 0.0069, Validation Loss: 0.0068\n","Epoch [50/50], Training Loss: 0.0069, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0568, Validation Loss: 0.0529\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0567, Validation Loss: 0.0528\n","Epoch [3/50], Training Loss: 0.0565, Validation Loss: 0.0526\n","Epoch [4/50], Training Loss: 0.0564, Validation Loss: 0.0525\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  14%|█▍        | 7/50 [00:00<00:00, 63.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0562, Validation Loss: 0.0523\n","Epoch [6/50], Training Loss: 0.0561, Validation Loss: 0.0522\n","Epoch [7/50], Training Loss: 0.0559, Validation Loss: 0.0520\n","Epoch [8/50], Training Loss: 0.0558, Validation Loss: 0.0519\n","Epoch [9/50], Training Loss: 0.0556, Validation Loss: 0.0518\n","Epoch [10/50], Training Loss: 0.0555, Validation Loss: 0.0516\n","Epoch [11/50], Training Loss: 0.0553, Validation Loss: 0.0515\n","Epoch [12/50], Training Loss: 0.0552, Validation Loss: 0.0513\n","Epoch [13/50], Training Loss: 0.0550, Validation Loss: 0.0512\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:00, 59.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0549, Validation Loss: 0.0510\n","Epoch [15/50], Training Loss: 0.0547, Validation Loss: 0.0509\n","Epoch [16/50], Training Loss: 0.0546, Validation Loss: 0.0508\n","Epoch [17/50], Training Loss: 0.0544, Validation Loss: 0.0506\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  42%|████▏     | 21/50 [00:00<00:00, 60.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0543, Validation Loss: 0.0505\n","Epoch [19/50], Training Loss: 0.0542, Validation Loss: 0.0503\n","Epoch [20/50], Training Loss: 0.0540, Validation Loss: 0.0502\n","Epoch [21/50], Training Loss: 0.0539, Validation Loss: 0.0500\n","Epoch [22/50], Training Loss: 0.0537, Validation Loss: 0.0499\n","Epoch [23/50], Training Loss: 0.0536, Validation Loss: 0.0498\n","Epoch [24/50], Training Loss: 0.0534, Validation Loss: 0.0496\n","Epoch [25/50], Training Loss: 0.0533, Validation Loss: 0.0495\n","Epoch [26/50], Training Loss: 0.0531, Validation Loss: 0.0494\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  56%|█████▌    | 28/50 [00:00<00:00, 61.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0530, Validation Loss: 0.0492\n","Epoch [28/50], Training Loss: 0.0529, Validation Loss: 0.0491\n","Epoch [29/50], Training Loss: 0.0527, Validation Loss: 0.0489\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 62.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0526, Validation Loss: 0.0488\n","Epoch [31/50], Training Loss: 0.0524, Validation Loss: 0.0487\n","Epoch [32/50], Training Loss: 0.0523, Validation Loss: 0.0485\n","Epoch [33/50], Training Loss: 0.0522, Validation Loss: 0.0484\n","Epoch [34/50], Training Loss: 0.0520, Validation Loss: 0.0483\n","Epoch [35/50], Training Loss: 0.0519, Validation Loss: 0.0481\n","Epoch [36/50], Training Loss: 0.0517, Validation Loss: 0.0480\n","Epoch [37/50], Training Loss: 0.0516, Validation Loss: 0.0479\n","Epoch [38/50], Training Loss: 0.0515, Validation Loss: 0.0477\n","Epoch [39/50], Training Loss: 0.0513, Validation Loss: 0.0476\n","Epoch [40/50], Training Loss: 0.0512, Validation Loss: 0.0475\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 63.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0511, Validation Loss: 0.0473\n","Epoch [42/50], Training Loss: 0.0509, Validation Loss: 0.0472\n","Epoch [43/50], Training Loss: 0.0508, Validation Loss: 0.0471\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:00<00:00, 62.44it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0506, Validation Loss: 0.0469\n","Epoch [45/50], Training Loss: 0.0505, Validation Loss: 0.0468\n","Epoch [46/50], Training Loss: 0.0504, Validation Loss: 0.0467\n","Epoch [47/50], Training Loss: 0.0502, Validation Loss: 0.0466\n","Epoch [48/50], Training Loss: 0.0501, Validation Loss: 0.0464\n","Epoch [49/50], Training Loss: 0.0500, Validation Loss: 0.0463\n","Epoch [50/50], Training Loss: 0.0498, Validation Loss: 0.0462\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.1794, Validation Loss: 0.1930\n","Epoch [2/50], Training Loss: 0.1793, Validation Loss: 0.1929\n","Epoch [3/50], Training Loss: 0.1792, Validation Loss: 0.1928\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.1791, Validation Loss: 0.1927\n","Epoch [5/50], Training Loss: 0.1790, Validation Loss: 0.1926\n","Epoch [6/50], Training Loss: 0.1789, Validation Loss: 0.1925\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:00, 76.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.1788, Validation Loss: 0.1924\n","Epoch [8/50], Training Loss: 0.1787, Validation Loss: 0.1923\n","Epoch [9/50], Training Loss: 0.1786, Validation Loss: 0.1922\n","Epoch [10/50], Training Loss: 0.1785, Validation Loss: 0.1921\n","Epoch [11/50], Training Loss: 0.1785, Validation Loss: 0.1920\n","Epoch [12/50], Training Loss: 0.1784, Validation Loss: 0.1919\n","Epoch [13/50], Training Loss: 0.1783, Validation Loss: 0.1918\n","Epoch [14/50], Training Loss: 0.1782, Validation Loss: 0.1917\n","Epoch [15/50], Training Loss: 0.1781, Validation Loss: 0.1916\n","Epoch [16/50], Training Loss: 0.1780, Validation Loss: 0.1915\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:00, 76.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.1779, Validation Loss: 0.1914\n","Epoch [18/50], Training Loss: 0.1778, Validation Loss: 0.1913\n","Epoch [19/50], Training Loss: 0.1777, Validation Loss: 0.1912\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  32%|███▏      | 16/50 [00:00<00:00, 76.29it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.1776, Validation Loss: 0.1911\n","Epoch [21/50], Training Loss: 0.1775, Validation Loss: 0.1910\n","Epoch [22/50], Training Loss: 0.1774, Validation Loss: 0.1909\n","Epoch [23/50], Training Loss: 0.1774, Validation Loss: 0.1908\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.1773, Validation Loss: 0.1907\n","Epoch [25/50], Training Loss: 0.1772, Validation Loss: 0.1906\n","Epoch [26/50], Training Loss: 0.1771, Validation Loss: 0.1905\n","Epoch [27/50], Training Loss: 0.1770, Validation Loss: 0.1904\n","Epoch [28/50], Training Loss: 0.1769, Validation Loss: 0.1903\n","Epoch [29/50], Training Loss: 0.1768, Validation Loss: 0.1902\n","Epoch [30/50], Training Loss: 0.1767, Validation Loss: 0.1901\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 80.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.1766, Validation Loss: 0.1900\n","Epoch [32/50], Training Loss: 0.1765, Validation Loss: 0.1899\n","Epoch [33/50], Training Loss: 0.1764, Validation Loss: 0.1898\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.1764, Validation Loss: 0.1897\n","Epoch [35/50], Training Loss: 0.1763, Validation Loss: 0.1896\n","Epoch [36/50], Training Loss: 0.1762, Validation Loss: 0.1895\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:00<00:00, 69.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.1761, Validation Loss: 0.1894\n","Epoch [38/50], Training Loss: 0.1760, Validation Loss: 0.1893\n","Epoch [39/50], Training Loss: 0.1759, Validation Loss: 0.1892\n","Epoch [40/50], Training Loss: 0.1758, Validation Loss: 0.1891\n","Epoch [41/50], Training Loss: 0.1757, Validation Loss: 0.1890\n","Epoch [42/50], Training Loss: 0.1756, Validation Loss: 0.1889\n","Epoch [43/50], Training Loss: 0.1755, Validation Loss: 0.1888\n","Epoch [44/50], Training Loss: 0.1754, Validation Loss: 0.1887\n","Epoch [45/50], Training Loss: 0.1754, Validation Loss: 0.1886\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:00<00:00, 69.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.1753, Validation Loss: 0.1885\n","Epoch [47/50], Training Loss: 0.1752, Validation Loss: 0.1884\n","Epoch [48/50], Training Loss: 0.1751, Validation Loss: 0.1883\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 72.49it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.1750, Validation Loss: 0.1882\n","Epoch [50/50], Training Loss: 0.1749, Validation Loss: 0.1881\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0947, Validation Loss: 0.0934\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:00, 88.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0925, Validation Loss: 0.0918\n","Epoch [3/50], Training Loss: 0.0910, Validation Loss: 0.0905\n","Epoch [4/50], Training Loss: 0.0897, Validation Loss: 0.0894\n","Epoch [5/50], Training Loss: 0.0886, Validation Loss: 0.0884\n","Epoch [6/50], Training Loss: 0.0877, Validation Loss: 0.0875\n","Epoch [7/50], Training Loss: 0.0868, Validation Loss: 0.0867\n","Epoch [8/50], Training Loss: 0.0861, Validation Loss: 0.0859\n","Epoch [9/50], Training Loss: 0.0853, Validation Loss: 0.0852\n","Epoch [10/50], Training Loss: 0.0846, Validation Loss: 0.0845\n","Epoch [11/50], Training Loss: 0.0840, Validation Loss: 0.0839\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0834, Validation Loss: 0.0833\n","Epoch [13/50], Training Loss: 0.0828, Validation Loss: 0.0827\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:00, 88.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0822, Validation Loss: 0.0822\n","Epoch [15/50], Training Loss: 0.0817, Validation Loss: 0.0816\n","Epoch [16/50], Training Loss: 0.0812, Validation Loss: 0.0811\n","Epoch [17/50], Training Loss: 0.0807, Validation Loss: 0.0806\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                    "]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0802, Validation Loss: 0.0801\n","Epoch [19/50], Training Loss: 0.0797, Validation Loss: 0.0796\n","Epoch [20/50], Training Loss: 0.0793, Validation Loss: 0.0792\n","Epoch [21/50], Training Loss: 0.0788, Validation Loss: 0.0787\n","Epoch [22/50], Training Loss: 0.0784, Validation Loss: 0.0783\n","Epoch [23/50], Training Loss: 0.0780, Validation Loss: 0.0779\n","Epoch [24/50], Training Loss: 0.0776, Validation Loss: 0.0775\n","Epoch [25/50], Training Loss: 0.0772, Validation Loss: 0.0771\n","Epoch [26/50], Training Loss: 0.0768, Validation Loss: 0.0767\n","Epoch [27/50], Training Loss: 0.0764, Validation Loss: 0.0763\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 77.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0760, Validation Loss: 0.0759\n","Epoch [29/50], Training Loss: 0.0757, Validation Loss: 0.0755\n","Epoch [30/50], Training Loss: 0.0753, Validation Loss: 0.0752\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  52%|█████▏    | 26/50 [00:00<00:00, 77.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0750, Validation Loss: 0.0748\n","Epoch [32/50], Training Loss: 0.0746, Validation Loss: 0.0745\n","Epoch [33/50], Training Loss: 0.0743, Validation Loss: 0.0741\n","Epoch [34/50], Training Loss: 0.0739, Validation Loss: 0.0738\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 71.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0736, Validation Loss: 0.0734\n","Epoch [36/50], Training Loss: 0.0733, Validation Loss: 0.0731\n","Epoch [37/50], Training Loss: 0.0730, Validation Loss: 0.0728\n","Epoch [38/50], Training Loss: 0.0726, Validation Loss: 0.0724\n","Epoch [39/50], Training Loss: 0.0723, Validation Loss: 0.0721\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                    "]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0720, Validation Loss: 0.0718\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:00<00:00, 63.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0717, Validation Loss: 0.0715\n","Epoch [42/50], Training Loss: 0.0714, Validation Loss: 0.0712\n","Epoch [43/50], Training Loss: 0.0711, Validation Loss: 0.0709\n","Epoch [44/50], Training Loss: 0.0708, Validation Loss: 0.0706\n","Epoch [45/50], Training Loss: 0.0705, Validation Loss: 0.0703\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 67.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0703, Validation Loss: 0.0700\n","Epoch [47/50], Training Loss: 0.0700, Validation Loss: 0.0697\n","Epoch [48/50], Training Loss: 0.0697, Validation Loss: 0.0694\n","Epoch [49/50], Training Loss: 0.0694, Validation Loss: 0.0692\n","Epoch [50/50], Training Loss: 0.0691, Validation Loss: 0.0689\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0734, Validation Loss: 0.0439\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0450, Validation Loss: 0.0208\n","Epoch [3/50], Training Loss: 0.0218, Validation Loss: 0.0135\n","Epoch [4/50], Training Loss: 0.0140, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0230, Validation Loss: 0.0209\n","Epoch [6/50], Training Loss: 0.0208, Validation Loss: 0.0134\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 33.70it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0137, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 27.45it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0098, Validation Loss: 0.0089\n","Epoch [9/50], Training Loss: 0.0094, Validation Loss: 0.0100\n","Epoch [10/50], Training Loss: 0.0105, Validation Loss: 0.0108\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:01, 35.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0114, Validation Loss: 0.0110\n","Epoch [12/50], Training Loss: 0.0116, Validation Loss: 0.0104\n","Epoch [13/50], Training Loss: 0.0110, Validation Loss: 0.0095\n","Epoch [14/50], Training Loss: 0.0100, Validation Loss: 0.0087\n","Epoch [15/50], Training Loss: 0.0091, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:01, 35.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0086, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 36.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0087, Validation Loss: 0.0089\n","Epoch [18/50], Training Loss: 0.0090, Validation Loss: 0.0091\n","Epoch [19/50], Training Loss: 0.0091, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 36.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0089, Validation Loss: 0.0084\n","Epoch [21/50], Training Loss: 0.0084, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0079, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:00<00:00, 30.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0076, Validation Loss: 0.0073\n","Epoch [24/50], Training Loss: 0.0075, Validation Loss: 0.0073\n","Epoch [25/50], Training Loss: 0.0076, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  58%|█████▊    | 29/50 [00:00<00:00, 39.42it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0076, Validation Loss: 0.0072\n","Epoch [27/50], Training Loss: 0.0076, Validation Loss: 0.0072\n","Epoch [28/50], Training Loss: 0.0075, Validation Loss: 0.0070\n","Epoch [29/50], Training Loss: 0.0074, Validation Loss: 0.0069\n","Epoch [30/50], Training Loss: 0.0072, Validation Loss: 0.0067\n","Epoch [31/50], Training Loss: 0.0070, Validation Loss: 0.0066\n","Epoch [32/50], Training Loss: 0.0069, Validation Loss: 0.0065\n","Epoch [33/50], Training Loss: 0.0067, Validation Loss: 0.0064\n","Epoch [34/50], Training Loss: 0.0066, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 44.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0065, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 44.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0064, Validation Loss: 0.0062\n","Epoch [37/50], Training Loss: 0.0063, Validation Loss: 0.0060\n","Epoch [38/50], Training Loss: 0.0061, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:01<00:00, 48.05it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0059, Validation Loss: 0.0057\n","Epoch [40/50], Training Loss: 0.0058, Validation Loss: 0.0056\n","Epoch [41/50], Training Loss: 0.0056, Validation Loss: 0.0055\n","Epoch [42/50], Training Loss: 0.0055, Validation Loss: 0.0053\n","Epoch [43/50], Training Loss: 0.0053, Validation Loss: 0.0052\n","Epoch [44/50], Training Loss: 0.0052, Validation Loss: 0.0051\n","Epoch [45/50], Training Loss: 0.0050, Validation Loss: 0.0049\n","Epoch [46/50], Training Loss: 0.0049, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:01<00:00, 50.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0047, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 42.61it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0046, Validation Loss: 0.0045\n","Epoch [49/50], Training Loss: 0.0044, Validation Loss: 0.0043\n","Epoch [50/50], Training Loss: 0.0043, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0214, Validation Loss: 0.0210\n","Epoch [2/50], Training Loss: 0.0210, Validation Loss: 0.0206\n","Epoch [3/50], Training Loss: 0.0206, Validation Loss: 0.0202\n","Epoch [4/50], Training Loss: 0.0202, Validation Loss: 0.0199\n","Epoch [5/50], Training Loss: 0.0198, Validation Loss: 0.0195\n","Epoch [6/50], Training Loss: 0.0194, Validation Loss: 0.0191\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  10%|█         | 5/50 [00:00<00:00, 46.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0191, Validation Loss: 0.0188\n","Epoch [8/50], Training Loss: 0.0187, Validation Loss: 0.0185\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 58.60it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0184, Validation Loss: 0.0181\n","Epoch [10/50], Training Loss: 0.0181, Validation Loss: 0.0178\n","Epoch [11/50], Training Loss: 0.0178, Validation Loss: 0.0175\n","Epoch [12/50], Training Loss: 0.0175, Validation Loss: 0.0172\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  38%|███▊      | 19/50 [00:00<00:00, 62.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0172, Validation Loss: 0.0170\n","Epoch [14/50], Training Loss: 0.0169, Validation Loss: 0.0167\n","Epoch [15/50], Training Loss: 0.0167, Validation Loss: 0.0164\n","Epoch [16/50], Training Loss: 0.0164, Validation Loss: 0.0162\n","Epoch [17/50], Training Loss: 0.0161, Validation Loss: 0.0159\n","Epoch [18/50], Training Loss: 0.0159, Validation Loss: 0.0157\n","Epoch [19/50], Training Loss: 0.0157, Validation Loss: 0.0155\n","Epoch [20/50], Training Loss: 0.0154, Validation Loss: 0.0153\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  38%|███▊      | 19/50 [00:00<00:00, 62.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0152, Validation Loss: 0.0150\n","Epoch [22/50], Training Loss: 0.0150, Validation Loss: 0.0148\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 64.57it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0148, Validation Loss: 0.0146\n","Epoch [24/50], Training Loss: 0.0146, Validation Loss: 0.0144\n","Epoch [25/50], Training Loss: 0.0144, Validation Loss: 0.0143\n","Epoch [26/50], Training Loss: 0.0142, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 66.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0141, Validation Loss: 0.0139\n","Epoch [28/50], Training Loss: 0.0139, Validation Loss: 0.0138\n","Epoch [29/50], Training Loss: 0.0137, Validation Loss: 0.0136\n","Epoch [30/50], Training Loss: 0.0136, Validation Loss: 0.0134\n","Epoch [31/50], Training Loss: 0.0134, Validation Loss: 0.0133\n","Epoch [32/50], Training Loss: 0.0133, Validation Loss: 0.0131\n","Epoch [33/50], Training Loss: 0.0131, Validation Loss: 0.0130\n","Epoch [34/50], Training Loss: 0.0130, Validation Loss: 0.0129\n","Epoch [35/50], Training Loss: 0.0128, Validation Loss: 0.0127\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 66.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0127, Validation Loss: 0.0126\n","Epoch [37/50], Training Loss: 0.0126, Validation Loss: 0.0125\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 66.46it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0125, Validation Loss: 0.0124\n","Epoch [39/50], Training Loss: 0.0123, Validation Loss: 0.0123\n","Epoch [40/50], Training Loss: 0.0122, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                      "]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0121, Validation Loss: 0.0120\n","Epoch [42/50], Training Loss: 0.0120, Validation Loss: 0.0119\n","Epoch [43/50], Training Loss: 0.0119, Validation Loss: 0.0118\n","Epoch [44/50], Training Loss: 0.0118, Validation Loss: 0.0117\n","Epoch [45/50], Training Loss: 0.0117, Validation Loss: 0.0116\n","Epoch [46/50], Training Loss: 0.0116, Validation Loss: 0.0115\n","Epoch [47/50], Training Loss: 0.0115, Validation Loss: 0.0115\n","Epoch [48/50], Training Loss: 0.0114, Validation Loss: 0.0114\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 64.05it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0114, Validation Loss: 0.0113\n","Epoch [50/50], Training Loss: 0.0113, Validation Loss: 0.0112\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0238, Validation Loss: 0.0610\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  10%|█         | 5/50 [00:00<00:01, 44.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0547, Validation Loss: 0.0485\n","Epoch [3/50], Training Loss: 0.0499, Validation Loss: 0.0087\n","Epoch [4/50], Training Loss: 0.0093, Validation Loss: 0.0086\n","Epoch [5/50], Training Loss: 0.0091, Validation Loss: 0.0085\n","Epoch [6/50], Training Loss: 0.0089, Validation Loss: 0.0083\n","Epoch [7/50], Training Loss: 0.0087, Validation Loss: 0.0083\n","Epoch [8/50], Training Loss: 0.0085, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  22%|██▏       | 11/50 [00:00<00:00, 53.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0083, Validation Loss: 0.0081\n","Epoch [10/50], Training Loss: 0.0081, Validation Loss: 0.0078\n","Epoch [11/50], Training Loss: 0.0081, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0081, Validation Loss: 0.0076\n","Epoch [13/50], Training Loss: 0.0079, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:00<00:00, 52.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0076, Validation Loss: 0.0071\n","Epoch [15/50], Training Loss: 0.0073, Validation Loss: 0.0069\n","Epoch [16/50], Training Loss: 0.0069, Validation Loss: 0.0066\n","Epoch [17/50], Training Loss: 0.0068, Validation Loss: 0.0072\n","Epoch [18/50], Training Loss: 0.0072, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:00<00:00, 52.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0080, Validation Loss: 0.0066\n","Epoch [20/50], Training Loss: 0.0065, Validation Loss: 0.0062\n","Epoch [21/50], Training Loss: 0.0063, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  34%|███▍      | 17/50 [00:00<00:00, 52.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0062, Validation Loss: 0.0063\n","Epoch [23/50], Training Loss: 0.0063, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 49.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0061, Validation Loss: 0.0066\n","Epoch [25/50], Training Loss: 0.0066, Validation Loss: 0.0062\n","Epoch [26/50], Training Loss: 0.0062, Validation Loss: 0.0065\n","Epoch [27/50], Training Loss: 0.0064, Validation Loss: 0.0060\n","Epoch [28/50], Training Loss: 0.0059, Validation Loss: 0.0062\n","Epoch [29/50], Training Loss: 0.0061, Validation Loss: 0.0059\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 49.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0059, Validation Loss: 0.0061\n","Epoch [31/50], Training Loss: 0.0061, Validation Loss: 0.0058\n","Epoch [32/50], Training Loss: 0.0058, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 49.62it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0060, Validation Loss: 0.0058\n","Epoch [34/50], Training Loss: 0.0058, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 48.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0063, Validation Loss: 0.0058\n","Epoch [36/50], Training Loss: 0.0058, Validation Loss: 0.0058\n","Epoch [37/50], Training Loss: 0.0059, Validation Loss: 0.0055\n","Epoch [38/50], Training Loss: 0.0055, Validation Loss: 0.0057\n","Epoch [39/50], Training Loss: 0.0056, Validation Loss: 0.0054\n","Epoch [40/50], Training Loss: 0.0054, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0057, Validation Loss: 0.0053\n","Epoch [42/50], Training Loss: 0.0054, Validation Loss: 0.0056\n","Epoch [43/50], Training Loss: 0.0055, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0053, Validation Loss: 0.0056\n","Epoch [45/50], Training Loss: 0.0056, Validation Loss: 0.0053\n","Epoch [46/50], Training Loss: 0.0053, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 51.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0055, Validation Loss: 0.0053\n","Epoch [48/50], Training Loss: 0.0053, Validation Loss: 0.0060\n","Epoch [49/50], Training Loss: 0.0061, Validation Loss: 0.0054\n","Epoch [50/50], Training Loss: 0.0054, Validation Loss: 0.0054\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0612, Validation Loss: 0.0622\n","Epoch [2/50], Training Loss: 0.0599, Validation Loss: 0.0607\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0585, Validation Loss: 0.0591\n","Epoch [4/50], Training Loss: 0.0570, Validation Loss: 0.0574\n","Epoch [5/50], Training Loss: 0.0555, Validation Loss: 0.0557\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 53.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0538, Validation Loss: 0.0539\n","Epoch [7/50], Training Loss: 0.0521, Validation Loss: 0.0521\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 53.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0505, Validation Loss: 0.0504\n","Epoch [9/50], Training Loss: 0.0489, Validation Loss: 0.0487\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 53.37it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0473, Validation Loss: 0.0471\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 37.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0457, Validation Loss: 0.0453\n","Epoch [12/50], Training Loss: 0.0441, Validation Loss: 0.0436\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 37.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0426, Validation Loss: 0.0420\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:01, 37.25it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0410, Validation Loss: 0.0403\n","Epoch [15/50], Training Loss: 0.0395, Validation Loss: 0.0387\n","Epoch [16/50], Training Loss: 0.0381, Validation Loss: 0.0371\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 35.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0366, Validation Loss: 0.0356\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 35.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0351, Validation Loss: 0.0341\n","Epoch [19/50], Training Loss: 0.0338, Validation Loss: 0.0326\n","Epoch [20/50], Training Loss: 0.0324, Validation Loss: 0.0313\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0311, Validation Loss: 0.0299\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  44%|████▍     | 22/50 [00:00<00:00, 38.16it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0298, Validation Loss: 0.0286\n","Epoch [23/50], Training Loss: 0.0286, Validation Loss: 0.0273\n","Epoch [24/50], Training Loss: 0.0273, Validation Loss: 0.0260\n","Epoch [25/50], Training Loss: 0.0261, Validation Loss: 0.0247\n","Epoch [26/50], Training Loss: 0.0249, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:00<00:00, 41.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0238, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  54%|█████▍    | 27/50 [00:00<00:00, 41.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0226, Validation Loss: 0.0210\n","Epoch [29/50], Training Loss: 0.0215, Validation Loss: 0.0198\n","Epoch [30/50], Training Loss: 0.0204, Validation Loss: 0.0187\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 42.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0194, Validation Loss: 0.0176\n","Epoch [32/50], Training Loss: 0.0183, Validation Loss: 0.0165\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 42.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0173, Validation Loss: 0.0155\n","Epoch [34/50], Training Loss: 0.0164, Validation Loss: 0.0145\n","Epoch [35/50], Training Loss: 0.0154, Validation Loss: 0.0136\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 42.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0145, Validation Loss: 0.0127\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0137, Validation Loss: 0.0119\n","Epoch [38/50], Training Loss: 0.0130, Validation Loss: 0.0112\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  74%|███████▍  | 37/50 [00:00<00:00, 40.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0123, Validation Loss: 0.0106\n","Epoch [40/50], Training Loss: 0.0117, Validation Loss: 0.0101\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:01<00:00, 39.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0113, Validation Loss: 0.0097\n","Epoch [42/50], Training Loss: 0.0110, Validation Loss: 0.0094\n","Epoch [43/50], Training Loss: 0.0107, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  84%|████████▍ | 42/50 [00:01<00:00, 39.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0106, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:01<00:00, 41.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0105, Validation Loss: 0.0090\n","Epoch [46/50], Training Loss: 0.0104, Validation Loss: 0.0089\n","Epoch [47/50], Training Loss: 0.0104, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0103, Validation Loss: 0.0088\n","Epoch [49/50], Training Loss: 0.0103, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 40.81it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0102, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0709, Validation Loss: 0.0708\n","Epoch [2/50], Training Loss: 0.0708, Validation Loss: 0.0706\n","Epoch [3/50], Training Loss: 0.0706, Validation Loss: 0.0705\n","Epoch [4/50], Training Loss: 0.0705, Validation Loss: 0.0703\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0703, Validation Loss: 0.0702\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 61.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0702, Validation Loss: 0.0700\n","Epoch [7/50], Training Loss: 0.0700, Validation Loss: 0.0699\n","Epoch [8/50], Training Loss: 0.0699, Validation Loss: 0.0697\n","Epoch [9/50], Training Loss: 0.0697, Validation Loss: 0.0696\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 61.34it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0696, Validation Loss: 0.0694\n","Epoch [11/50], Training Loss: 0.0694, Validation Loss: 0.0693\n","Epoch [12/50], Training Loss: 0.0693, Validation Loss: 0.0692\n","Epoch [13/50], Training Loss: 0.0692, Validation Loss: 0.0690\n","Epoch [14/50], Training Loss: 0.0690, Validation Loss: 0.0689\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0689, Validation Loss: 0.0687\n","Epoch [16/50], Training Loss: 0.0687, Validation Loss: 0.0686\n","Epoch [17/50], Training Loss: 0.0686, Validation Loss: 0.0684\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:00, 64.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0684, Validation Loss: 0.0683\n","Epoch [19/50], Training Loss: 0.0683, Validation Loss: 0.0681\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:00, 64.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0682, Validation Loss: 0.0680\n","Epoch [21/50], Training Loss: 0.0680, Validation Loss: 0.0679\n","Epoch [22/50], Training Loss: 0.0679, Validation Loss: 0.0677\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  42%|████▏     | 21/50 [00:00<00:00, 64.43it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0677, Validation Loss: 0.0676\n","Epoch [24/50], Training Loss: 0.0676, Validation Loss: 0.0674\n","Epoch [25/50], Training Loss: 0.0674, Validation Loss: 0.0673\n","Epoch [26/50], Training Loss: 0.0673, Validation Loss: 0.0672\n","Epoch [27/50], Training Loss: 0.0672, Validation Loss: 0.0670\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 61.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0670, Validation Loss: 0.0669\n","Epoch [29/50], Training Loss: 0.0669, Validation Loss: 0.0667\n","Epoch [30/50], Training Loss: 0.0668, Validation Loss: 0.0666\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 61.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0666, Validation Loss: 0.0665\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  56%|█████▌    | 28/50 [00:00<00:00, 61.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0665, Validation Loss: 0.0663\n","Epoch [33/50], Training Loss: 0.0663, Validation Loss: 0.0662\n","Epoch [34/50], Training Loss: 0.0662, Validation Loss: 0.0660\n","Epoch [35/50], Training Loss: 0.0661, Validation Loss: 0.0659\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0659, Validation Loss: 0.0658\n","Epoch [37/50], Training Loss: 0.0658, Validation Loss: 0.0656\n","Epoch [38/50], Training Loss: 0.0657, Validation Loss: 0.0655\n","Epoch [39/50], Training Loss: 0.0655, Validation Loss: 0.0654\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:00<00:00, 60.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0654, Validation Loss: 0.0652\n","Epoch [41/50], Training Loss: 0.0652, Validation Loss: 0.0651\n","Epoch [42/50], Training Loss: 0.0651, Validation Loss: 0.0650\n","Epoch [43/50], Training Loss: 0.0650, Validation Loss: 0.0648\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  84%|████████▍ | 42/50 [00:00<00:00, 60.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0648, Validation Loss: 0.0647\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0647, Validation Loss: 0.0646\n","Epoch [46/50], Training Loss: 0.0646, Validation Loss: 0.0644\n","Epoch [47/50], Training Loss: 0.0644, Validation Loss: 0.0643\n","Epoch [48/50], Training Loss: 0.0643, Validation Loss: 0.0642\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 61.83it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0642, Validation Loss: 0.0640\n","Epoch [50/50], Training Loss: 0.0640, Validation Loss: 0.0639\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0416, Validation Loss: 0.0297\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0302, Validation Loss: 0.0218\n","Epoch [3/50], Training Loss: 0.0221, Validation Loss: 0.0166\n","Epoch [4/50], Training Loss: 0.0168, Validation Loss: 0.0135\n","Epoch [5/50], Training Loss: 0.0135, Validation Loss: 0.0114\n","Epoch [6/50], Training Loss: 0.0113, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 64.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0099, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  14%|█▍        | 7/50 [00:00<00:00, 64.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0091, Validation Loss: 0.0087\n","Epoch [9/50], Training Loss: 0.0087, Validation Loss: 0.0084\n","Epoch [10/50], Training Loss: 0.0085, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0083, Validation Loss: 0.0080\n","Epoch [12/50], Training Loss: 0.0082, Validation Loss: 0.0079\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0080, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 58.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0079, Validation Loss: 0.0076\n","Epoch [15/50], Training Loss: 0.0078, Validation Loss: 0.0075\n","Epoch [16/50], Training Loss: 0.0077, Validation Loss: 0.0074\n","Epoch [17/50], Training Loss: 0.0076, Validation Loss: 0.0073\n","Epoch [18/50], Training Loss: 0.0075, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0074, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:00, 61.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0073, Validation Loss: 0.0070\n","Epoch [21/50], Training Loss: 0.0072, Validation Loss: 0.0069\n","Epoch [22/50], Training Loss: 0.0071, Validation Loss: 0.0068\n","Epoch [23/50], Training Loss: 0.0070, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:00, 61.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0069, Validation Loss: 0.0065\n","Epoch [25/50], Training Loss: 0.0068, Validation Loss: 0.0065\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  42%|████▏     | 21/50 [00:00<00:00, 61.13it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0066, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 59.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0065, Validation Loss: 0.0062\n","Epoch [28/50], Training Loss: 0.0064, Validation Loss: 0.0060\n","Epoch [29/50], Training Loss: 0.0062, Validation Loss: 0.0059\n","Epoch [30/50], Training Loss: 0.0060, Validation Loss: 0.0058\n","Epoch [31/50], Training Loss: 0.0059, Validation Loss: 0.0057\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 59.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0057, Validation Loss: 0.0055\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 60.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0056, Validation Loss: 0.0054\n","Epoch [34/50], Training Loss: 0.0054, Validation Loss: 0.0052\n","Epoch [35/50], Training Loss: 0.0053, Validation Loss: 0.0052\n","Epoch [36/50], Training Loss: 0.0051, Validation Loss: 0.0050\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 60.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0050, Validation Loss: 0.0050\n","Epoch [38/50], Training Loss: 0.0049, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 60.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0048, Validation Loss: 0.0048\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  70%|███████   | 35/50 [00:00<00:00, 60.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0047, Validation Loss: 0.0047\n","Epoch [41/50], Training Loss: 0.0046, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 52.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0045, Validation Loss: 0.0045\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 52.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0044, Validation Loss: 0.0044\n","Epoch [44/50], Training Loss: 0.0042, Validation Loss: 0.0043\n","Epoch [45/50], Training Loss: 0.0042, Validation Loss: 0.0042\n","Epoch [46/50], Training Loss: 0.0041, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0040, Validation Loss: 0.0041\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 56.34it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0039, Validation Loss: 0.0040\n","Epoch [49/50], Training Loss: 0.0038, Validation Loss: 0.0039\n","Epoch [50/50], Training Loss: 0.0037, Validation Loss: 0.0039\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0222, Validation Loss: 0.0248\n","Epoch [2/50], Training Loss: 0.0221, Validation Loss: 0.0247\n","Epoch [3/50], Training Loss: 0.0220, Validation Loss: 0.0246\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0220, Validation Loss: 0.0245\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0219, Validation Loss: 0.0244\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:01, 41.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0218, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:01, 41.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0217, Validation Loss: 0.0242\n","Epoch [8/50], Training Loss: 0.0216, Validation Loss: 0.0242\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:01, 41.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0216, Validation Loss: 0.0241\n","Epoch [10/50], Training Loss: 0.0215, Validation Loss: 0.0240\n","Epoch [11/50], Training Loss: 0.0214, Validation Loss: 0.0239\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  22%|██▏       | 11/50 [00:00<00:00, 42.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0213, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  22%|██▏       | 11/50 [00:00<00:00, 42.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0213, Validation Loss: 0.0237\n","Epoch [14/50], Training Loss: 0.0212, Validation Loss: 0.0236\n","Epoch [15/50], Training Loss: 0.0211, Validation Loss: 0.0236\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 46.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0210, Validation Loss: 0.0235\n","Epoch [17/50], Training Loss: 0.0210, Validation Loss: 0.0234\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 46.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0209, Validation Loss: 0.0233\n","Epoch [19/50], Training Loss: 0.0208, Validation Loss: 0.0232\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  34%|███▍      | 17/50 [00:00<00:00, 46.53it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0207, Validation Loss: 0.0232\n","Epoch [21/50], Training Loss: 0.0207, Validation Loss: 0.0231\n","Epoch [22/50], Training Loss: 0.0206, Validation Loss: 0.0230\n","Epoch [23/50], Training Loss: 0.0205, Validation Loss: 0.0229\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  46%|████▌     | 23/50 [00:00<00:00, 50.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0204, Validation Loss: 0.0228\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  46%|████▌     | 23/50 [00:00<00:00, 50.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0204, Validation Loss: 0.0228\n","Epoch [26/50], Training Loss: 0.0203, Validation Loss: 0.0227\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  46%|████▌     | 23/50 [00:00<00:00, 50.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0202, Validation Loss: 0.0226\n","Epoch [28/50], Training Loss: 0.0202, Validation Loss: 0.0225\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  58%|█████▊    | 29/50 [00:00<00:00, 49.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0201, Validation Loss: 0.0224\n","Epoch [30/50], Training Loss: 0.0200, Validation Loss: 0.0224\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  58%|█████▊    | 29/50 [00:00<00:00, 49.44it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0200, Validation Loss: 0.0223\n","Epoch [32/50], Training Loss: 0.0199, Validation Loss: 0.0222\n","Epoch [33/50], Training Loss: 0.0198, Validation Loss: 0.0221\n","Epoch [34/50], Training Loss: 0.0198, Validation Loss: 0.0221\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 51.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0197, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 51.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0196, Validation Loss: 0.0219\n","Epoch [37/50], Training Loss: 0.0196, Validation Loss: 0.0218\n","Epoch [38/50], Training Loss: 0.0195, Validation Loss: 0.0218\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 51.36it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0194, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:00<00:00, 50.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0194, Validation Loss: 0.0216\n","Epoch [41/50], Training Loss: 0.0193, Validation Loss: 0.0216\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:00<00:00, 50.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0192, Validation Loss: 0.0215\n","Epoch [43/50], Training Loss: 0.0192, Validation Loss: 0.0214\n","Epoch [44/50], Training Loss: 0.0191, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  82%|████████▏ | 41/50 [00:00<00:00, 50.15it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0191, Validation Loss: 0.0213\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:00<00:00, 47.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0190, Validation Loss: 0.0212\n","Epoch [47/50], Training Loss: 0.0189, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam:  94%|█████████▍| 47/50 [00:01<00:00, 47.04it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0189, Validation Loss: 0.0211\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 47.25it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0188, Validation Loss: 0.0210\n","Epoch [50/50], Training Loss: 0.0187, Validation Loss: 0.0209\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0544, Validation Loss: 0.0582\n","Epoch [2/50], Training Loss: 0.0543, Validation Loss: 0.0582\n","Epoch [3/50], Training Loss: 0.0543, Validation Loss: 0.0582\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0543, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 51.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0543, Validation Loss: 0.0581\n","Epoch [6/50], Training Loss: 0.0543, Validation Loss: 0.0581\n","Epoch [7/50], Training Loss: 0.0543, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 51.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0543, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 51.27it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0543, Validation Loss: 0.0581\n","Epoch [10/50], Training Loss: 0.0543, Validation Loss: 0.0581\n","Epoch [11/50], Training Loss: 0.0542, Validation Loss: 0.0581\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 51.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0542, Validation Loss: 0.0581\n","Epoch [13/50], Training Loss: 0.0542, Validation Loss: 0.0580\n","Epoch [14/50], Training Loss: 0.0542, Validation Loss: 0.0580\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 51.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0542, Validation Loss: 0.0580\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0542, Validation Loss: 0.0580\n","Epoch [17/50], Training Loss: 0.0542, Validation Loss: 0.0580\n","Epoch [18/50], Training Loss: 0.0542, Validation Loss: 0.0580\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0542, Validation Loss: 0.0580\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0541, Validation Loss: 0.0580\n","Epoch [21/50], Training Loss: 0.0541, Validation Loss: 0.0579\n","Epoch [22/50], Training Loss: 0.0541, Validation Loss: 0.0579\n","Epoch [23/50], Training Loss: 0.0541, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0541, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 44.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0541, Validation Loss: 0.0579\n","Epoch [26/50], Training Loss: 0.0541, Validation Loss: 0.0579\n","Epoch [27/50], Training Loss: 0.0541, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  50%|█████     | 25/50 [00:00<00:00, 44.66it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0541, Validation Loss: 0.0579\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0540, Validation Loss: 0.0579\n","Epoch [30/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [31/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [32/50], Training Loss: 0.0540, Validation Loss: 0.0578\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  66%|██████▌   | 33/50 [00:00<00:00, 52.28it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [34/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [35/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [36/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [37/50], Training Loss: 0.0540, Validation Loss: 0.0578\n","Epoch [38/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [39/50], Training Loss: 0.0539, Validation Loss: 0.0577\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:00<00:00, 58.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [40/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [41/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [42/50], Training Loss: 0.0539, Validation Loss: 0.0577\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:00<00:00, 58.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0539, Validation Loss: 0.0577\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD:  82%|████████▏ | 41/50 [00:00<00:00, 58.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [45/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [46/50], Training Loss: 0.0539, Validation Loss: 0.0577\n","Epoch [47/50], Training Loss: 0.0538, Validation Loss: 0.0576\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 55.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0538, Validation Loss: 0.0576\n","Epoch [49/50], Training Loss: 0.0538, Validation Loss: 0.0576\n","Epoch [50/50], Training Loss: 0.0538, Validation Loss: 0.0576\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0107, Validation Loss: 0.0097\n","Epoch [2/50], Training Loss: 0.0104, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0102, Validation Loss: 0.0095\n","Epoch [4/50], Training Loss: 0.0101, Validation Loss: 0.0094\n","Epoch [5/50], Training Loss: 0.0100, Validation Loss: 0.0093\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0099, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 59.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0099, Validation Loss: 0.0092\n","Epoch [8/50], Training Loss: 0.0098, Validation Loss: 0.0091\n","Epoch [9/50], Training Loss: 0.0097, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 57.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0097, Validation Loss: 0.0091\n","Epoch [11/50], Training Loss: 0.0096, Validation Loss: 0.0090\n","Epoch [12/50], Training Loss: 0.0096, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0095, Validation Loss: 0.0090\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 57.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0095, Validation Loss: 0.0089\n","Epoch [15/50], Training Loss: 0.0095, Validation Loss: 0.0089\n","Epoch [16/50], Training Loss: 0.0094, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 57.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0094, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:00, 53.93it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0094, Validation Loss: 0.0088\n","Epoch [19/50], Training Loss: 0.0093, Validation Loss: 0.0088\n","Epoch [20/50], Training Loss: 0.0093, Validation Loss: 0.0088\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0093, Validation Loss: 0.0088\n","Epoch [22/50], Training Loss: 0.0092, Validation Loss: 0.0087\n","Epoch [23/50], Training Loss: 0.0092, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 55.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0092, Validation Loss: 0.0087\n","Epoch [25/50], Training Loss: 0.0092, Validation Loss: 0.0087\n","Epoch [26/50], Training Loss: 0.0091, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 55.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0091, Validation Loss: 0.0086\n","Epoch [28/50], Training Loss: 0.0091, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 55.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0091, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  60%|██████    | 30/50 [00:00<00:00, 56.39it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0090, Validation Loss: 0.0086\n","Epoch [31/50], Training Loss: 0.0090, Validation Loss: 0.0086\n","Epoch [32/50], Training Loss: 0.0090, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:00<00:00, 56.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0090, Validation Loss: 0.0086\n","Epoch [34/50], Training Loss: 0.0090, Validation Loss: 0.0085\n","Epoch [35/50], Training Loss: 0.0089, Validation Loss: 0.0085\n","Epoch [36/50], Training Loss: 0.0089, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:00<00:00, 56.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0089, Validation Loss: 0.0085\n","Epoch [38/50], Training Loss: 0.0089, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:00<00:00, 56.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0089, Validation Loss: 0.0085\n","Epoch [40/50], Training Loss: 0.0089, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  72%|███████▏  | 36/50 [00:00<00:00, 56.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0088, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:00<00:00, 56.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [43/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [44/50], Training Loss: 0.0088, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:00<00:00, 56.48it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [46/50], Training Loss: 0.0088, Validation Loss: 0.0084\n","Epoch [47/50], Training Loss: 0.0087, Validation Loss: 0.0084\n","Epoch [48/50], Training Loss: 0.0087, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[8, 16, 32, 16, 8], Optimizer=RMSprop: 100%|██████████| 50/50 [00:00<00:00, 56.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0087, Validation Loss: 0.0084\n","Epoch [50/50], Training Loss: 0.0087, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["\n","Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0507, Validation Loss: 0.0284\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0269, Validation Loss: 0.0114\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0112, Validation Loss: 0.0215\n","Epoch [4/50], Training Loss: 0.0208, Validation Loss: 0.0105\n","Epoch [5/50], Training Loss: 0.0105, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0082, Validation Loss: 0.0094\n","Epoch [7/50], Training Loss: 0.0091, Validation Loss: 0.0099\n","Epoch [8/50], Training Loss: 0.0097, Validation Loss: 0.0097\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  12%|█▏        | 6/50 [00:00<00:00, 54.10it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0095, Validation Loss: 0.0090\n","Epoch [10/50], Training Loss: 0.0090, Validation Loss: 0.0081\n","Epoch [11/50], Training Loss: 0.0082, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 50.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0076, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  24%|██▍       | 12/50 [00:00<00:00, 50.06it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0072, Validation Loss: 0.0068\n","Epoch [14/50], Training Loss: 0.0071, Validation Loss: 0.0071\n","Epoch [15/50], Training Loss: 0.0074, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0076, Validation Loss: 0.0071\n","Epoch [17/50], Training Loss: 0.0074, Validation Loss: 0.0067\n","Epoch [18/50], Training Loss: 0.0069, Validation Loss: 0.0062\n","Epoch [19/50], Training Loss: 0.0065, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0064, Validation Loss: 0.0061\n","Epoch [21/50], Training Loss: 0.0063, Validation Loss: 0.0060\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  36%|███▌      | 18/50 [00:00<00:00, 48.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0062, Validation Loss: 0.0058\n","Epoch [23/50], Training Loss: 0.0060, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 50.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0057, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  48%|████▊     | 24/50 [00:00<00:00, 50.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0054, Validation Loss: 0.0051\n","Epoch [26/50], Training Loss: 0.0052, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0051, Validation Loss: 0.0048\n","Epoch [28/50], Training Loss: 0.0049, Validation Loss: 0.0047\n","Epoch [29/50], Training Loss: 0.0048, Validation Loss: 0.0044\n","Epoch [30/50], Training Loss: 0.0046, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0044, Validation Loss: 0.0040\n","Epoch [32/50], Training Loss: 0.0042, Validation Loss: 0.0038\n","Epoch [33/50], Training Loss: 0.0040, Validation Loss: 0.0036\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0038, Validation Loss: 0.0033\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  60%|██████    | 30/50 [00:00<00:00, 50.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0036, Validation Loss: 0.0031\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 51.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0034, Validation Loss: 0.0029\n","Epoch [37/50], Training Loss: 0.0032, Validation Loss: 0.0027\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  72%|███████▏  | 36/50 [00:00<00:00, 51.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0031, Validation Loss: 0.0026\n","Epoch [39/50], Training Loss: 0.0029, Validation Loss: 0.0025\n","Epoch [40/50], Training Loss: 0.0028, Validation Loss: 0.0025\n","Epoch [41/50], Training Loss: 0.0027, Validation Loss: 0.0023\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0026, Validation Loss: 0.0022\n","Epoch [43/50], Training Loss: 0.0024, Validation Loss: 0.0022\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0022, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 50.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0022, Validation Loss: 0.0021\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  84%|████████▍ | 42/50 [00:00<00:00, 50.73it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0021, Validation Loss: 0.0020\n","Epoch [47/50], Training Loss: 0.0021, Validation Loss: 0.0019\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 49.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0019, Validation Loss: 0.0018\n","Epoch [49/50], Training Loss: 0.0018, Validation Loss: 0.0017\n","Epoch [50/50], Training Loss: 0.0017, Validation Loss: 0.0015\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0508, Validation Loss: 0.0538\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/50], Training Loss: 0.0494, Validation Loss: 0.0524\n","Epoch [3/50], Training Loss: 0.0482, Validation Loss: 0.0511\n","Epoch [4/50], Training Loss: 0.0469, Validation Loss: 0.0498\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0457, Validation Loss: 0.0486\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0446, Validation Loss: 0.0474\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                       "]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0435, Validation Loss: 0.0463\n","Epoch [8/50], Training Loss: 0.0424, Validation Loss: 0.0451\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 62.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/50], Training Loss: 0.0413, Validation Loss: 0.0441\n","Epoch [10/50], Training Loss: 0.0403, Validation Loss: 0.0430\n","Epoch [11/50], Training Loss: 0.0393, Validation Loss: 0.0420\n","Epoch [12/50], Training Loss: 0.0384, Validation Loss: 0.0410\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  14%|█▍        | 7/50 [00:00<00:00, 62.92it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0375, Validation Loss: 0.0401\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:00, 58.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0366, Validation Loss: 0.0391\n","Epoch [15/50], Training Loss: 0.0357, Validation Loss: 0.0382\n","Epoch [16/50], Training Loss: 0.0349, Validation Loss: 0.0374\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:00, 58.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0341, Validation Loss: 0.0365\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  28%|██▊       | 14/50 [00:00<00:00, 58.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0333, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 59.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0325, Validation Loss: 0.0349\n","Epoch [20/50], Training Loss: 0.0318, Validation Loss: 0.0342\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 59.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0311, Validation Loss: 0.0334\n","Epoch [22/50], Training Loss: 0.0304, Validation Loss: 0.0327\n","Epoch [23/50], Training Loss: 0.0297, Validation Loss: 0.0320\n","Epoch [24/50], Training Loss: 0.0291, Validation Loss: 0.0314\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 59.23it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0285, Validation Loss: 0.0307\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 58.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0279, Validation Loss: 0.0301\n","Epoch [27/50], Training Loss: 0.0273, Validation Loss: 0.0295\n","Epoch [28/50], Training Loss: 0.0267, Validation Loss: 0.0289\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 58.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0262, Validation Loss: 0.0283\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  52%|█████▏    | 26/50 [00:00<00:00, 58.09it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0256, Validation Loss: 0.0277\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 58.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0251, Validation Loss: 0.0272\n","Epoch [32/50], Training Loss: 0.0246, Validation Loss: 0.0267\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 58.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0242, Validation Loss: 0.0262\n","Epoch [34/50], Training Loss: 0.0237, Validation Loss: 0.0257\n","Epoch [35/50], Training Loss: 0.0232, Validation Loss: 0.0252\n","Epoch [36/50], Training Loss: 0.0228, Validation Loss: 0.0247\n","Epoch [37/50], Training Loss: 0.0224, Validation Loss: 0.0243\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  64%|██████▍   | 32/50 [00:00<00:00, 58.54it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0220, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0216, Validation Loss: 0.0234\n","Epoch [40/50], Training Loss: 0.0212, Validation Loss: 0.0230\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0208, Validation Loss: 0.0226\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0205, Validation Loss: 0.0222\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0201, Validation Loss: 0.0218\n","Epoch [44/50], Training Loss: 0.0198, Validation Loss: 0.0215\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                        "]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0194, Validation Loss: 0.0211\n","Epoch [46/50], Training Loss: 0.0191, Validation Loss: 0.0208\n","Epoch [47/50], Training Loss: 0.0188, Validation Loss: 0.0204\n","Epoch [48/50], Training Loss: 0.0185, Validation Loss: 0.0201\n","Epoch [49/50], Training Loss: 0.0182, Validation Loss: 0.0198\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 59.02it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0179, Validation Loss: 0.0195\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0217, Validation Loss: 145.7531\n","Epoch [2/50], Training Loss: 135.0430, Validation Loss: 0.0480\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0460, Validation Loss: 0.0428\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0366, Validation Loss: 0.0378\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 56.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0373, Validation Loss: 0.0176\n","Epoch [6/50], Training Loss: 0.0179, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  12%|█▏        | 6/50 [00:00<00:00, 56.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0099, Validation Loss: 0.0097\n","Epoch [8/50], Training Loss: 0.0091, Validation Loss: 0.0095\n","Epoch [9/50], Training Loss: 0.0089, Validation Loss: 0.0092\n","Epoch [10/50], Training Loss: 0.0087, Validation Loss: 0.0091\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 56.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0085, Validation Loss: 0.0088\n","Epoch [12/50], Training Loss: 0.0084, Validation Loss: 0.0086\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 56.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0083, Validation Loss: 0.0084\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 56.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0082, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  24%|██▍       | 12/50 [00:00<00:00, 56.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/50], Training Loss: 0.0080, Validation Loss: 0.0081\n","Epoch [16/50], Training Loss: 0.0079, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0078, Validation Loss: 0.0078\n","Epoch [18/50], Training Loss: 0.0077, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:00, 46.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/50], Training Loss: 0.0077, Validation Loss: 0.0076\n","Epoch [20/50], Training Loss: 0.0076, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:00, 46.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0075, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  36%|███▌      | 18/50 [00:00<00:00, 46.80it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/50], Training Loss: 0.0075, Validation Loss: 0.0076\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:00<00:00, 43.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0075, Validation Loss: 0.0075\n","Epoch [24/50], Training Loss: 0.0076, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  46%|████▌     | 23/50 [00:00<00:00, 43.02it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0077, Validation Loss: 0.0080\n","Epoch [26/50], Training Loss: 0.0080, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 40.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0081, Validation Loss: 0.0086\n","Epoch [28/50], Training Loss: 0.0085, Validation Loss: 0.0085\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 40.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0082, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 40.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0082, Validation Loss: 0.0080\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  56%|█████▌    | 28/50 [00:00<00:00, 40.32it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/50], Training Loss: 0.0077, Validation Loss: 0.0077\n","Epoch [32/50], Training Loss: 0.0077, Validation Loss: 0.0075\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 39.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0073, Validation Loss: 0.0074\n","Epoch [34/50], Training Loss: 0.0073, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 39.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0071, Validation Loss: 0.0072\n","Epoch [36/50], Training Loss: 0.0071, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 39.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [37/50], Training Loss: 0.0070, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 38.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0071, Validation Loss: 0.0071\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 38.84it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0070, Validation Loss: 0.0071\n","Epoch [40/50], Training Loss: 0.0070, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:01<00:00, 39.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0069, Validation Loss: 0.0071\n","Epoch [42/50], Training Loss: 0.0069, Validation Loss: 0.0069\n","Epoch [43/50], Training Loss: 0.0068, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  84%|████████▍ | 42/50 [00:01<00:00, 39.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [44/50], Training Loss: 0.0070, Validation Loss: 0.0070\n","Epoch [45/50], Training Loss: 0.0069, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:01<00:00, 38.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0071, Validation Loss: 0.0070\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  92%|█████████▏| 46/50 [00:01<00:00, 38.61it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0069, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                            "]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0071, Validation Loss: 0.0070\n","Epoch [49/50], Training Loss: 0.0068, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.01, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 41.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0070, Validation Loss: 0.0069\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0281, Validation Loss: 0.0287\n","Epoch [2/50], Training Loss: 0.0269, Validation Loss: 0.0274\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0258, Validation Loss: 0.0261\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:   8%|▊         | 4/50 [00:00<00:01, 39.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0247, Validation Loss: 0.0249\n","Epoch [5/50], Training Loss: 0.0237, Validation Loss: 0.0238\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0227, Validation Loss: 0.0227\n","Epoch [7/50], Training Loss: 0.0218, Validation Loss: 0.0217\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  16%|█▌        | 8/50 [00:00<00:01, 34.87it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0210, Validation Loss: 0.0207\n","Epoch [9/50], Training Loss: 0.0202, Validation Loss: 0.0198\n","Epoch [10/50], Training Loss: 0.0194, Validation Loss: 0.0189\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0187, Validation Loss: 0.0181\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:00, 43.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0180, Validation Loss: 0.0173\n","Epoch [13/50], Training Loss: 0.0174, Validation Loss: 0.0166\n","Epoch [14/50], Training Loss: 0.0167, Validation Loss: 0.0159\n","Epoch [15/50], Training Loss: 0.0162, Validation Loss: 0.0153\n","Epoch [16/50], Training Loss: 0.0156, Validation Loss: 0.0147\n","Epoch [17/50], Training Loss: 0.0151, Validation Loss: 0.0141\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  28%|██▊       | 14/50 [00:00<00:00, 43.22it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0146, Validation Loss: 0.0135\n","Epoch [19/50], Training Loss: 0.0141, Validation Loss: 0.0129\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 48.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0135, Validation Loss: 0.0123\n","Epoch [21/50], Training Loss: 0.0130, Validation Loss: 0.0118\n","Epoch [22/50], Training Loss: 0.0124, Validation Loss: 0.0112\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 48.63it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0119, Validation Loss: 0.0107\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:00<00:00, 51.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0113, Validation Loss: 0.0102\n","Epoch [25/50], Training Loss: 0.0108, Validation Loss: 0.0097\n","Epoch [26/50], Training Loss: 0.0103, Validation Loss: 0.0093\n","Epoch [27/50], Training Loss: 0.0098, Validation Loss: 0.0089\n","Epoch [28/50], Training Loss: 0.0093, Validation Loss: 0.0086\n","Epoch [29/50], Training Loss: 0.0089, Validation Loss: 0.0083\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  52%|█████▏    | 26/50 [00:00<00:00, 51.96it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/50], Training Loss: 0.0086, Validation Loss: 0.0080\n","Epoch [31/50], Training Loss: 0.0082, Validation Loss: 0.0078\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0080, Validation Loss: 0.0076\n","Epoch [33/50], Training Loss: 0.0077, Validation Loss: 0.0074\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  64%|██████▍   | 32/50 [00:00<00:00, 51.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0075, Validation Loss: 0.0073\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0072, Validation Loss: 0.0072\n","Epoch [36/50], Training Loss: 0.0071, Validation Loss: 0.0071\n","Epoch [37/50], Training Loss: 0.0069, Validation Loss: 0.0070\n","Epoch [38/50], Training Loss: 0.0068, Validation Loss: 0.0070\n","Epoch [39/50], Training Loss: 0.0067, Validation Loss: 0.0069\n","Epoch [40/50], Training Loss: 0.0066, Validation Loss: 0.0068\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                          "]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0065, Validation Loss: 0.0067\n","Epoch [42/50], Training Loss: 0.0064, Validation Loss: 0.0066\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:00<00:00, 52.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0063, Validation Loss: 0.0065\n","Epoch [44/50], Training Loss: 0.0062, Validation Loss: 0.0063\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  88%|████████▊ | 44/50 [00:00<00:00, 52.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0061, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 49.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0060, Validation Loss: 0.0061\n","Epoch [47/50], Training Loss: 0.0059, Validation Loss: 0.0059\n","Epoch [48/50], Training Loss: 0.0058, Validation Loss: 0.0058\n","Epoch [49/50], Training Loss: 0.0057, Validation Loss: 0.0057\n","Epoch [50/50], Training Loss: 0.0056, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0659, Validation Loss: 0.0712\n","Epoch [2/50], Training Loss: 0.0657, Validation Loss: 0.0710\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0655, Validation Loss: 0.0708\n","Epoch [4/50], Training Loss: 0.0653, Validation Loss: 0.0706\n","Epoch [5/50], Training Loss: 0.0651, Validation Loss: 0.0705\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 54.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0649, Validation Loss: 0.0703\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  12%|█▏        | 6/50 [00:00<00:00, 54.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/50], Training Loss: 0.0647, Validation Loss: 0.0701\n","Epoch [8/50], Training Loss: 0.0645, Validation Loss: 0.0699\n","Epoch [9/50], Training Loss: 0.0644, Validation Loss: 0.0697\n","Epoch [10/50], Training Loss: 0.0642, Validation Loss: 0.0695\n","Epoch [11/50], Training Loss: 0.0640, Validation Loss: 0.0693\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 50.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/50], Training Loss: 0.0638, Validation Loss: 0.0691\n","Epoch [13/50], Training Loss: 0.0636, Validation Loss: 0.0689\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0634, Validation Loss: 0.0687\n","Epoch [15/50], Training Loss: 0.0633, Validation Loss: 0.0685\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  24%|██▍       | 12/50 [00:00<00:00, 50.67it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0631, Validation Loss: 0.0683\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  36%|███▌      | 18/50 [00:00<00:00, 50.03it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0629, Validation Loss: 0.0681\n","Epoch [18/50], Training Loss: 0.0627, Validation Loss: 0.0680\n","Epoch [19/50], Training Loss: 0.0625, Validation Loss: 0.0678\n","Epoch [20/50], Training Loss: 0.0624, Validation Loss: 0.0676\n","Epoch [21/50], Training Loss: 0.0622, Validation Loss: 0.0674\n","Epoch [22/50], Training Loss: 0.0620, Validation Loss: 0.0672\n","Epoch [23/50], Training Loss: 0.0618, Validation Loss: 0.0670\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 48.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/50], Training Loss: 0.0617, Validation Loss: 0.0668\n","Epoch [25/50], Training Loss: 0.0615, Validation Loss: 0.0667\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  48%|████▊     | 24/50 [00:00<00:00, 48.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0613, Validation Loss: 0.0665\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  58%|█████▊    | 29/50 [00:00<00:00, 47.77it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0611, Validation Loss: 0.0663\n","Epoch [28/50], Training Loss: 0.0610, Validation Loss: 0.0661\n","Epoch [29/50], Training Loss: 0.0608, Validation Loss: 0.0659\n","Epoch [30/50], Training Loss: 0.0606, Validation Loss: 0.0657\n","Epoch [31/50], Training Loss: 0.0605, Validation Loss: 0.0656\n","Epoch [32/50], Training Loss: 0.0603, Validation Loss: 0.0654\n","Epoch [33/50], Training Loss: 0.0601, Validation Loss: 0.0652\n","Epoch [34/50], Training Loss: 0.0599, Validation Loss: 0.0650\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0598, Validation Loss: 0.0648\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  70%|███████   | 35/50 [00:00<00:00, 48.99it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0596, Validation Loss: 0.0647\n","Epoch [37/50], Training Loss: 0.0594, Validation Loss: 0.0645\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  80%|████████  | 40/50 [00:00<00:00, 48.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0593, Validation Loss: 0.0643\n","Epoch [39/50], Training Loss: 0.0591, Validation Loss: 0.0641\n","Epoch [40/50], Training Loss: 0.0589, Validation Loss: 0.0640\n","Epoch [41/50], Training Loss: 0.0588, Validation Loss: 0.0638\n","Epoch [42/50], Training Loss: 0.0586, Validation Loss: 0.0636\n","Epoch [43/50], Training Loss: 0.0584, Validation Loss: 0.0634\n","Epoch [44/50], Training Loss: 0.0583, Validation Loss: 0.0633\n","Epoch [45/50], Training Loss: 0.0581, Validation Loss: 0.0631\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  92%|█████████▏| 46/50 [00:00<00:00, 49.89it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0580, Validation Loss: 0.0629\n","Epoch [47/50], Training Loss: 0.0578, Validation Loss: 0.0627\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:01<00:00, 48.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [48/50], Training Loss: 0.0576, Validation Loss: 0.0626\n","Epoch [49/50], Training Loss: 0.0575, Validation Loss: 0.0624\n","Epoch [50/50], Training Loss: 0.0573, Validation Loss: 0.0622\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0604, Validation Loss: 0.0260\n","Epoch [2/50], Training Loss: 0.0298, Validation Loss: 0.0154\n","Epoch [3/50], Training Loss: 0.0183, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [4/50], Training Loss: 0.0120, Validation Loss: 0.0083\n","Epoch [5/50], Training Loss: 0.0097, Validation Loss: 0.0077\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:00, 41.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0087, Validation Loss: 0.0087\n","Epoch [7/50], Training Loss: 0.0092, Validation Loss: 0.0088\n","Epoch [8/50], Training Loss: 0.0098, Validation Loss: 0.0080\n","Epoch [9/50], Training Loss: 0.0084, Validation Loss: 0.0072\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  18%|█▊        | 9/50 [00:00<00:00, 41.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0078, Validation Loss: 0.0070\n","Epoch [11/50], Training Loss: 0.0074, Validation Loss: 0.0068\n","Epoch [12/50], Training Loss: 0.0071, Validation Loss: 0.0067\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  28%|██▊       | 14/50 [00:00<00:00, 45.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/50], Training Loss: 0.0070, Validation Loss: 0.0066\n","Epoch [14/50], Training Loss: 0.0068, Validation Loss: 0.0065\n","Epoch [15/50], Training Loss: 0.0066, Validation Loss: 0.0064\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 44.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0065, Validation Loss: 0.0063\n","Epoch [17/50], Training Loss: 0.0064, Validation Loss: 0.0062\n","Epoch [18/50], Training Loss: 0.0063, Validation Loss: 0.0062\n","Epoch [19/50], Training Loss: 0.0062, Validation Loss: 0.0061\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  38%|███▊      | 19/50 [00:00<00:00, 44.64it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/50], Training Loss: 0.0062, Validation Loss: 0.0064\n","Epoch [21/50], Training Loss: 0.0063, Validation Loss: 0.0066\n","Epoch [22/50], Training Loss: 0.0067, Validation Loss: 0.0062\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 44.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0062, Validation Loss: 0.0060\n","Epoch [24/50], Training Loss: 0.0061, Validation Loss: 0.0058\n","Epoch [25/50], Training Loss: 0.0057, Validation Loss: 0.0056\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  48%|████▊     | 24/50 [00:00<00:00, 44.50it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0056, Validation Loss: 0.0055\n","Epoch [27/50], Training Loss: 0.0054, Validation Loss: 0.0054\n","Epoch [28/50], Training Loss: 0.0053, Validation Loss: 0.0053\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  58%|█████▊    | 29/50 [00:00<00:00, 42.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/50], Training Loss: 0.0052, Validation Loss: 0.0052\n","Epoch [30/50], Training Loss: 0.0051, Validation Loss: 0.0051\n","Epoch [31/50], Training Loss: 0.0050, Validation Loss: 0.0051\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:00<00:00, 43.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0050, Validation Loss: 0.0051\n","Epoch [33/50], Training Loss: 0.0049, Validation Loss: 0.0051\n","Epoch [34/50], Training Loss: 0.0050, Validation Loss: 0.0049\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  68%|██████▊   | 34/50 [00:00<00:00, 43.00it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0048, Validation Loss: 0.0049\n","Epoch [36/50], Training Loss: 0.0048, Validation Loss: 0.0047\n","Epoch [37/50], Training Loss: 0.0045, Validation Loss: 0.0046\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:00<00:00, 42.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [38/50], Training Loss: 0.0045, Validation Loss: 0.0045\n","Epoch [39/50], Training Loss: 0.0043, Validation Loss: 0.0043\n","Epoch [40/50], Training Loss: 0.0042, Validation Loss: 0.0042\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  78%|███████▊  | 39/50 [00:01<00:00, 42.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0040, Validation Loss: 0.0042\n","Epoch [42/50], Training Loss: 0.0041, Validation Loss: 0.0042\n","Epoch [43/50], Training Loss: 0.0040, Validation Loss: 0.0043\n","Epoch [44/50], Training Loss: 0.0041, Validation Loss: 0.0042\n","Epoch [45/50], Training Loss: 0.0039, Validation Loss: 0.0040\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  90%|█████████ | 45/50 [00:01<00:00, 46.08it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0039, Validation Loss: 0.0038\n","Epoch [47/50], Training Loss: 0.0035, Validation Loss: 0.0035\n","Epoch [48/50], Training Loss: 0.0034, Validation Loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 44.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [49/50], Training Loss: 0.0033, Validation Loss: 0.0035\n","Epoch [50/50], Training Loss: 0.0034, Validation Loss: 0.0038\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0432, Validation Loss: 0.0397\n","Epoch [2/50], Training Loss: 0.0430, Validation Loss: 0.0395\n","Epoch [3/50], Training Loss: 0.0427, Validation Loss: 0.0392\n","Epoch [4/50], Training Loss: 0.0424, Validation Loss: 0.0389\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:00<00:01, 42.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/50], Training Loss: 0.0422, Validation Loss: 0.0387\n","Epoch [6/50], Training Loss: 0.0419, Validation Loss: 0.0384\n","Epoch [7/50], Training Loss: 0.0417, Validation Loss: 0.0382\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  10%|█         | 5/50 [00:00<00:01, 42.98it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0414, Validation Loss: 0.0379\n","Epoch [9/50], Training Loss: 0.0411, Validation Loss: 0.0377\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  20%|██        | 10/50 [00:00<00:00, 41.86it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/50], Training Loss: 0.0409, Validation Loss: 0.0374\n","Epoch [11/50], Training Loss: 0.0406, Validation Loss: 0.0372\n","Epoch [12/50], Training Loss: 0.0404, Validation Loss: 0.0369\n","Epoch [13/50], Training Loss: 0.0401, Validation Loss: 0.0367\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0399, Validation Loss: 0.0364\n","Epoch [15/50], Training Loss: 0.0396, Validation Loss: 0.0362\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                           "]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0394, Validation Loss: 0.0359\n","Epoch [17/50], Training Loss: 0.0391, Validation Loss: 0.0357\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  40%|████      | 20/50 [00:00<00:00, 40.49it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/50], Training Loss: 0.0389, Validation Loss: 0.0354\n","Epoch [19/50], Training Loss: 0.0386, Validation Loss: 0.0352\n","Epoch [20/50], Training Loss: 0.0383, Validation Loss: 0.0349\n","Epoch [21/50], Training Loss: 0.0381, Validation Loss: 0.0347\n","Epoch [22/50], Training Loss: 0.0378, Validation Loss: 0.0344\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0376, Validation Loss: 0.0342\n","Epoch [24/50], Training Loss: 0.0373, Validation Loss: 0.0339\n","Epoch [25/50], Training Loss: 0.0371, Validation Loss: 0.0337\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [26/50], Training Loss: 0.0368, Validation Loss: 0.0334\n","Epoch [27/50], Training Loss: 0.0366, Validation Loss: 0.0332"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["\n","Epoch [28/50], Training Loss: 0.0363, Validation Loss: 0.0329\n","Epoch [29/50], Training Loss: 0.0360, Validation Loss: 0.0327\n","Epoch [30/50], Training Loss: 0.0358, Validation Loss: 0.0324\n","Epoch [31/50], Training Loss: 0.0355, Validation Loss: 0.0322\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0353, Validation Loss: 0.0320\n","Epoch [33/50], Training Loss: 0.0350, Validation Loss: 0.0317\n","Epoch [34/50], Training Loss: 0.0348, Validation Loss: 0.0315\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  70%|███████   | 35/50 [00:00<00:00, 43.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/50], Training Loss: 0.0345, Validation Loss: 0.0312\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  80%|████████  | 40/50 [00:00<00:00, 44.31it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0343, Validation Loss: 0.0310\n","Epoch [37/50], Training Loss: 0.0340, Validation Loss: 0.0307\n","Epoch [38/50], Training Loss: 0.0338, Validation Loss: 0.0305\n","Epoch [39/50], Training Loss: 0.0335, Validation Loss: 0.0303\n","Epoch [40/50], Training Loss: 0.0333, Validation Loss: 0.0300\n","Epoch [41/50], Training Loss: 0.0331, Validation Loss: 0.0298\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam:  92%|█████████▏| 46/50 [00:01<00:00, 46.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [42/50], Training Loss: 0.0328, Validation Loss: 0.0295\n","Epoch [43/50], Training Loss: 0.0326, Validation Loss: 0.0293\n","Epoch [44/50], Training Loss: 0.0323, Validation Loss: 0.0290\n","Epoch [45/50], Training Loss: 0.0320, Validation Loss: 0.0288\n","Epoch [46/50], Training Loss: 0.0318, Validation Loss: 0.0286\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=Adam: 100%|██████████| 50/50 [00:01<00:00, 44.36it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [47/50], Training Loss: 0.0315, Validation Loss: 0.0283\n","Epoch [48/50], Training Loss: 0.0313, Validation Loss: 0.0281\n","Epoch [49/50], Training Loss: 0.0310, Validation Loss: 0.0278\n","Epoch [50/50], Training Loss: 0.0308, Validation Loss: 0.0276\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [2/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                         "]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [4/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [5/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [6/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [7/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:00, 61.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [9/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [10/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [11/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [12/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [13/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  26%|██▌       | 13/50 [00:00<00:00, 61.65it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [15/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 61.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [17/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [18/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [19/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [20/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  40%|████      | 20/50 [00:00<00:00, 61.75it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [22/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [23/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [24/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [25/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [26/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  54%|█████▍    | 27/50 [00:00<00:00, 60.74it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [29/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [30/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [31/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [32/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 34/50 [00:00<00:00, 57.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [34/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [35/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [36/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [37/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [38/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  68%|██████▊   | 34/50 [00:00<00:00, 57.26it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [39/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [40/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD:  82%|████████▏ | 41/50 [00:00<00:00, 58.14it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [42/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [43/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [44/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [45/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=SGD: 100%|██████████| 50/50 [00:00<00:00, 59.30it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [46/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [47/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [48/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [49/50], Training Loss: 0.0108, Validation Loss: 0.0096\n","Epoch [50/50], Training Loss: 0.0108, Validation Loss: 0.0096\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:   0%|          | 0/50 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/50], Training Loss: 0.0295, Validation Loss: 0.0264\n","Epoch [2/50], Training Loss: 0.0277, Validation Loss: 0.0251\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                             "]},{"output_type":"stream","name":"stdout","text":["Epoch [3/50], Training Loss: 0.0264, Validation Loss: 0.0240\n","Epoch [4/50], Training Loss: 0.0252, Validation Loss: 0.0229\n","Epoch [5/50], Training Loss: 0.0241, Validation Loss: 0.0220\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                              "]},{"output_type":"stream","name":"stdout","text":["Epoch [6/50], Training Loss: 0.0231, Validation Loss: 0.0212\n","Epoch [7/50], Training Loss: 0.0223, Validation Loss: 0.0205\n","Epoch [8/50], Training Loss: 0.0216, Validation Loss: 0.0198\n","Epoch [9/50], Training Loss: 0.0208, Validation Loss: 0.0191\n","Epoch [10/50], Training Loss: 0.0202, Validation Loss: 0.0185\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  20%|██        | 10/50 [00:00<00:00, 49.01it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/50], Training Loss: 0.0195, Validation Loss: 0.0179\n","Epoch [12/50], Training Loss: 0.0189, Validation Loss: 0.0173\n","Epoch [13/50], Training Loss: 0.0184, Validation Loss: 0.0168\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/50], Training Loss: 0.0178, Validation Loss: 0.0163\n","Epoch [15/50], Training Loss: 0.0173, Validation Loss: 0.0158\n","Epoch [16/50], Training Loss: 0.0169, Validation Loss: 0.0154\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  32%|███▏      | 16/50 [00:00<00:00, 51.76it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/50], Training Loss: 0.0164, Validation Loss: 0.0150\n","Epoch [18/50], Training Loss: 0.0160, Validation Loss: 0.0146\n","Epoch [19/50], Training Loss: 0.0157, Validation Loss: 0.0143\n","Epoch [20/50], Training Loss: 0.0153, Validation Loss: 0.0139\n","Epoch [21/50], Training Loss: 0.0149, Validation Loss: 0.0136\n","Epoch [22/50], Training Loss: 0.0146, Validation Loss: 0.0133\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:00<00:00, 52.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/50], Training Loss: 0.0143, Validation Loss: 0.0130\n","Epoch [24/50], Training Loss: 0.0140, Validation Loss: 0.0127\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  44%|████▍     | 22/50 [00:00<00:00, 52.30it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/50], Training Loss: 0.0137, Validation Loss: 0.0124\n","Epoch [26/50], Training Loss: 0.0134, Validation Loss: 0.0121\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch [27/50], Training Loss: 0.0131, Validation Loss: 0.0119\n","Epoch [28/50], Training Loss: 0.0128, Validation Loss: 0.0116\n","Epoch [29/50], Training Loss: 0.0126, Validation Loss: 0.0113\n","Epoch [30/50], Training Loss: 0.0123, Validation Loss: 0.0111\n","Epoch [31/50], Training Loss: 0.0121, Validation Loss: 0.0108\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 47.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [32/50], Training Loss: 0.0118, Validation Loss: 0.0106\n","Epoch [33/50], Training Loss: 0.0116, Validation Loss: 0.0104\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  66%|██████▌   | 33/50 [00:00<00:00, 47.24it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [34/50], Training Loss: 0.0114, Validation Loss: 0.0102\n","Epoch [35/50], Training Loss: 0.0112, Validation Loss: 0.0100\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 45.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [36/50], Training Loss: 0.0110, Validation Loss: 0.0098\n","Epoch [37/50], Training Loss: 0.0108, Validation Loss: 0.0097\n","Epoch [38/50], Training Loss: 0.0106, Validation Loss: 0.0095\n","Epoch [39/50], Training Loss: 0.0105, Validation Loss: 0.0093\n","Epoch [40/50], Training Loss: 0.0103, Validation Loss: 0.0092\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  76%|███████▌  | 38/50 [00:00<00:00, 45.20it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [41/50], Training Loss: 0.0101, Validation Loss: 0.0091\n","Epoch [42/50], Training Loss: 0.0100, Validation Loss: 0.0089\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  86%|████████▌ | 43/50 [00:00<00:00, 43.19it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [43/50], Training Loss: 0.0099, Validation Loss: 0.0088\n","Epoch [44/50], Training Loss: 0.0097, Validation Loss: 0.0087\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop:  96%|█████████▌| 48/50 [00:01<00:00, 43.21it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [45/50], Training Loss: 0.0096, Validation Loss: 0.0086\n","Epoch [46/50], Training Loss: 0.0095, Validation Loss: 0.0085\n","Epoch [47/50], Training Loss: 0.0094, Validation Loss: 0.0084\n","Epoch [48/50], Training Loss: 0.0093, Validation Loss: 0.0083\n","Epoch [49/50], Training Loss: 0.0092, Validation Loss: 0.0082\n"]},{"output_type":"stream","name":"stderr","text":["Training Model with LR=0.0001, Layers=[16, 32, 64, 32, 16], Optimizer=RMSprop: 100%|██████████| 50/50 [00:01<00:00, 46.16it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [50/50], Training Loss: 0.0091, Validation Loss: 0.0082\n","Best Model Parameters:\n","Learning Rate: 0.01\n","Hidden Layer Sizes: [16, 32, 64, 32, 16]\n","Optimizer: Adam\n","Best Validation Loss: 0.0015363869024440646\n"]}],"source":["for params in grid:\n","    # Initialize model and criterion\n","    model = NeuralNetwork(hidden_sizes=params['hidden_sizes'])\n","    criterion = nn.MSELoss()\n","\n","    # Choose optimizer based on parameter grid\n","    if params['optimizer'] == 'Adam':\n","        optimizer = optim.Adam(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'SGD':\n","        optimizer = optim.SGD(model.parameters(), lr=params['learning_rate'])\n","    elif params['optimizer'] == 'RMSprop':\n","        optimizer = optim.RMSprop(model.parameters(), lr=params['learning_rate'])\n","\n","    # Track losses for each epoch\n","    train_losses = []\n","    val_losses = []\n","\n","    # Training loop\n","    for epoch in tqdm(range(epochs), desc=f\"Training Model with LR={params['learning_rate']}, Layers={params['hidden_sizes']}, Optimizer={params['optimizer']}\"):\n","        # Training phase\n","        model.train()\n","        optimizer.zero_grad()\n","        outputs = model(X_train_tensor)\n","        train_loss = criterion(outputs, y_train_tensor)\n","        train_loss.backward()\n","        optimizer.step()\n","\n","        # Validation phase\n","        model.eval()\n","        with torch.no_grad():\n","            val_outputs = model(X_val_tensor)\n","            val_loss = criterion(val_outputs, y_val_tensor)\n","\n","        # Store losses\n","        train_losses.append(train_loss.item())\n","        val_losses.append(val_loss.item())\n","\n","        # Check if this model is the best so far based on validation loss\n","        if val_loss.item() < best_val_loss:\n","            best_val_loss = val_loss.item()\n","            best_model_info = {\n","                \"epoch\": epoch + 1,\n","                \"train_loss\": train_loss.item(),\n","                \"val_loss\": val_loss.item(),\n","                \"model_state_dict\": model.state_dict(),  # Store the best model weights\n","                \"optimizer_state_dict\": optimizer.state_dict(),  # Save the best optimizer state\n","                \"hyperparameters\": params  # Save the best hyperparameters for model reconstruction\n","            }\n","\n","        # Update tqdm description with current losses\n","        tqdm.write(f\"Epoch [{epoch+1}/{epochs}], Training Loss: {train_loss.item():.4f}, Validation Loss: {val_loss.item():.4f}\")\n","\n","    # Save all losses for plotting\n","    all_train_losses.append(train_losses)\n","    all_val_losses.append(val_losses)\n","\n","# Print the best hyperparameters\n","print(\"Best Model Parameters:\")\n","print(\"Learning Rate:\", best_model_info['hyperparameters']['learning_rate'])\n","print(\"Hidden Layer Sizes:\", best_model_info['hyperparameters']['hidden_sizes'])\n","print(\"Optimizer:\", best_model_info['hyperparameters']['optimizer'])\n","print(\"Best Validation Loss:\", best_val_loss)\n","\n","# Save the best model information to a file\n","torch.save(best_model_info, os.path.join(save_path, \"x_SMALL_best_model_info_CONSIDERATION_thechallenge.pt\"))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1733093063581,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"4_DbIgNliBuI","outputId":"fc922ab0-d1ee-4ba5-a853-a0dd8231b4fc"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(10, 6))\n","plt.plot(range(1, epochs + 1), all_train_losses[0], label='Training Loss')\n","plt.plot(range(1, epochs + 1), all_val_losses[0], label='Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Training and Validation Loss Over Epochs for Best Model')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":573,"status":"ok","timestamp":1733533518217,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"9O16vuIsiEnT","outputId":"2e69c178-a8a6-42b3-9da2-102bf9316bad"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test Root Mean Squared Error: 0.0374278233803238\n","Test R^2 Score: 0.8366925120353699\n"]}],"source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/x_SMALL_best_model_info_CONSIDERATION_thechallenge.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model2 = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model2.load_state_dict(training_history[\"model_state_dict\"])\n","\n","model2.eval()\n","with torch.no_grad():\n","    y_test_pred_tensor = model2(X_test_tensor)\n","    y_test_pred = y_test_pred_tensor.numpy()\n","\n","# Calculate test metrics\n","test_mse = root_mean_squared_error(y_test, y_test_pred)\n","test_r2 = r2_score(y_test, y_test_pred)\n","\n","print(\"Test Root Mean Squared Error:\", test_mse)\n","print(\"Test R^2 Score:\", test_r2)"]},{"cell_type":"markdown","metadata":{"id":"IwZV-5LE0R_g"},"source":["## Check with Jacobian"]},{"cell_type":"code","execution_count":70,"metadata":{"executionInfo":{"elapsed":373,"status":"ok","timestamp":1733403759459,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"},"user_tz":-60},"id":"P-TEtZJi0V4R"},"outputs":[],"source":["def FK(model, theta):\n","    t = theta.view(1, 2)\n","    out = model(t)\n","    out = out.view(2)\n","    return out\n","\n","def FK_Jacobian(model, x):\n","    def forward_kinematics_fn(x):\n","        return FK(model, x)\n","    jacobian = torch.autograd.functional.jacobian(forward_kinematics_fn, x)\n","\n","    return jacobian\n","\n","def numerical_jacobian(model, theta, epsilon=1):\n","    theta_np = theta.detach().numpy()\n","    n = theta_np.size\n","    y0 = model.predict(theta_np.reshape(1, -1)).flatten()\n","    m = y0.size\n","    J = np.zeros((m, n))\n","\n","    for i in range(n):\n","        theta_plus = theta_np.copy()\n","        theta_minus = theta_np.copy()\n","        theta_plus[i] += epsilon\n","        theta_minus[i] -= epsilon\n","\n","        y_plus = model.predict(theta_plus.reshape(1, -1))\n","        y_minus = model.predict(theta_minus.reshape(1, -1))\n","\n","        J[:, i] = (y_plus - y_minus).flatten() / (2 * epsilon)\n","    return J\n","\n","# Analytical Jacobian\n","def analytical_jacobian(joint_angles):\n","    j0, j1 = joint_angles[0], joint_angles[1]\n","    j0 = j0.item()\n","    j1 = j1.item()\n","\n","    # Calculate partial derivatives\n","    dx_dj0 = -L1 * np.sin(j0) - L2 * np.sin(j0 + j1)\n","    dx_dj1 = -L2 * np.sin(j0 + j1)\n","    dy_dj0 = L1 * np.cos(j0) + L2 * np.cos(j0 + j1)\n","    dy_dj1 = L2 * np.cos(j0 + j1)\n","\n","    # Construct the Jacobian matrix\n","    J_analytical = np.array([[dx_dj0, dx_dj1], [dy_dj0, dy_dj1]])\n","    return J_analytical\n"]},{"cell_type":"code","source":["# Models trained\n","Linear_regression_model = lr\n","Decision_tree_model = best_dt\n","SVR_model = best_svr\n","Random_forest_model = best_rf\n","KNN_model = best_knn\n","\n","training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/AA_SMALL_best_model_info_CONSIDERATION.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()\n","\n","\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","NN_model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","NN_model.load_state_dict(training_history[\"model_state_dict\"])\n","\n","L1 = 0.1  # Length of the first link\n","L2 = 0.1  # Length of the second link\n","epsilon=1e-3\n","\n","# value for test of jacobian 0, -π/2\n","theta = torch.tensor([0, (np.pi/2)], dtype=torch.float32, requires_grad=True)\n","theta_other = np.array([0, -np.pi/2], dtype=np.float32)\n","\n","J_learned_Liner_regression = numerical_jacobian(Linear_regression_model, theta, epsilon)\n","\n","J_learned_Decision_tree = numerical_jacobian(Decision_tree_model, theta, epsilon)\n","\n","J_learned_SVR = numerical_jacobian(SVR_model, theta, epsilon)\n","\n","J_learned_Random_forest = numerical_jacobian(Random_forest_model, theta, epsilon)\n","\n","J_learned_KNN = numerical_jacobian(KNN_model, theta, epsilon)\n","\n","J_learned_NN = FK_Jacobian(NN_model, theta)\n","J_learned_NN_np = J_learned_NN.detach().numpy()\n","\n","# Analytical Jacobian\n","J_analytical = analytical_jacobian(theta)\n","\n","print(\"-----------------------------------Linear Regression---------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Liner_regression, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Liner_regression - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"-----------------------------------Decision Tree------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Decision_tree, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Decision_tree - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"--------------------------------------SVR-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_SVR, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_SVR - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n","print(\" \")\n","\n","print(\"---------------------------------------Random Forest-------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_Random_forest, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_Random_forest - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"----------------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------KNN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_KNN, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_KNN - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"-------------------------------------------------------------------------------------------\")\n","print(\" \")\n","print(\"--------------------------------------NN--------------------------------------------------\")\n","print(\"Learned Jacobian:\\n\", np.array2string(J_learned_NN_np, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"Analytical Jacobian:\\n\", np.array2string(J_analytical, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","difference = J_learned_NN_np - J_analytical\n","print(\"Difference between Learned and Analytical Jacobian:\\n\", np.array2string(difference, formatter={'float_kind':lambda x: f\"{x:.3f}\"}))\n","print(\"------------------------------------------------------------------------------------------\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a57Wb2xRZVW8","executionInfo":{"status":"ok","timestamp":1733403762275,"user_tz":-60,"elapsed":295,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"58db896d-c8a9-4ee8-d9c4-e2a279c0d556"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["-----------------------------------Linear Regression---------------------------------------------\n","Learned Jacobian:\n"," [[0.003 0.001]\n"," [0.016 -0.006]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.103 0.101]\n"," [-0.084 -0.006]]\n","------------------------------------------------------------------------------------------------\n"," \n","-----------------------------------Decision Tree------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.100 0.000]]\n","------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------SVR-------------------------------------------------\n","Learned Jacobian:\n"," [[-0.081 -0.090]\n"," [0.113 0.008]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.019 0.010]\n"," [0.013 0.008]]\n","------------------------------------------------------------------------------------------\n"," \n","---------------------------------------Random Forest-------------------------------------------------\n","Learned Jacobian:\n"," [[0.000 0.000]\n"," [0.000 0.000]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.100 0.100]\n"," [-0.100 0.000]]\n","----------------------------------------------------------------------------------------------------\n"," \n","--------------------------------------KNN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.088 -0.083]\n"," [0.059 0.041]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[0.012 0.017]\n"," [-0.041 0.041]]\n","-------------------------------------------------------------------------------------------\n"," \n","--------------------------------------NN--------------------------------------------------\n","Learned Jacobian:\n"," [[-0.122 -0.082]\n"," [0.047 -0.010]]\n","Analytical Jacobian:\n"," [[-0.100 -0.100]\n"," [0.100 -0.000]]\n","Difference between Learned and Analytical Jacobian:\n"," [[-0.022 0.018]\n"," [-0.053 -0.010]]\n","------------------------------------------------------------------------------------------\n"]}]},{"cell_type":"markdown","source":["### Check with metrics"],"metadata":{"id":"Ys1F1N_WFqx7"}},{"cell_type":"code","source":["file_path = '/content/drive/MyDrive/Machine_Learning/HW1/dataset/logfile_r2.csv'\n","data = pd.read_csv(file_path, delimiter=';')\n","filtered_data = data[['j0', 'j1', 'ft_x', 'ft_y']]\n","\n","joint_angles = torch.tensor(X_test[['j0', 'j1']].values, dtype=torch.float32, requires_grad=True)\n","ground_truth_positions = torch.tensor(y_test[['ft_x', 'ft_y']].values, dtype=torch.float32)\n","\n","def frobenius_norm(J_learned, J_analytical):\n","    return np.linalg.norm(J_learned - J_analytical)\n","\n","# Select 100 samples from dataset\n","random_indices = np.random.choice(len(joint_angles), size=100, replace=False)\n","selected_angles = joint_angles[random_indices]\n"],"metadata":{"id":"cYZ4B0so6nbG","executionInfo":{"status":"ok","timestamp":1733404634703,"user_tz":-60,"elapsed":374,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"F52Yf1QDFudZ","executionInfo":{"status":"ok","timestamp":1733403810094,"user_tz":-60,"elapsed":1848,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"f8771fa7-9375-4825-96fc-af9a995b3746"},"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned = FK_Jacobian(NN_model, theta)\n","    J_learned_np = J_learned.detach().numpy()\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"MZJn7Oy15a2d","executionInfo":{"status":"ok","timestamp":1733403814183,"user_tz":-60,"elapsed":1687,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"eae1b4a4-e108-41c6-ce9e-b399fe1c0a0d"},"execution_count":74,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA1AAAAIRCAYAAABEaFxMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABvnElEQVR4nO3deXhU5fn/8c+ZmWQSAkkgCwHCllQFWYKsVVRAqGxutYhrRVt3XFHr0rKpFbcirT9FbS1oFTe+Yq2CVdmqoiIQREAEQ0C2CImQQBKSzMzz+yPkJEMmMNmYCbxf18XF5D7PnHPf88yZzJ1z5oxljDECAAAAAByVI9QJAAAAAEBTQQMFAAAAAEGigQIAAACAINFAAQAAAECQaKAAAAAAIEg0UAAAAAAQJBooAAAAAAgSDRQAAAAABMkV6gSONZ/Pp507d6pFixayLCvU6QAAAAAIEWOM9u/fr7Zt28rhCO7Y0gnXQO3cuVPt27cPdRoAAAAAwsS2bduUmpoa1NgTroFq0aKFpPIHKTY2NsTZAAhbZWXSrFnlt6+9VoqICG0+AACgwRUUFKh9+/Z2jxAMyxhjGjGnsFNQUKC4uDjl5+fTQAGoWWGh1Lx5+e0DB6SYmNDmAwAAGlxdegMuIgEAAAAAQaKBAgAAAIAg0UABAAAAQJBooAAAAAAgSCfcVfgAAAAQPK/Xq7KyslCnAdSKy+WS0+lslO99pYECAABANcYY5eTkaN++faFOBagTp9Op5ORkxcXFNWgjRQMFAIG43dL771feBoATTEXzlJycrGbNmjXKX/KBxmCMkcfjUUFBgXbt2qXi4mK1adOmwdZPAwUAgbhc0ujRoc4CAELC6/XazVNCQkKo0wHqpEWLFnK73crNzVVycrKcTmeDrJeLSAAAAMBPxWeemjVrFuJMgPqJiYmRMaZBP8fHESgACKSsTHrttfLbV14pRUSENh8ACAFO20NTx0UkAOBYKS2Vrr22/PYll9BAAQAASZzCBwAAAABBo4ECAAAAjoFOnTrpmmuusX9esmSJLMvSkiVLQpYTao8GCgAAACeM2bNny7IsWZalzz77rNpyY4zat28vy7J03nnnhSDDxrFv3z7dcMMNSkpKUkxMjIYMGaJVq1YFdd/ly5frlltuUZ8+fRQREXHUzxW99NJL6tq1q6KionTSSSfpmWeeCThux44dGjt2rOLj4xUbG6sLL7xQmzdvPuK6P/vsM3v+cnNzg8q/odFAAQAA4IQTFRWlOXPmVIsvXbpU27dvl/sYfAfg2WefreLiYp199tmNuh2fz6fRo0drzpw5uvXWW/XEE09o9+7dGjx4sDZt2nTU+8+fP1//+Mc/ZFmW0tLSjjj2hRde0HXXXadu3brpmWee0emnn67bb79djz/+uN+4AwcOaMiQIVq6dKkefPBBTZ06VZmZmRo0aJDy8vJqrOO2225TTExM8MU3grBqoP73v//p/PPPV9u2bWVZlt59990ax950002yLEszZsw4ZvkBAADg+DBq1Ci9/fbb8ng8fvE5c+aoT58+SklJafQcHA6HoqKi5HA07lvyuXPnatmyZZo9e7YmT56s8ePHa8mSJXI6nZo8efJR73/zzTcrPz9fK1as0K9+9asaxxUXF+uPf/yjRo8erblz5+r666/XK6+8oiuvvFIPP/yw9u7da4997rnntGnTJr3//vv6wx/+oLvuuksfffSRdu3apb/85S8B1//iiy9q27Ztuu6662r/IDSgsGqgCgsLlZGRoWefffaI4+bNm6cvv/xSbdu2PUaZAQAA4Hhy+eWXKy8vTx9//LEdKy0t1dy5c3XFFVcEvI/P59OMGTPUrVs3RUVFqXXr1rrxxhv9GgOp/DTARx55RKmpqWrWrJmGDBmidevWVVtfoM9Affrpp7rkkkvUoUMHud1utW/fXnfddZeKi4v97ltWVqYNGzZo165dR6117ty5at26tS6++GI7lpSUpLFjx+rf//63SkpKjnj/1q1bKzo6+qjbWbx4sfLy8nTLLbf4xcePH6/CwkJ98MEHfjn169dP/fr1s2NdunTR0KFD9dZbb1Vb988//6w//elPeuihhxQfH3/UXBpTWDVQI0eO1COPPKJf//rXNY7ZsWOHbrvtNr322muK4LLCABqL2y299Vb5v2NwGgcA4Njq1KmTTj/9dL3++ut2bMGCBcrPz9dll10W8D433nij7r33Xg0cOFB//etfde211+q1117T8OHD/b6oddKkSZo4caIyMjL05JNPKi0tTeeee64KCwuPmtfbb7+toqIi3XzzzXrmmWc0fPhwPfPMM7r66qv9xu3YsUNdu3bVAw88cNR1ZmZmqnfv3tWOdPXv319FRUXauHHjUdcRjMzMTElS3759/eJ9+vSRw+Gw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AACAUKKBAgAAAIAg0UABAAAAQJBooAAAAAAgSDRQx4lnn31WnTp1UlRUlAYMGKDly5cfcfzbb7+tLl26KCoqSj169ND8+fP9ll9zzTWyLMvv34gRI/zG/Pzzz7ryyisVGxur+Ph4/f73v9eBAwcavLampKHn4fA5qPj35JNP2mM6depUbfljjz3WKPU1FbWZh3Xr1uk3v/mN/TjOmDGjTus8ePCgxo8fr4SEBDVv3ly/+c1vqn3p94mooedi2rRp6tevn1q0aKHk5GRddNFF+v777/3GDB48uNo+cdNNNzV0aU1KQ8/DlClTqj3GXbp08RvDPlFdQ89DoNd/y7I0fvx4ewz7Q2C1mYu///3vOuuss9SyZUu1bNlSw4YNqzbeGKNJkyapTZs2io6O1rBhw7Rp0ya/Mbxvqq4h56GsrEz33XefevTooZiYGLVt21ZXX321du7c6beeBnnfZNDkvfHGGyYyMtL885//NOvWrTPXX3+9iY+PNz/99FPA8Z9//rlxOp3miSeeMOvXrzd/+tOfTEREhPn222/tMePGjTMjRowwu3btsv/9/PPPfusZMWKEycjIMF9++aX59NNPzS9+8Qtz+eWXN2qt4awx5qHq479r1y7zz3/+01iWZbKysuwxHTt2NA899JDfuAMHDjR6veGqtvOwfPlyc88995jXX3/dpKSkmKeffrpO67zppptM+/btzcKFC82KFSvML3/5S3PGGWc0VplNQmPMxfDhw82sWbPM2rVrzerVq82oUaNMhw4d/J7zgwYNMtdff73fPpGfn99YZYa9xpiHyZMnm27duvk9xnv27PEbwz7hrzHmYffu3X5z8PHHHxtJZvHixfYY9ofqajsXV1xxhXn22WdNZmam+e6778w111xj4uLizPbt2+0xjz32mImLizPvvvuu+eabb8wFF1xgOnfubIqLi+0xvG/y19DzsG/fPjNs2DDz5ptvmg0bNpgvvvjC9O/f3/Tp08dvPQ3xvokG6jjQv39/M378ePtnr9dr2rZta6ZNmxZw/NixY83o0aP9YgMGDDA33nij/fO4cePMhRdeWOM2169fbySZr7/+2o4tWLDAWJZlduzYUcdKmrbGmIfDXXjhheacc87xi3Xs2DHgL9YTVW3noaqaHsujrXPfvn0mIiLCvP322/aY7777zkgyX3zxRT2qadoaYy4Ot3v3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x5t///vfZs2aNebCCy8MeBlz3jdVauh5KC0tNRdccIFJTU01q1ev9htTUlJijGm49000UMeJZ555xnTo0MFERkaa/v37my+//NJeNmjQIDNu3Di/8W+99ZY5+eSTTWRkpOnWrZv54IMP7GVFRUXm3HPPNUlJSSYiIsJ07NjRXH/99X5vFo0xJi8vz1x++eWmefPmJjY21lx77bV+LyYnooachwovvPCCiY6ONvv27au2bOXKlWbAgAEmLi7OREVFma5du5pHH33Ur9E9EdVmHrKzs42kav8GDRoU9DqNMaa4uNjccsstpmXLlqZZs2bm17/+tdm1a1djltkkNPRcBFouycyaNcsYY8yPP/5ozj77bNOqVSvjdrvNL37xC3Pvvfee8N9709DzcOmll5o2bdqYyMhI065dO3PppZeaH374wW+b7BPVNcZr03//+18jyXz//ffVtsf+ULPazEXHjh0DzsXkyZPtMT6fz0ycONG0bt3auN1uM3To0Gpzwvum6hpyHmraZ1Tlu9Ea6n2TZYwxwR+vAgAAAIATF5+BAgAAAIAg0UABAAAAQJBooAAAAAAgSDRQAAAAABAkGigAAAAACBINFAAAAAAEiQYKAAAAAIJEAwUAqLdRo0bp+uuvP6bbnDJliizLUm5u7jHdriRt2bJFlmVp9uzZx3zbTc3999+vAQMGhDoNAGgwNFAAEAZmz54ty7Jq/Pfll1+GOsUaff755/roo49033332bElS5bUWMtll10WwmybtorH8C9/+Uu1ZRXPoRUrVoQgs5rdeeed+uabb/Tee++FOhUAaBCuUCcAAKj00EMPqXPnztXiv/jFL0KQTXCefPJJDR06NGCOt99+u/r16+cX69Sp0zHKrPF07NhRxcXFioiICMn2n3zySd18881q1qxZSLZfGykpKbrwwgv11FNP6YILLgh1OgBQbzRQABBGRo4cqb59+9bqPh6PRz6fT5GRkdWWFRYWKiYmps75GGN08OBBRUdHB1y+e/duffDBB3r++ecDLj/rrLM0ZsyYoLZ1pDrCjWVZioqKCsm2e/XqpdWrV+v555/XhAkTGm079X3uVDV27Fhdcskl2rx5s9LS0hpknQAQKpzCBwBNSMVnb5566inNmDFD6enpcrvdWr9+vf2ZoPXr1+uKK65Qy5YtdeaZZ0oqb04efvhhe3ynTp304IMP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9JFdS1XPPvus38/PPPOMJNlXzLv44ovldDo1derUakdGjDHKy8trkNzT09O1YcMG7dmzx4598803+vzzz/3GHb49h8Ohnj17SlK1y8oHo+KzUC+++KJfvC6PZWPJz89XVlaWzjjjjGO2TQBoLByBAoAwsmDBAm3YsKFa/IwzzqjzF5BmZGRo3LhxevHFF7Vv3z4NGjRIy5cv18svv6yLLrpIQ4YMqXO+o0ePlsvl0ieffKIbbrihzuup6sknn9TIkSN1+umn6/e//7196e24uDhNmTKl2vjs7GxdcMEFGjFihL744gu9+uqruuKKK+yjHenp6XrkkUf0wAMPaMuWLbrooovUokULZWdna968ebrhhht0zz331Dvv3/3ud5o+fbqGDx+u3//+99q9e7eef/55devWTQUFBfa46667Tj///LPOOeccpaamauvWrXrmmWfUq1cvvyOEwRo0aJAGDRqkpUuXVltW28eysXzyyScyxujCCy88ZtsEgMZCAwUAYeTw07AqzJo1q84NlCT94x//UFpammbPnq158+YpJSVFDzzwgCZPnlzndUpS69atNWrUKL311lsN1kANGzZMH374oSZPnqxJkyYpIiJCgwYN0uOPPx7wIgdvvvmmJk2apPvvv18ul0u33nqrnnzySb8x999/v04++WQ9/fTTmjp1qqTyCyCce+65uuCCCxok765du+qVV17RpEmTNGHCBJ166qn617/+pTlz5thfOitJV111lV588UU999xz2rdvn1JSUnTppZdqypQpft+dVBtTpkwJ2AjX9rFsLG+//bbOPPNMpaenH7NtAkBjsczRPhULAMARfPrppxo8eLA2bNhQ45XucOLKyclR586d9cYbb3AECsBxgQYKAFBvI0eOVGpqqv7+97+HOhWEmfvvv1+LFi3S8uXLQ50KADQIGigAAAAACBJX4QMAAACAINFAAQAAAECQaKAAAAAAIEg0UAAAAAAQJBooAAAAAAgSDRQAAAAABIkGCgAAAACCRAMFAAAAAEGigQIAAACAINFAAQAAAECQaKAAAAAAIEj/H0rv3ODxWCLjAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(1, len(frobenius_errors) + 1), frobenius_errors, marker='o', linestyle='-', label='Frobenius Norm Error')\n","plt.title('Frobenius Norm Errors for 100 Samples', fontsize=14)\n","plt.xlabel('Sample Index', fontsize=12)\n","plt.ylabel('Frobenius Norm of Difference', fontsize=12)\n","plt.grid(True)\n","plt.legend(fontsize=12)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"71Ff_GPyFvsO","executionInfo":{"status":"ok","timestamp":1733404656448,"user_tz":-60,"elapsed":1204,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"0b0adc52-60e9-4dc2-99af-70826bf0a599"},"execution_count":83,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["frobenius_errors = []\n","\n","for theta in selected_angles:\n","    J_learned_np = numerical_jacobian(SVR_model, theta)\n","\n","    J_analytical = analytical_jacobian(theta)\n","\n","    frobenius_diff = frobenius_norm(J_learned_np, J_analytical)\n","\n","    frobenius_errors.append(frobenius_diff)\n","\n","# Genera un istogramma degli errori\n","plt.figure(figsize=(10, 6))\n","plt.hist(frobenius_errors, bins=20, color='blue', alpha=0.7, edgecolor='black')\n","plt.xlabel('Error (Frobenius Norm)', fontsize=12)\n","plt.ylabel('Frequency', fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","plt.axvline(np.mean(frobenius_errors), color='red', linestyle='dashed', linewidth=1.5, label=f'Media: {np.mean(frobenius_errors):.4f}')\n","plt.legend(fontsize=12)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":546},"id":"5ETdMIol5ex4","executionInfo":{"status":"ok","timestamp":1733404659764,"user_tz":-60,"elapsed":905,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"bcf9eb8e-51a8-4612-8df2-8c531ae8dcf3"},"execution_count":84,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Inverse Kinematics"],"metadata":{"id":"wUDWDLpIZaOY"}},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED NEWTON\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","        try:\n","            delta_joints = torch.linalg.solve(jacobian, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = initial_joints.clone().detach().requires_grad_(True)\n","\n","    for i in range(max_iters):\n","        current_position = FK(model, joints)\n","        error = target_position - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints.detach()\n","        #else:\n","          #print(\"MAX ITERS REACHED LM\")\n","\n","        jacobian = FK_Jacobian(model, joints)\n","\n","        # Update of Levenberg-Marquardt: (J^T J + λI) * delta_joints = J^T * error\n","        A = jacobian.T @ jacobian + lambda_ * torch.eye(jacobian.size(1))\n","        b = jacobian.T @ error\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints.detach()\n","\n","        joints = joints + delta_joints\n","\n","    return joints.detach()\n","\n","def compare_methods(model, initial_joints, target_position):\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(FK(model, target_joints_nr) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(FK(model, target_joints_lm) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\" \")\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position, \"Value computed by Newton-Raphson Method: \", FK(model, target_joints_nr).detach()) #.detach() is used for remove grad_fn=<ViewBackward0> from print\n","    print(\"Comparison target:\", target_position, \"Value computed by Levenberg Marquardt: \", FK(model, target_joints_lm).detach())\n"],"metadata":{"id":"I54Zi3ChZZd9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["training_history = torch.load(\"/content/drive/MyDrive/Machine_Learning/HW1/ROBOT _2_ARMS_models/AA_SMALL_best_model_info_CONSIDERATION.pt\", weights_only=False)\n","best_hidden_sizes = training_history[\"hyperparameters\"][\"hidden_sizes\"]\n","model = NeuralNetwork(hidden_sizes=best_hidden_sizes)\n","model.load_state_dict(training_history[\"model_state_dict\"])\n","model.eval()\n","\n","initial_joints = torch.tensor([0.0, np.pi/4], requires_grad=True)\n","#target_position = torch.tensor([-0.1, -0.1])\n","target_position = torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","print(target_position)\n","\n","compare_methods(model, initial_joints, target_position)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bWBMo-6MZZu1","executionInfo":{"status":"ok","timestamp":1733153914925,"user_tz":-60,"elapsed":12490,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"556e1658-3256-4369-d0bc-299e550a0465"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0.0100, 0.0110])\n","Newton-Raphson Method:\n","Target joints Newton-Raphson: tensor([-3.4544, -2.7748])\n","Newton-Raphson Error: 3.725290298461914e-08\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([ 0.9200, -3.0001])\n","Levenberg-Marquardt Error: 0.04975510761141777\n"," \n","--------------------------------------\n","Comparison target: tensor([0.0100, 0.0110]) Value computed by Newton-Raphson Method:  tensor([0.0100, 0.0110])\n","Comparison target: tensor([0.0100, 0.0110]) Value computed by Levenberg Marquardt:  tensor([ 0.0525, -0.0149])\n"]}]},{"cell_type":"code","source":["def inverse_kinematics_newton_raphson(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        try:\n","            delta_joints = torch.linalg.solve(J, error)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione del Jacobiano:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position, max_iters=10000, tolerance=1e-4, lambda_=0.05):\n","    joints = torch.tensor(initial_joints, dtype=torch.float32)\n","\n","    for i in range(max_iters):\n","        current_position = torch.tensor(model.predict(joints.unsqueeze(0).numpy()).flatten(), dtype=torch.float32)\n","        error = target_position.float() - current_position\n","        if torch.norm(error) < tolerance:\n","            return joints\n","\n","        jacobian = numerical_jacobian(model, joints)\n","        J = torch.tensor(jacobian, dtype=torch.float32)\n","        A = J.T @ J + lambda_ * torch.eye(J.shape[1], dtype=torch.float32)\n","        b = J.T @ error  # `error` ora è garantito essere `torch.float32`\n","\n","        try:\n","            delta_joints = torch.linalg.solve(A, b)\n","        except RuntimeError as e:\n","            print(\"Errore nell'inversione della matrice in Levenberg-Marquardt:\", e)\n","            return joints\n","\n","        joints = joints + delta_joints\n","\n","    return joints\n","\n","\n","def compare_methods(model, initial_joints, target_position, model_name):\n","    print(f\"\\n{model_name} Results:\")\n","    print(f\"Target Position: {target_position}\")\n","\n","    # Newton-Raphson Method\n","    print(\"Newton-Raphson Method:\")\n","    target_joints_nr = inverse_kinematics_newton_raphson(model, initial_joints, target_position)\n","    nr_error = torch.norm(torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Newton-Raphson:\", target_joints_nr)\n","    print(\"Newton-Raphson Error:\", nr_error.item())\n","\n","    # Levenberg-Marquardt Method\n","    print(\"\\nLevenberg-Marquardt Method:\")\n","    target_joints_lm = inverse_kinematics_levenberg_marquardt(model, initial_joints, target_position)\n","    lm_error = torch.norm(torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()) - target_position)\n","    print(\"Target joints Levenberg-Marquardt:\", target_joints_lm)\n","    print(\"Levenberg-Marquardt Error:\", lm_error.item())\n","\n","    print(\"--------------------------------------\")\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Newton-Raphson Method: \",\n","          torch.tensor(model.predict(target_joints_nr.unsqueeze(0).numpy()).flatten()))\n","    print(\"Comparison target:\", target_position,\n","          \"Value computed by Levenberg-Marquardt Method: \",\n","          torch.tensor(model.predict(target_joints_lm.unsqueeze(0).numpy()).flatten()))\n","\n","\n","models = [(\"SVR\", best_svr)]\n","\n","initial_joints = [0.5, 0.5]\n","torch.tensor(y_test.sample(n=1).to_numpy().flatten(), dtype=torch.float32)\n","\n","for model_name, model in models:\n","    compare_methods(model, initial_joints, target_position, model_name)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pss2Me33b2gX","executionInfo":{"status":"ok","timestamp":1733153920560,"user_tz":-60,"elapsed":5272,"user":{"displayName":"daniele sabatini","userId":"09250324401392693043"}},"outputId":"d193a57a-6c6e-4c93-a9e2-fdfa330ecb13"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","SVR Results:\n","Target Position: tensor([0.0100, 0.0110])\n","Newton-Raphson Method:\n","Target joints Newton-Raphson: tensor([-4.6290,  7.5482])\n","Newton-Raphson Error: 9.750925697497478e-06\n","\n","Levenberg-Marquardt Method:\n","Target joints Levenberg-Marquardt: tensor([-1.5732,  3.1853])\n","Levenberg-Marquardt Error: 9.979437501265278e-05\n","--------------------------------------\n","Comparison target: tensor([0.0100, 0.0110]) Value computed by Newton-Raphson Method:  tensor([0.0100, 0.0110], dtype=torch.float64)\n","Comparison target: tensor([0.0100, 0.0110]) Value computed by Levenberg-Marquardt Method:  tensor([0.0101, 0.0111], dtype=torch.float64)\n"]}]}],"metadata":{"colab":{"toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyNCnX0UVBo6Snd+N9YgJ0Qq"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}